// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testShopCategories(t *testing.T) {
	t.Parallel()

	query := ShopCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testShopCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ShopCategories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ShopCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testShopCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ShopCategoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ShopCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ShopCategoryExists to return true, but got false.")
	}
}

func testShopCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	shopCategoryFound, err := FindShopCategory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if shopCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testShopCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ShopCategories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testShopCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ShopCategories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testShopCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	shopCategoryOne := &ShopCategory{}
	shopCategoryTwo := &ShopCategory{}
	if err = randomize.Struct(seed, shopCategoryOne, shopCategoryDBTypes, false, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, shopCategoryTwo, shopCategoryDBTypes, false, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShopCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testShopCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	shopCategoryOne := &ShopCategory{}
	shopCategoryTwo := &ShopCategory{}
	if err = randomize.Struct(seed, shopCategoryOne, shopCategoryDBTypes, false, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, shopCategoryTwo, shopCategoryDBTypes, false, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = shopCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = shopCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func shopCategoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopCategory) error {
	*o = ShopCategory{}
	return nil
}

func shopCategoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopCategory) error {
	*o = ShopCategory{}
	return nil
}

func shopCategoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ShopCategory) error {
	*o = ShopCategory{}
	return nil
}

func shopCategoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShopCategory) error {
	*o = ShopCategory{}
	return nil
}

func shopCategoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ShopCategory) error {
	*o = ShopCategory{}
	return nil
}

func shopCategoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShopCategory) error {
	*o = ShopCategory{}
	return nil
}

func shopCategoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ShopCategory) error {
	*o = ShopCategory{}
	return nil
}

func shopCategoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopCategory) error {
	*o = ShopCategory{}
	return nil
}

func shopCategoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ShopCategory) error {
	*o = ShopCategory{}
	return nil
}

func testShopCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ShopCategory{}
	o := &ShopCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ShopCategory object: %s", err)
	}

	AddShopCategoryHook(boil.BeforeInsertHook, shopCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	shopCategoryBeforeInsertHooks = []ShopCategoryHook{}

	AddShopCategoryHook(boil.AfterInsertHook, shopCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	shopCategoryAfterInsertHooks = []ShopCategoryHook{}

	AddShopCategoryHook(boil.AfterSelectHook, shopCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	shopCategoryAfterSelectHooks = []ShopCategoryHook{}

	AddShopCategoryHook(boil.BeforeUpdateHook, shopCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	shopCategoryBeforeUpdateHooks = []ShopCategoryHook{}

	AddShopCategoryHook(boil.AfterUpdateHook, shopCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	shopCategoryAfterUpdateHooks = []ShopCategoryHook{}

	AddShopCategoryHook(boil.BeforeDeleteHook, shopCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	shopCategoryBeforeDeleteHooks = []ShopCategoryHook{}

	AddShopCategoryHook(boil.AfterDeleteHook, shopCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	shopCategoryAfterDeleteHooks = []ShopCategoryHook{}

	AddShopCategoryHook(boil.BeforeUpsertHook, shopCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	shopCategoryBeforeUpsertHooks = []ShopCategoryHook{}

	AddShopCategoryHook(boil.AfterUpsertHook, shopCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	shopCategoryAfterUpsertHooks = []ShopCategoryHook{}
}

func testShopCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(shopCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ShopCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testShopCategoryToManyCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopCategory
	var b, c Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, categoryDBTypes, false, categoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ShopCategoryID = a.ID
	c.ShopCategoryID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Categories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ShopCategoryID == b.ShopCategoryID {
			bFound = true
		}
		if v.ShopCategoryID == c.ShopCategoryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShopCategorySlice{&a}
	if err = a.L.LoadCategories(ctx, tx, false, (*[]*ShopCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Categories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Categories = nil
	if err = a.L.LoadCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Categories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShopCategoryToManySellerRequests(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopCategory
	var b, c SellerRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sellerRequestDBTypes, false, sellerRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerRequestDBTypes, false, sellerRequestColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ShopCategoryID = a.ID
	c.ShopCategoryID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SellerRequests().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ShopCategoryID == b.ShopCategoryID {
			bFound = true
		}
		if v.ShopCategoryID == c.ShopCategoryID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShopCategorySlice{&a}
	if err = a.L.LoadSellerRequests(ctx, tx, false, (*[]*ShopCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SellerRequests = nil
	if err = a.L.LoadSellerRequests(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerRequests); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShopCategoryToManySellerShops(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopCategory
	var b, c SellerShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sellerShopDBTypes, false, sellerShopColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerShopDBTypes, false, sellerShopColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ShopCategoryID, a.ID)
	queries.Assign(&c.ShopCategoryID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SellerShops().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ShopCategoryID, b.ShopCategoryID) {
			bFound = true
		}
		if queries.Equal(v.ShopCategoryID, c.ShopCategoryID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ShopCategorySlice{&a}
	if err = a.L.LoadSellerShops(ctx, tx, false, (*[]*ShopCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerShops); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SellerShops = nil
	if err = a.L.LoadSellerShops(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerShops); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testShopCategoryToManyAddOpCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopCategory
	var b, c, d, e Category

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopCategoryDBTypes, false, strmangle.SetComplement(shopCategoryPrimaryKeyColumns, shopCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Category{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, categoryDBTypes, false, strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Category{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ShopCategoryID {
			t.Error("foreign key was wrong value", a.ID, first.ShopCategoryID)
		}
		if a.ID != second.ShopCategoryID {
			t.Error("foreign key was wrong value", a.ID, second.ShopCategoryID)
		}

		if first.R.ShopCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShopCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Categories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Categories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Categories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testShopCategoryToManyAddOpSellerRequests(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopCategory
	var b, c, d, e SellerRequest

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopCategoryDBTypes, false, strmangle.SetComplement(shopCategoryPrimaryKeyColumns, shopCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerRequest{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerRequestDBTypes, false, strmangle.SetComplement(sellerRequestPrimaryKeyColumns, sellerRequestColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SellerRequest{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSellerRequests(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.ShopCategoryID {
			t.Error("foreign key was wrong value", a.ID, first.ShopCategoryID)
		}
		if a.ID != second.ShopCategoryID {
			t.Error("foreign key was wrong value", a.ID, second.ShopCategoryID)
		}

		if first.R.ShopCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShopCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SellerRequests[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SellerRequests[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SellerRequests().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testShopCategoryToManyAddOpSellerShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopCategory
	var b, c, d, e SellerShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopCategoryDBTypes, false, strmangle.SetComplement(shopCategoryPrimaryKeyColumns, shopCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerShop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SellerShop{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSellerShops(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ShopCategoryID) {
			t.Error("foreign key was wrong value", a.ID, first.ShopCategoryID)
		}
		if !queries.Equal(a.ID, second.ShopCategoryID) {
			t.Error("foreign key was wrong value", a.ID, second.ShopCategoryID)
		}

		if first.R.ShopCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ShopCategory != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SellerShops[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SellerShops[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SellerShops().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testShopCategoryToManySetOpSellerShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopCategory
	var b, c, d, e SellerShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopCategoryDBTypes, false, strmangle.SetComplement(shopCategoryPrimaryKeyColumns, shopCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerShop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSellerShops(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSellerShops(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ShopCategoryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ShopCategoryID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ShopCategoryID) {
		t.Error("foreign key was wrong value", a.ID, d.ShopCategoryID)
	}
	if !queries.Equal(a.ID, e.ShopCategoryID) {
		t.Error("foreign key was wrong value", a.ID, e.ShopCategoryID)
	}

	if b.R.ShopCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ShopCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ShopCategory != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ShopCategory != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SellerShops[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SellerShops[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testShopCategoryToManyRemoveOpSellerShops(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ShopCategory
	var b, c, d, e SellerShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, shopCategoryDBTypes, false, strmangle.SetComplement(shopCategoryPrimaryKeyColumns, shopCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerShop{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSellerShops(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSellerShops(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerShops().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ShopCategoryID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ShopCategoryID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ShopCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ShopCategory != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ShopCategory != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ShopCategory != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SellerShops) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SellerShops[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SellerShops[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testShopCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ShopCategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testShopCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ShopCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	shopCategoryDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Name`: `text`, `Slug`: `text`, `Image`: `text`}
	_                   = bytes.MinRead
)

func testShopCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(shopCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(shopCategoryAllColumns) == len(shopCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testShopCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(shopCategoryAllColumns) == len(shopCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ShopCategory{}
	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ShopCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, shopCategoryDBTypes, true, shopCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(shopCategoryAllColumns, shopCategoryPrimaryKeyColumns) {
		fields = shopCategoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			shopCategoryAllColumns,
			shopCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ShopCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testShopCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(shopCategoryAllColumns) == len(shopCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ShopCategory{}
	if err = randomize.Struct(seed, &o, shopCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShopCategory: %s", err)
	}

	count, err := ShopCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, shopCategoryDBTypes, false, shopCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ShopCategory: %s", err)
	}

	count, err = ShopCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
