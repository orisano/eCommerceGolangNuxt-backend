// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SellerProduct is an object representing the database table.
type SellerProduct struct {
	ID              int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt       null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name            null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Slug            null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	SellingPrice    null.String `boil:"selling_price" json:"selling_price,omitempty" toml:"selling_price" yaml:"selling_price,omitempty"`
	ProductPrice    null.String `boil:"product_price" json:"product_price,omitempty" toml:"product_price" yaml:"product_price,omitempty"`
	Quantity        null.Int64  `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	Active          null.Bool   `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	Description     null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	OfferPrice      null.Int64  `boil:"offer_price" json:"offer_price,omitempty" toml:"offer_price" yaml:"offer_price,omitempty"`
	OfferPriceStart null.Time   `boil:"offer_price_start" json:"offer_price_start,omitempty" toml:"offer_price_start" yaml:"offer_price_start,omitempty"`
	OfferPriceEnd   null.Time   `boil:"offer_price_end" json:"offer_price_end,omitempty" toml:"offer_price_end" yaml:"offer_price_end,omitempty"`
	NextStock       null.Time   `boil:"next_stock" json:"next_stock,omitempty" toml:"next_stock" yaml:"next_stock,omitempty"`
	BrandID         null.Int64  `boil:"brand_id" json:"brand_id,omitempty" toml:"brand_id" yaml:"brand_id,omitempty"`
	UserID          null.Int64  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	SellerShopID    null.Int64  `boil:"seller_shop_id" json:"seller_shop_id,omitempty" toml:"seller_shop_id" yaml:"seller_shop_id,omitempty"`

	R *sellerProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sellerProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SellerProductColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
	Name            string
	Slug            string
	SellingPrice    string
	ProductPrice    string
	Quantity        string
	Active          string
	Description     string
	OfferPrice      string
	OfferPriceStart string
	OfferPriceEnd   string
	NextStock       string
	BrandID         string
	UserID          string
	SellerShopID    string
}{
	ID:              "id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
	Name:            "name",
	Slug:            "slug",
	SellingPrice:    "selling_price",
	ProductPrice:    "product_price",
	Quantity:        "quantity",
	Active:          "active",
	Description:     "description",
	OfferPrice:      "offer_price",
	OfferPriceStart: "offer_price_start",
	OfferPriceEnd:   "offer_price_end",
	NextStock:       "next_stock",
	BrandID:         "brand_id",
	UserID:          "user_id",
	SellerShopID:    "seller_shop_id",
}

var SellerProductTableColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
	Name            string
	Slug            string
	SellingPrice    string
	ProductPrice    string
	Quantity        string
	Active          string
	Description     string
	OfferPrice      string
	OfferPriceStart string
	OfferPriceEnd   string
	NextStock       string
	BrandID         string
	UserID          string
	SellerShopID    string
}{
	ID:              "seller_products.id",
	CreatedAt:       "seller_products.created_at",
	UpdatedAt:       "seller_products.updated_at",
	DeletedAt:       "seller_products.deleted_at",
	Name:            "seller_products.name",
	Slug:            "seller_products.slug",
	SellingPrice:    "seller_products.selling_price",
	ProductPrice:    "seller_products.product_price",
	Quantity:        "seller_products.quantity",
	Active:          "seller_products.active",
	Description:     "seller_products.description",
	OfferPrice:      "seller_products.offer_price",
	OfferPriceStart: "seller_products.offer_price_start",
	OfferPriceEnd:   "seller_products.offer_price_end",
	NextStock:       "seller_products.next_stock",
	BrandID:         "seller_products.brand_id",
	UserID:          "seller_products.user_id",
	SellerShopID:    "seller_products.seller_shop_id",
}

// Generated where

var SellerProductWhere = struct {
	ID              whereHelperint64
	CreatedAt       whereHelpernull_Time
	UpdatedAt       whereHelpernull_Time
	DeletedAt       whereHelpernull_Time
	Name            whereHelpernull_String
	Slug            whereHelpernull_String
	SellingPrice    whereHelpernull_String
	ProductPrice    whereHelpernull_String
	Quantity        whereHelpernull_Int64
	Active          whereHelpernull_Bool
	Description     whereHelpernull_String
	OfferPrice      whereHelpernull_Int64
	OfferPriceStart whereHelpernull_Time
	OfferPriceEnd   whereHelpernull_Time
	NextStock       whereHelpernull_Time
	BrandID         whereHelpernull_Int64
	UserID          whereHelpernull_Int64
	SellerShopID    whereHelpernull_Int64
}{
	ID:              whereHelperint64{field: "\"seller_products\".\"id\""},
	CreatedAt:       whereHelpernull_Time{field: "\"seller_products\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"seller_products\".\"updated_at\""},
	DeletedAt:       whereHelpernull_Time{field: "\"seller_products\".\"deleted_at\""},
	Name:            whereHelpernull_String{field: "\"seller_products\".\"name\""},
	Slug:            whereHelpernull_String{field: "\"seller_products\".\"slug\""},
	SellingPrice:    whereHelpernull_String{field: "\"seller_products\".\"selling_price\""},
	ProductPrice:    whereHelpernull_String{field: "\"seller_products\".\"product_price\""},
	Quantity:        whereHelpernull_Int64{field: "\"seller_products\".\"quantity\""},
	Active:          whereHelpernull_Bool{field: "\"seller_products\".\"active\""},
	Description:     whereHelpernull_String{field: "\"seller_products\".\"description\""},
	OfferPrice:      whereHelpernull_Int64{field: "\"seller_products\".\"offer_price\""},
	OfferPriceStart: whereHelpernull_Time{field: "\"seller_products\".\"offer_price_start\""},
	OfferPriceEnd:   whereHelpernull_Time{field: "\"seller_products\".\"offer_price_end\""},
	NextStock:       whereHelpernull_Time{field: "\"seller_products\".\"next_stock\""},
	BrandID:         whereHelpernull_Int64{field: "\"seller_products\".\"brand_id\""},
	UserID:          whereHelpernull_Int64{field: "\"seller_products\".\"user_id\""},
	SellerShopID:    whereHelpernull_Int64{field: "\"seller_products\".\"seller_shop_id\""},
}

// SellerProductRels is where relationship names are stored.
var SellerProductRels = struct {
	Brand                   string
	SellerShop              string
	User                    string
	CartProducts            string
	CheckoutProducts        string
	SellerProductCategories string
	SellerProductImages     string
	SellerProductVariations string
	SellerShopProducts      string
}{
	Brand:                   "Brand",
	SellerShop:              "SellerShop",
	User:                    "User",
	CartProducts:            "CartProducts",
	CheckoutProducts:        "CheckoutProducts",
	SellerProductCategories: "SellerProductCategories",
	SellerProductImages:     "SellerProductImages",
	SellerProductVariations: "SellerProductVariations",
	SellerShopProducts:      "SellerShopProducts",
}

// sellerProductR is where relationships are stored.
type sellerProductR struct {
	Brand                   *Brand                      `boil:"Brand" json:"Brand" toml:"Brand" yaml:"Brand"`
	SellerShop              *SellerShop                 `boil:"SellerShop" json:"SellerShop" toml:"SellerShop" yaml:"SellerShop"`
	User                    *User                       `boil:"User" json:"User" toml:"User" yaml:"User"`
	CartProducts            CartProductSlice            `boil:"CartProducts" json:"CartProducts" toml:"CartProducts" yaml:"CartProducts"`
	CheckoutProducts        CheckoutProductSlice        `boil:"CheckoutProducts" json:"CheckoutProducts" toml:"CheckoutProducts" yaml:"CheckoutProducts"`
	SellerProductCategories SellerProductCategorySlice  `boil:"SellerProductCategories" json:"SellerProductCategories" toml:"SellerProductCategories" yaml:"SellerProductCategories"`
	SellerProductImages     SellerProductImageSlice     `boil:"SellerProductImages" json:"SellerProductImages" toml:"SellerProductImages" yaml:"SellerProductImages"`
	SellerProductVariations SellerProductVariationSlice `boil:"SellerProductVariations" json:"SellerProductVariations" toml:"SellerProductVariations" yaml:"SellerProductVariations"`
	SellerShopProducts      SellerShopProductSlice      `boil:"SellerShopProducts" json:"SellerShopProducts" toml:"SellerShopProducts" yaml:"SellerShopProducts"`
}

// NewStruct creates a new relationship struct
func (*sellerProductR) NewStruct() *sellerProductR {
	return &sellerProductR{}
}

// sellerProductL is where Load methods for each relationship are stored.
type sellerProductL struct{}

var (
	sellerProductAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name", "slug", "selling_price", "product_price", "quantity", "active", "description", "offer_price", "offer_price_start", "offer_price_end", "next_stock", "brand_id", "user_id", "seller_shop_id"}
	sellerProductColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "name", "slug", "selling_price", "product_price", "description", "offer_price", "offer_price_start", "offer_price_end", "next_stock", "brand_id", "user_id", "seller_shop_id"}
	sellerProductColumnsWithDefault    = []string{"id", "quantity", "active"}
	sellerProductPrimaryKeyColumns     = []string{"id"}
)

type (
	// SellerProductSlice is an alias for a slice of pointers to SellerProduct.
	// This should almost always be used instead of []SellerProduct.
	SellerProductSlice []*SellerProduct
	// SellerProductHook is the signature for custom SellerProduct hook methods
	SellerProductHook func(context.Context, boil.ContextExecutor, *SellerProduct) error

	sellerProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sellerProductType                 = reflect.TypeOf(&SellerProduct{})
	sellerProductMapping              = queries.MakeStructMapping(sellerProductType)
	sellerProductPrimaryKeyMapping, _ = queries.BindMapping(sellerProductType, sellerProductMapping, sellerProductPrimaryKeyColumns)
	sellerProductInsertCacheMut       sync.RWMutex
	sellerProductInsertCache          = make(map[string]insertCache)
	sellerProductUpdateCacheMut       sync.RWMutex
	sellerProductUpdateCache          = make(map[string]updateCache)
	sellerProductUpsertCacheMut       sync.RWMutex
	sellerProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sellerProductBeforeInsertHooks []SellerProductHook
var sellerProductBeforeUpdateHooks []SellerProductHook
var sellerProductBeforeDeleteHooks []SellerProductHook
var sellerProductBeforeUpsertHooks []SellerProductHook

var sellerProductAfterInsertHooks []SellerProductHook
var sellerProductAfterSelectHooks []SellerProductHook
var sellerProductAfterUpdateHooks []SellerProductHook
var sellerProductAfterDeleteHooks []SellerProductHook
var sellerProductAfterUpsertHooks []SellerProductHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SellerProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SellerProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SellerProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SellerProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SellerProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SellerProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SellerProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SellerProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SellerProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSellerProductHook registers your hook function for all future operations.
func AddSellerProductHook(hookPoint boil.HookPoint, sellerProductHook SellerProductHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sellerProductBeforeInsertHooks = append(sellerProductBeforeInsertHooks, sellerProductHook)
	case boil.BeforeUpdateHook:
		sellerProductBeforeUpdateHooks = append(sellerProductBeforeUpdateHooks, sellerProductHook)
	case boil.BeforeDeleteHook:
		sellerProductBeforeDeleteHooks = append(sellerProductBeforeDeleteHooks, sellerProductHook)
	case boil.BeforeUpsertHook:
		sellerProductBeforeUpsertHooks = append(sellerProductBeforeUpsertHooks, sellerProductHook)
	case boil.AfterInsertHook:
		sellerProductAfterInsertHooks = append(sellerProductAfterInsertHooks, sellerProductHook)
	case boil.AfterSelectHook:
		sellerProductAfterSelectHooks = append(sellerProductAfterSelectHooks, sellerProductHook)
	case boil.AfterUpdateHook:
		sellerProductAfterUpdateHooks = append(sellerProductAfterUpdateHooks, sellerProductHook)
	case boil.AfterDeleteHook:
		sellerProductAfterDeleteHooks = append(sellerProductAfterDeleteHooks, sellerProductHook)
	case boil.AfterUpsertHook:
		sellerProductAfterUpsertHooks = append(sellerProductAfterUpsertHooks, sellerProductHook)
	}
}

// One returns a single sellerProduct record from the query.
func (q sellerProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SellerProduct, error) {
	o := &SellerProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for seller_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SellerProduct records from the query.
func (q sellerProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (SellerProductSlice, error) {
	var o []*SellerProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SellerProduct slice")
	}

	if len(sellerProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SellerProduct records in the query.
func (q sellerProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count seller_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sellerProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if seller_products exists")
	}

	return count > 0, nil
}

// Brand pointed to by the foreign key.
func (o *SellerProduct) Brand(mods ...qm.QueryMod) brandQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BrandID),
	}

	queryMods = append(queryMods, mods...)

	query := Brands(queryMods...)
	queries.SetFrom(query.Query, "\"brands\"")

	return query
}

// SellerShop pointed to by the foreign key.
func (o *SellerProduct) SellerShop(mods ...qm.QueryMod) sellerShopQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SellerShopID),
	}

	queryMods = append(queryMods, mods...)

	query := SellerShops(queryMods...)
	queries.SetFrom(query.Query, "\"seller_shops\"")

	return query
}

// User pointed to by the foreign key.
func (o *SellerProduct) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// CartProducts retrieves all the cart_product's CartProducts with an executor.
func (o *SellerProduct) CartProducts(mods ...qm.QueryMod) cartProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cart_products\".\"seller_product_id\"=?", o.ID),
	)

	query := CartProducts(queryMods...)
	queries.SetFrom(query.Query, "\"cart_products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cart_products\".*"})
	}

	return query
}

// CheckoutProducts retrieves all the checkout_product's CheckoutProducts with an executor.
func (o *SellerProduct) CheckoutProducts(mods ...qm.QueryMod) checkoutProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkout_products\".\"seller_product_id\"=?", o.ID),
	)

	query := CheckoutProducts(queryMods...)
	queries.SetFrom(query.Query, "\"checkout_products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"checkout_products\".*"})
	}

	return query
}

// SellerProductCategories retrieves all the seller_product_category's SellerProductCategories with an executor.
func (o *SellerProduct) SellerProductCategories(mods ...qm.QueryMod) sellerProductCategoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"seller_product_categories\".\"seller_product_id\"=?", o.ID),
	)

	query := SellerProductCategories(queryMods...)
	queries.SetFrom(query.Query, "\"seller_product_categories\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"seller_product_categories\".*"})
	}

	return query
}

// SellerProductImages retrieves all the seller_product_image's SellerProductImages with an executor.
func (o *SellerProduct) SellerProductImages(mods ...qm.QueryMod) sellerProductImageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"seller_product_images\".\"seller_product_id\"=?", o.ID),
	)

	query := SellerProductImages(queryMods...)
	queries.SetFrom(query.Query, "\"seller_product_images\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"seller_product_images\".*"})
	}

	return query
}

// SellerProductVariations retrieves all the seller_product_variation's SellerProductVariations with an executor.
func (o *SellerProduct) SellerProductVariations(mods ...qm.QueryMod) sellerProductVariationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"seller_product_variations\".\"seller_product_id\"=?", o.ID),
	)

	query := SellerProductVariations(queryMods...)
	queries.SetFrom(query.Query, "\"seller_product_variations\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"seller_product_variations\".*"})
	}

	return query
}

// SellerShopProducts retrieves all the seller_shop_product's SellerShopProducts with an executor.
func (o *SellerProduct) SellerShopProducts(mods ...qm.QueryMod) sellerShopProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"seller_shop_products\".\"seller_product_id\"=?", o.ID),
	)

	query := SellerShopProducts(queryMods...)
	queries.SetFrom(query.Query, "\"seller_shop_products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"seller_shop_products\".*"})
	}

	return query
}

// LoadBrand allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sellerProductL) LoadBrand(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProduct interface{}, mods queries.Applicator) error {
	var slice []*SellerProduct
	var object *SellerProduct

	if singular {
		object = maybeSellerProduct.(*SellerProduct)
	} else {
		slice = *maybeSellerProduct.(*[]*SellerProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductR{}
		}
		if !queries.IsNil(object.BrandID) {
			args = append(args, object.BrandID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BrandID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BrandID) {
				args = append(args, obj.BrandID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brands`),
		qm.WhereIn(`brands.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Brand")
	}

	var resultSlice []*Brand
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Brand")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brands")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brands")
	}

	if len(sellerProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Brand = foreign
		if foreign.R == nil {
			foreign.R = &brandR{}
		}
		foreign.R.SellerProducts = append(foreign.R.SellerProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BrandID, foreign.ID) {
				local.R.Brand = foreign
				if foreign.R == nil {
					foreign.R = &brandR{}
				}
				foreign.R.SellerProducts = append(foreign.R.SellerProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadSellerShop allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sellerProductL) LoadSellerShop(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProduct interface{}, mods queries.Applicator) error {
	var slice []*SellerProduct
	var object *SellerProduct

	if singular {
		object = maybeSellerProduct.(*SellerProduct)
	} else {
		slice = *maybeSellerProduct.(*[]*SellerProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductR{}
		}
		if !queries.IsNil(object.SellerShopID) {
			args = append(args, object.SellerShopID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SellerShopID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SellerShopID) {
				args = append(args, obj.SellerShopID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_shops`),
		qm.WhereIn(`seller_shops.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SellerShop")
	}

	var resultSlice []*SellerShop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SellerShop")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seller_shops")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_shops")
	}

	if len(sellerProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerShop = foreign
		if foreign.R == nil {
			foreign.R = &sellerShopR{}
		}
		foreign.R.SellerProducts = append(foreign.R.SellerProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SellerShopID, foreign.ID) {
				local.R.SellerShop = foreign
				if foreign.R == nil {
					foreign.R = &sellerShopR{}
				}
				foreign.R.SellerProducts = append(foreign.R.SellerProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sellerProductL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProduct interface{}, mods queries.Applicator) error {
	var slice []*SellerProduct
	var object *SellerProduct

	if singular {
		object = maybeSellerProduct.(*SellerProduct)
	} else {
		slice = *maybeSellerProduct.(*[]*SellerProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(sellerProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SellerProducts = append(foreign.R.SellerProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SellerProducts = append(foreign.R.SellerProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadCartProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sellerProductL) LoadCartProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProduct interface{}, mods queries.Applicator) error {
	var slice []*SellerProduct
	var object *SellerProduct

	if singular {
		object = maybeSellerProduct.(*SellerProduct)
	} else {
		slice = *maybeSellerProduct.(*[]*SellerProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cart_products`),
		qm.WhereIn(`cart_products.seller_product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cart_products")
	}

	var resultSlice []*CartProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cart_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cart_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cart_products")
	}

	if len(cartProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CartProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cartProductR{}
			}
			foreign.R.SellerProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerProductID) {
				local.R.CartProducts = append(local.R.CartProducts, foreign)
				if foreign.R == nil {
					foreign.R = &cartProductR{}
				}
				foreign.R.SellerProduct = local
				break
			}
		}
	}

	return nil
}

// LoadCheckoutProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sellerProductL) LoadCheckoutProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProduct interface{}, mods queries.Applicator) error {
	var slice []*SellerProduct
	var object *SellerProduct

	if singular {
		object = maybeSellerProduct.(*SellerProduct)
	} else {
		slice = *maybeSellerProduct.(*[]*SellerProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkout_products`),
		qm.WhereIn(`checkout_products.seller_product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkout_products")
	}

	var resultSlice []*CheckoutProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkout_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkout_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkout_products")
	}

	if len(checkoutProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CheckoutProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutProductR{}
			}
			foreign.R.SellerProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerProductID) {
				local.R.CheckoutProducts = append(local.R.CheckoutProducts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutProductR{}
				}
				foreign.R.SellerProduct = local
				break
			}
		}
	}

	return nil
}

// LoadSellerProductCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sellerProductL) LoadSellerProductCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProduct interface{}, mods queries.Applicator) error {
	var slice []*SellerProduct
	var object *SellerProduct

	if singular {
		object = maybeSellerProduct.(*SellerProduct)
	} else {
		slice = *maybeSellerProduct.(*[]*SellerProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_product_categories`),
		qm.WhereIn(`seller_product_categories.seller_product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seller_product_categories")
	}

	var resultSlice []*SellerProductCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seller_product_categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seller_product_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_product_categories")
	}

	if len(sellerProductCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SellerProductCategories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sellerProductCategoryR{}
			}
			foreign.R.SellerProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerProductID) {
				local.R.SellerProductCategories = append(local.R.SellerProductCategories, foreign)
				if foreign.R == nil {
					foreign.R = &sellerProductCategoryR{}
				}
				foreign.R.SellerProduct = local
				break
			}
		}
	}

	return nil
}

// LoadSellerProductImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sellerProductL) LoadSellerProductImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProduct interface{}, mods queries.Applicator) error {
	var slice []*SellerProduct
	var object *SellerProduct

	if singular {
		object = maybeSellerProduct.(*SellerProduct)
	} else {
		slice = *maybeSellerProduct.(*[]*SellerProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_product_images`),
		qm.WhereIn(`seller_product_images.seller_product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seller_product_images")
	}

	var resultSlice []*SellerProductImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seller_product_images")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seller_product_images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_product_images")
	}

	if len(sellerProductImageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SellerProductImages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sellerProductImageR{}
			}
			foreign.R.SellerProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerProductID) {
				local.R.SellerProductImages = append(local.R.SellerProductImages, foreign)
				if foreign.R == nil {
					foreign.R = &sellerProductImageR{}
				}
				foreign.R.SellerProduct = local
				break
			}
		}
	}

	return nil
}

// LoadSellerProductVariations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sellerProductL) LoadSellerProductVariations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProduct interface{}, mods queries.Applicator) error {
	var slice []*SellerProduct
	var object *SellerProduct

	if singular {
		object = maybeSellerProduct.(*SellerProduct)
	} else {
		slice = *maybeSellerProduct.(*[]*SellerProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_product_variations`),
		qm.WhereIn(`seller_product_variations.seller_product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seller_product_variations")
	}

	var resultSlice []*SellerProductVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seller_product_variations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seller_product_variations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_product_variations")
	}

	if len(sellerProductVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SellerProductVariations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sellerProductVariationR{}
			}
			foreign.R.SellerProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SellerProductID {
				local.R.SellerProductVariations = append(local.R.SellerProductVariations, foreign)
				if foreign.R == nil {
					foreign.R = &sellerProductVariationR{}
				}
				foreign.R.SellerProduct = local
				break
			}
		}
	}

	return nil
}

// LoadSellerShopProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sellerProductL) LoadSellerShopProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProduct interface{}, mods queries.Applicator) error {
	var slice []*SellerProduct
	var object *SellerProduct

	if singular {
		object = maybeSellerProduct.(*SellerProduct)
	} else {
		slice = *maybeSellerProduct.(*[]*SellerProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_shop_products`),
		qm.WhereIn(`seller_shop_products.seller_product_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seller_shop_products")
	}

	var resultSlice []*SellerShopProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seller_shop_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seller_shop_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_shop_products")
	}

	if len(sellerShopProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SellerShopProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sellerShopProductR{}
			}
			foreign.R.SellerProduct = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerProductID) {
				local.R.SellerShopProducts = append(local.R.SellerShopProducts, foreign)
				if foreign.R == nil {
					foreign.R = &sellerShopProductR{}
				}
				foreign.R.SellerProduct = local
				break
			}
		}
	}

	return nil
}

// SetBrand of the sellerProduct to the related item.
// Sets o.R.Brand to related.
// Adds o to related.R.SellerProducts.
func (o *SellerProduct) SetBrand(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Brand) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"seller_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"brand_id"}),
		strmangle.WhereClause("\"", "\"", 2, sellerProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BrandID, related.ID)
	if o.R == nil {
		o.R = &sellerProductR{
			Brand: related,
		}
	} else {
		o.R.Brand = related
	}

	if related.R == nil {
		related.R = &brandR{
			SellerProducts: SellerProductSlice{o},
		}
	} else {
		related.R.SellerProducts = append(related.R.SellerProducts, o)
	}

	return nil
}

// RemoveBrand relationship.
// Sets o.R.Brand to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SellerProduct) RemoveBrand(ctx context.Context, exec boil.ContextExecutor, related *Brand) error {
	var err error

	queries.SetScanner(&o.BrandID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("brand_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Brand = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SellerProducts {
		if queries.Equal(o.BrandID, ri.BrandID) {
			continue
		}

		ln := len(related.R.SellerProducts)
		if ln > 1 && i < ln-1 {
			related.R.SellerProducts[i] = related.R.SellerProducts[ln-1]
		}
		related.R.SellerProducts = related.R.SellerProducts[:ln-1]
		break
	}
	return nil
}

// SetSellerShop of the sellerProduct to the related item.
// Sets o.R.SellerShop to related.
// Adds o to related.R.SellerProducts.
func (o *SellerProduct) SetSellerShop(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SellerShop) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"seller_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seller_shop_id"}),
		strmangle.WhereClause("\"", "\"", 2, sellerProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SellerShopID, related.ID)
	if o.R == nil {
		o.R = &sellerProductR{
			SellerShop: related,
		}
	} else {
		o.R.SellerShop = related
	}

	if related.R == nil {
		related.R = &sellerShopR{
			SellerProducts: SellerProductSlice{o},
		}
	} else {
		related.R.SellerProducts = append(related.R.SellerProducts, o)
	}

	return nil
}

// RemoveSellerShop relationship.
// Sets o.R.SellerShop to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SellerProduct) RemoveSellerShop(ctx context.Context, exec boil.ContextExecutor, related *SellerShop) error {
	var err error

	queries.SetScanner(&o.SellerShopID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("seller_shop_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SellerShop = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SellerProducts {
		if queries.Equal(o.SellerShopID, ri.SellerShopID) {
			continue
		}

		ln := len(related.R.SellerProducts)
		if ln > 1 && i < ln-1 {
			related.R.SellerProducts[i] = related.R.SellerProducts[ln-1]
		}
		related.R.SellerProducts = related.R.SellerProducts[:ln-1]
		break
	}
	return nil
}

// SetUser of the sellerProduct to the related item.
// Sets o.R.User to related.
// Adds o to related.R.SellerProducts.
func (o *SellerProduct) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"seller_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, sellerProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &sellerProductR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			SellerProducts: SellerProductSlice{o},
		}
	} else {
		related.R.SellerProducts = append(related.R.SellerProducts, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SellerProduct) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SellerProducts {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.SellerProducts)
		if ln > 1 && i < ln-1 {
			related.R.SellerProducts[i] = related.R.SellerProducts[ln-1]
		}
		related.R.SellerProducts = related.R.SellerProducts[:ln-1]
		break
	}
	return nil
}

// AddCartProducts adds the given related objects to the existing relationships
// of the seller_product, optionally inserting them as new records.
// Appends related to o.R.CartProducts.
// Sets related.R.SellerProduct appropriately.
func (o *SellerProduct) AddCartProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CartProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cart_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_id"}),
				strmangle.WhereClause("\"", "\"", 2, cartProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sellerProductR{
			CartProducts: related,
		}
	} else {
		o.R.CartProducts = append(o.R.CartProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cartProductR{
				SellerProduct: o,
			}
		} else {
			rel.R.SellerProduct = o
		}
	}
	return nil
}

// SetCartProducts removes all previously related items of the
// seller_product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerProduct's CartProducts accordingly.
// Replaces o.R.CartProducts with related.
// Sets related.R.SellerProduct's CartProducts accordingly.
func (o *SellerProduct) SetCartProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CartProduct) error {
	query := "update \"cart_products\" set \"seller_product_id\" = null where \"seller_product_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CartProducts {
			queries.SetScanner(&rel.SellerProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerProduct = nil
		}

		o.R.CartProducts = nil
	}
	return o.AddCartProducts(ctx, exec, insert, related...)
}

// RemoveCartProducts relationships from objects passed in.
// Removes related items from R.CartProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerProduct.
func (o *SellerProduct) RemoveCartProducts(ctx context.Context, exec boil.ContextExecutor, related ...*CartProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerProductID, nil)
		if rel.R != nil {
			rel.R.SellerProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CartProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.CartProducts)
			if ln > 1 && i < ln-1 {
				o.R.CartProducts[i] = o.R.CartProducts[ln-1]
			}
			o.R.CartProducts = o.R.CartProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddCheckoutProducts adds the given related objects to the existing relationships
// of the seller_product, optionally inserting them as new records.
// Appends related to o.R.CheckoutProducts.
// Sets related.R.SellerProduct appropriately.
func (o *SellerProduct) AddCheckoutProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CheckoutProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkout_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sellerProductR{
			CheckoutProducts: related,
		}
	} else {
		o.R.CheckoutProducts = append(o.R.CheckoutProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutProductR{
				SellerProduct: o,
			}
		} else {
			rel.R.SellerProduct = o
		}
	}
	return nil
}

// SetCheckoutProducts removes all previously related items of the
// seller_product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerProduct's CheckoutProducts accordingly.
// Replaces o.R.CheckoutProducts with related.
// Sets related.R.SellerProduct's CheckoutProducts accordingly.
func (o *SellerProduct) SetCheckoutProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CheckoutProduct) error {
	query := "update \"checkout_products\" set \"seller_product_id\" = null where \"seller_product_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CheckoutProducts {
			queries.SetScanner(&rel.SellerProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerProduct = nil
		}

		o.R.CheckoutProducts = nil
	}
	return o.AddCheckoutProducts(ctx, exec, insert, related...)
}

// RemoveCheckoutProducts relationships from objects passed in.
// Removes related items from R.CheckoutProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerProduct.
func (o *SellerProduct) RemoveCheckoutProducts(ctx context.Context, exec boil.ContextExecutor, related ...*CheckoutProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerProductID, nil)
		if rel.R != nil {
			rel.R.SellerProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CheckoutProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.CheckoutProducts)
			if ln > 1 && i < ln-1 {
				o.R.CheckoutProducts[i] = o.R.CheckoutProducts[ln-1]
			}
			o.R.CheckoutProducts = o.R.CheckoutProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddSellerProductCategories adds the given related objects to the existing relationships
// of the seller_product, optionally inserting them as new records.
// Appends related to o.R.SellerProductCategories.
// Sets related.R.SellerProduct appropriately.
func (o *SellerProduct) AddSellerProductCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerProductCategory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"seller_product_categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_id"}),
				strmangle.WhereClause("\"", "\"", 2, sellerProductCategoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sellerProductR{
			SellerProductCategories: related,
		}
	} else {
		o.R.SellerProductCategories = append(o.R.SellerProductCategories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sellerProductCategoryR{
				SellerProduct: o,
			}
		} else {
			rel.R.SellerProduct = o
		}
	}
	return nil
}

// SetSellerProductCategories removes all previously related items of the
// seller_product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerProduct's SellerProductCategories accordingly.
// Replaces o.R.SellerProductCategories with related.
// Sets related.R.SellerProduct's SellerProductCategories accordingly.
func (o *SellerProduct) SetSellerProductCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerProductCategory) error {
	query := "update \"seller_product_categories\" set \"seller_product_id\" = null where \"seller_product_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SellerProductCategories {
			queries.SetScanner(&rel.SellerProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerProduct = nil
		}

		o.R.SellerProductCategories = nil
	}
	return o.AddSellerProductCategories(ctx, exec, insert, related...)
}

// RemoveSellerProductCategories relationships from objects passed in.
// Removes related items from R.SellerProductCategories (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerProduct.
func (o *SellerProduct) RemoveSellerProductCategories(ctx context.Context, exec boil.ContextExecutor, related ...*SellerProductCategory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerProductID, nil)
		if rel.R != nil {
			rel.R.SellerProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SellerProductCategories {
			if rel != ri {
				continue
			}

			ln := len(o.R.SellerProductCategories)
			if ln > 1 && i < ln-1 {
				o.R.SellerProductCategories[i] = o.R.SellerProductCategories[ln-1]
			}
			o.R.SellerProductCategories = o.R.SellerProductCategories[:ln-1]
			break
		}
	}

	return nil
}

// AddSellerProductImages adds the given related objects to the existing relationships
// of the seller_product, optionally inserting them as new records.
// Appends related to o.R.SellerProductImages.
// Sets related.R.SellerProduct appropriately.
func (o *SellerProduct) AddSellerProductImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerProductImage) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"seller_product_images\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_id"}),
				strmangle.WhereClause("\"", "\"", 2, sellerProductImagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sellerProductR{
			SellerProductImages: related,
		}
	} else {
		o.R.SellerProductImages = append(o.R.SellerProductImages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sellerProductImageR{
				SellerProduct: o,
			}
		} else {
			rel.R.SellerProduct = o
		}
	}
	return nil
}

// SetSellerProductImages removes all previously related items of the
// seller_product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerProduct's SellerProductImages accordingly.
// Replaces o.R.SellerProductImages with related.
// Sets related.R.SellerProduct's SellerProductImages accordingly.
func (o *SellerProduct) SetSellerProductImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerProductImage) error {
	query := "update \"seller_product_images\" set \"seller_product_id\" = null where \"seller_product_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SellerProductImages {
			queries.SetScanner(&rel.SellerProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerProduct = nil
		}

		o.R.SellerProductImages = nil
	}
	return o.AddSellerProductImages(ctx, exec, insert, related...)
}

// RemoveSellerProductImages relationships from objects passed in.
// Removes related items from R.SellerProductImages (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerProduct.
func (o *SellerProduct) RemoveSellerProductImages(ctx context.Context, exec boil.ContextExecutor, related ...*SellerProductImage) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerProductID, nil)
		if rel.R != nil {
			rel.R.SellerProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SellerProductImages {
			if rel != ri {
				continue
			}

			ln := len(o.R.SellerProductImages)
			if ln > 1 && i < ln-1 {
				o.R.SellerProductImages[i] = o.R.SellerProductImages[ln-1]
			}
			o.R.SellerProductImages = o.R.SellerProductImages[:ln-1]
			break
		}
	}

	return nil
}

// AddSellerProductVariations adds the given related objects to the existing relationships
// of the seller_product, optionally inserting them as new records.
// Appends related to o.R.SellerProductVariations.
// Sets related.R.SellerProduct appropriately.
func (o *SellerProduct) AddSellerProductVariations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerProductVariation) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SellerProductID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"seller_product_variations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_id"}),
				strmangle.WhereClause("\"", "\"", 2, sellerProductVariationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SellerProductID = o.ID
		}
	}

	if o.R == nil {
		o.R = &sellerProductR{
			SellerProductVariations: related,
		}
	} else {
		o.R.SellerProductVariations = append(o.R.SellerProductVariations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sellerProductVariationR{
				SellerProduct: o,
			}
		} else {
			rel.R.SellerProduct = o
		}
	}
	return nil
}

// AddSellerShopProducts adds the given related objects to the existing relationships
// of the seller_product, optionally inserting them as new records.
// Appends related to o.R.SellerShopProducts.
// Sets related.R.SellerProduct appropriately.
func (o *SellerProduct) AddSellerShopProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerShopProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerProductID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"seller_shop_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_id"}),
				strmangle.WhereClause("\"", "\"", 2, sellerShopProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerProductID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sellerProductR{
			SellerShopProducts: related,
		}
	} else {
		o.R.SellerShopProducts = append(o.R.SellerShopProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sellerShopProductR{
				SellerProduct: o,
			}
		} else {
			rel.R.SellerProduct = o
		}
	}
	return nil
}

// SetSellerShopProducts removes all previously related items of the
// seller_product replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerProduct's SellerShopProducts accordingly.
// Replaces o.R.SellerShopProducts with related.
// Sets related.R.SellerProduct's SellerShopProducts accordingly.
func (o *SellerProduct) SetSellerShopProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerShopProduct) error {
	query := "update \"seller_shop_products\" set \"seller_product_id\" = null where \"seller_product_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SellerShopProducts {
			queries.SetScanner(&rel.SellerProductID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerProduct = nil
		}

		o.R.SellerShopProducts = nil
	}
	return o.AddSellerShopProducts(ctx, exec, insert, related...)
}

// RemoveSellerShopProducts relationships from objects passed in.
// Removes related items from R.SellerShopProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerProduct.
func (o *SellerProduct) RemoveSellerShopProducts(ctx context.Context, exec boil.ContextExecutor, related ...*SellerShopProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerProductID, nil)
		if rel.R != nil {
			rel.R.SellerProduct = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_product_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SellerShopProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.SellerShopProducts)
			if ln > 1 && i < ln-1 {
				o.R.SellerShopProducts[i] = o.R.SellerShopProducts[ln-1]
			}
			o.R.SellerShopProducts = o.R.SellerShopProducts[:ln-1]
			break
		}
	}

	return nil
}

// SellerProducts retrieves all the records using an executor.
func SellerProducts(mods ...qm.QueryMod) sellerProductQuery {
	mods = append(mods, qm.From("\"seller_products\""))
	return sellerProductQuery{NewQuery(mods...)}
}

// FindSellerProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSellerProduct(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SellerProduct, error) {
	sellerProductObj := &SellerProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"seller_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sellerProductObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from seller_products")
	}

	if err = sellerProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sellerProductObj, err
	}

	return sellerProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SellerProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seller_products provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sellerProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sellerProductInsertCacheMut.RLock()
	cache, cached := sellerProductInsertCache[key]
	sellerProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sellerProductAllColumns,
			sellerProductColumnsWithDefault,
			sellerProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sellerProductType, sellerProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sellerProductType, sellerProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"seller_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"seller_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into seller_products")
	}

	if !cached {
		sellerProductInsertCacheMut.Lock()
		sellerProductInsertCache[key] = cache
		sellerProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SellerProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SellerProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sellerProductUpdateCacheMut.RLock()
	cache, cached := sellerProductUpdateCache[key]
	sellerProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sellerProductAllColumns,
			sellerProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update seller_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"seller_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sellerProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sellerProductType, sellerProductMapping, append(wl, sellerProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update seller_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for seller_products")
	}

	if !cached {
		sellerProductUpdateCacheMut.Lock()
		sellerProductUpdateCache[key] = cache
		sellerProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sellerProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for seller_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for seller_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SellerProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"seller_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sellerProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sellerProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sellerProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SellerProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seller_products provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sellerProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sellerProductUpsertCacheMut.RLock()
	cache, cached := sellerProductUpsertCache[key]
	sellerProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sellerProductAllColumns,
			sellerProductColumnsWithDefault,
			sellerProductColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sellerProductAllColumns,
			sellerProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert seller_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sellerProductPrimaryKeyColumns))
			copy(conflict, sellerProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"seller_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sellerProductType, sellerProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sellerProductType, sellerProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert seller_products")
	}

	if !cached {
		sellerProductUpsertCacheMut.Lock()
		sellerProductUpsertCache[key] = cache
		sellerProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SellerProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SellerProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SellerProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sellerProductPrimaryKeyMapping)
	sql := "DELETE FROM \"seller_products\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from seller_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for seller_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sellerProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sellerProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seller_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seller_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SellerProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sellerProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"seller_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sellerProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sellerProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seller_products")
	}

	if len(sellerProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SellerProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSellerProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SellerProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SellerProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"seller_products\".* FROM \"seller_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sellerProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SellerProductSlice")
	}

	*o = slice

	return nil
}

// SellerProductExists checks if the SellerProduct row exists.
func SellerProductExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"seller_products\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if seller_products exists")
	}

	return exists, nil
}
