// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CartProduct is an object representing the database table.
type CartProduct struct {
	ID                       int64      `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt                null.Time  `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt                null.Time  `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt                null.Time  `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CartID                   null.Int64 `boil:"cart_id" json:"cart_id,omitempty" toml:"cart_id" yaml:"cart_id,omitempty"`
	Quantity                 null.Int64 `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	SellerProductID          null.Int64 `boil:"seller_product_id" json:"seller_product_id,omitempty" toml:"seller_product_id" yaml:"seller_product_id,omitempty"`
	SellerProductVariationID null.Int64 `boil:"seller_product_variation_id" json:"seller_product_variation_id,omitempty" toml:"seller_product_variation_id" yaml:"seller_product_variation_id,omitempty"`

	R *cartProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cartProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CartProductColumns = struct {
	ID                       string
	CreatedAt                string
	UpdatedAt                string
	DeletedAt                string
	CartID                   string
	Quantity                 string
	SellerProductID          string
	SellerProductVariationID string
}{
	ID:                       "id",
	CreatedAt:                "created_at",
	UpdatedAt:                "updated_at",
	DeletedAt:                "deleted_at",
	CartID:                   "cart_id",
	Quantity:                 "quantity",
	SellerProductID:          "seller_product_id",
	SellerProductVariationID: "seller_product_variation_id",
}

var CartProductTableColumns = struct {
	ID                       string
	CreatedAt                string
	UpdatedAt                string
	DeletedAt                string
	CartID                   string
	Quantity                 string
	SellerProductID          string
	SellerProductVariationID string
}{
	ID:                       "cart_products.id",
	CreatedAt:                "cart_products.created_at",
	UpdatedAt:                "cart_products.updated_at",
	DeletedAt:                "cart_products.deleted_at",
	CartID:                   "cart_products.cart_id",
	Quantity:                 "cart_products.quantity",
	SellerProductID:          "cart_products.seller_product_id",
	SellerProductVariationID: "cart_products.seller_product_variation_id",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CartProductWhere = struct {
	ID                       whereHelperint64
	CreatedAt                whereHelpernull_Time
	UpdatedAt                whereHelpernull_Time
	DeletedAt                whereHelpernull_Time
	CartID                   whereHelpernull_Int64
	Quantity                 whereHelpernull_Int64
	SellerProductID          whereHelpernull_Int64
	SellerProductVariationID whereHelpernull_Int64
}{
	ID:                       whereHelperint64{field: "\"cart_products\".\"id\""},
	CreatedAt:                whereHelpernull_Time{field: "\"cart_products\".\"created_at\""},
	UpdatedAt:                whereHelpernull_Time{field: "\"cart_products\".\"updated_at\""},
	DeletedAt:                whereHelpernull_Time{field: "\"cart_products\".\"deleted_at\""},
	CartID:                   whereHelpernull_Int64{field: "\"cart_products\".\"cart_id\""},
	Quantity:                 whereHelpernull_Int64{field: "\"cart_products\".\"quantity\""},
	SellerProductID:          whereHelpernull_Int64{field: "\"cart_products\".\"seller_product_id\""},
	SellerProductVariationID: whereHelpernull_Int64{field: "\"cart_products\".\"seller_product_variation_id\""},
}

// CartProductRels is where relationship names are stored.
var CartProductRels = struct {
	SellerProductVariation string
	Cart                   string
	SellerProduct          string
}{
	SellerProductVariation: "SellerProductVariation",
	Cart:                   "Cart",
	SellerProduct:          "SellerProduct",
}

// cartProductR is where relationships are stored.
type cartProductR struct {
	SellerProductVariation *SellerProductVariation `boil:"SellerProductVariation" json:"SellerProductVariation" toml:"SellerProductVariation" yaml:"SellerProductVariation"`
	Cart                   *Cart                   `boil:"Cart" json:"Cart" toml:"Cart" yaml:"Cart"`
	SellerProduct          *SellerProduct          `boil:"SellerProduct" json:"SellerProduct" toml:"SellerProduct" yaml:"SellerProduct"`
}

// NewStruct creates a new relationship struct
func (*cartProductR) NewStruct() *cartProductR {
	return &cartProductR{}
}

// cartProductL is where Load methods for each relationship are stored.
type cartProductL struct{}

var (
	cartProductAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "cart_id", "quantity", "seller_product_id", "seller_product_variation_id"}
	cartProductColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "cart_id", "quantity", "seller_product_id", "seller_product_variation_id"}
	cartProductColumnsWithDefault    = []string{"id"}
	cartProductPrimaryKeyColumns     = []string{"id"}
)

type (
	// CartProductSlice is an alias for a slice of pointers to CartProduct.
	// This should almost always be used instead of []CartProduct.
	CartProductSlice []*CartProduct
	// CartProductHook is the signature for custom CartProduct hook methods
	CartProductHook func(context.Context, boil.ContextExecutor, *CartProduct) error

	cartProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cartProductType                 = reflect.TypeOf(&CartProduct{})
	cartProductMapping              = queries.MakeStructMapping(cartProductType)
	cartProductPrimaryKeyMapping, _ = queries.BindMapping(cartProductType, cartProductMapping, cartProductPrimaryKeyColumns)
	cartProductInsertCacheMut       sync.RWMutex
	cartProductInsertCache          = make(map[string]insertCache)
	cartProductUpdateCacheMut       sync.RWMutex
	cartProductUpdateCache          = make(map[string]updateCache)
	cartProductUpsertCacheMut       sync.RWMutex
	cartProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cartProductBeforeInsertHooks []CartProductHook
var cartProductBeforeUpdateHooks []CartProductHook
var cartProductBeforeDeleteHooks []CartProductHook
var cartProductBeforeUpsertHooks []CartProductHook

var cartProductAfterInsertHooks []CartProductHook
var cartProductAfterSelectHooks []CartProductHook
var cartProductAfterUpdateHooks []CartProductHook
var cartProductAfterDeleteHooks []CartProductHook
var cartProductAfterUpsertHooks []CartProductHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CartProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CartProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CartProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CartProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CartProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CartProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CartProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CartProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CartProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cartProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCartProductHook registers your hook function for all future operations.
func AddCartProductHook(hookPoint boil.HookPoint, cartProductHook CartProductHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		cartProductBeforeInsertHooks = append(cartProductBeforeInsertHooks, cartProductHook)
	case boil.BeforeUpdateHook:
		cartProductBeforeUpdateHooks = append(cartProductBeforeUpdateHooks, cartProductHook)
	case boil.BeforeDeleteHook:
		cartProductBeforeDeleteHooks = append(cartProductBeforeDeleteHooks, cartProductHook)
	case boil.BeforeUpsertHook:
		cartProductBeforeUpsertHooks = append(cartProductBeforeUpsertHooks, cartProductHook)
	case boil.AfterInsertHook:
		cartProductAfterInsertHooks = append(cartProductAfterInsertHooks, cartProductHook)
	case boil.AfterSelectHook:
		cartProductAfterSelectHooks = append(cartProductAfterSelectHooks, cartProductHook)
	case boil.AfterUpdateHook:
		cartProductAfterUpdateHooks = append(cartProductAfterUpdateHooks, cartProductHook)
	case boil.AfterDeleteHook:
		cartProductAfterDeleteHooks = append(cartProductAfterDeleteHooks, cartProductHook)
	case boil.AfterUpsertHook:
		cartProductAfterUpsertHooks = append(cartProductAfterUpsertHooks, cartProductHook)
	}
}

// One returns a single cartProduct record from the query.
func (q cartProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CartProduct, error) {
	o := &CartProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for cart_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CartProduct records from the query.
func (q cartProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (CartProductSlice, error) {
	var o []*CartProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CartProduct slice")
	}

	if len(cartProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CartProduct records in the query.
func (q cartProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count cart_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cartProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if cart_products exists")
	}

	return count > 0, nil
}

// SellerProductVariation pointed to by the foreign key.
func (o *CartProduct) SellerProductVariation(mods ...qm.QueryMod) sellerProductVariationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SellerProductVariationID),
	}

	queryMods = append(queryMods, mods...)

	query := SellerProductVariations(queryMods...)
	queries.SetFrom(query.Query, "\"seller_product_variations\"")

	return query
}

// Cart pointed to by the foreign key.
func (o *CartProduct) Cart(mods ...qm.QueryMod) cartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CartID),
	}

	queryMods = append(queryMods, mods...)

	query := Carts(queryMods...)
	queries.SetFrom(query.Query, "\"carts\"")

	return query
}

// SellerProduct pointed to by the foreign key.
func (o *CartProduct) SellerProduct(mods ...qm.QueryMod) sellerProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SellerProductID),
	}

	queryMods = append(queryMods, mods...)

	query := SellerProducts(queryMods...)
	queries.SetFrom(query.Query, "\"seller_products\"")

	return query
}

// LoadSellerProductVariation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cartProductL) LoadSellerProductVariation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCartProduct interface{}, mods queries.Applicator) error {
	var slice []*CartProduct
	var object *CartProduct

	if singular {
		object = maybeCartProduct.(*CartProduct)
	} else {
		slice = *maybeCartProduct.(*[]*CartProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cartProductR{}
		}
		if !queries.IsNil(object.SellerProductVariationID) {
			args = append(args, object.SellerProductVariationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cartProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SellerProductVariationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SellerProductVariationID) {
				args = append(args, obj.SellerProductVariationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_product_variations`),
		qm.WhereIn(`seller_product_variations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SellerProductVariation")
	}

	var resultSlice []*SellerProductVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SellerProductVariation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seller_product_variations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_product_variations")
	}

	if len(cartProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerProductVariation = foreign
		if foreign.R == nil {
			foreign.R = &sellerProductVariationR{}
		}
		foreign.R.CartProducts = append(foreign.R.CartProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SellerProductVariationID, foreign.ID) {
				local.R.SellerProductVariation = foreign
				if foreign.R == nil {
					foreign.R = &sellerProductVariationR{}
				}
				foreign.R.CartProducts = append(foreign.R.CartProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadCart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cartProductL) LoadCart(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCartProduct interface{}, mods queries.Applicator) error {
	var slice []*CartProduct
	var object *CartProduct

	if singular {
		object = maybeCartProduct.(*CartProduct)
	} else {
		slice = *maybeCartProduct.(*[]*CartProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cartProductR{}
		}
		if !queries.IsNil(object.CartID) {
			args = append(args, object.CartID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cartProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CartID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CartID) {
				args = append(args, obj.CartID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`carts`),
		qm.WhereIn(`carts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Cart")
	}

	var resultSlice []*Cart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Cart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for carts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for carts")
	}

	if len(cartProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Cart = foreign
		if foreign.R == nil {
			foreign.R = &cartR{}
		}
		foreign.R.CartProducts = append(foreign.R.CartProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CartID, foreign.ID) {
				local.R.Cart = foreign
				if foreign.R == nil {
					foreign.R = &cartR{}
				}
				foreign.R.CartProducts = append(foreign.R.CartProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadSellerProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cartProductL) LoadSellerProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCartProduct interface{}, mods queries.Applicator) error {
	var slice []*CartProduct
	var object *CartProduct

	if singular {
		object = maybeCartProduct.(*CartProduct)
	} else {
		slice = *maybeCartProduct.(*[]*CartProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &cartProductR{}
		}
		if !queries.IsNil(object.SellerProductID) {
			args = append(args, object.SellerProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cartProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SellerProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SellerProductID) {
				args = append(args, obj.SellerProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_products`),
		qm.WhereIn(`seller_products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SellerProduct")
	}

	var resultSlice []*SellerProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SellerProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seller_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_products")
	}

	if len(cartProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerProduct = foreign
		if foreign.R == nil {
			foreign.R = &sellerProductR{}
		}
		foreign.R.CartProducts = append(foreign.R.CartProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SellerProductID, foreign.ID) {
				local.R.SellerProduct = foreign
				if foreign.R == nil {
					foreign.R = &sellerProductR{}
				}
				foreign.R.CartProducts = append(foreign.R.CartProducts, local)
				break
			}
		}
	}

	return nil
}

// SetSellerProductVariation of the cartProduct to the related item.
// Sets o.R.SellerProductVariation to related.
// Adds o to related.R.CartProducts.
func (o *CartProduct) SetSellerProductVariation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SellerProductVariation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cart_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_variation_id"}),
		strmangle.WhereClause("\"", "\"", 2, cartProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SellerProductVariationID, related.ID)
	if o.R == nil {
		o.R = &cartProductR{
			SellerProductVariation: related,
		}
	} else {
		o.R.SellerProductVariation = related
	}

	if related.R == nil {
		related.R = &sellerProductVariationR{
			CartProducts: CartProductSlice{o},
		}
	} else {
		related.R.CartProducts = append(related.R.CartProducts, o)
	}

	return nil
}

// RemoveSellerProductVariation relationship.
// Sets o.R.SellerProductVariation to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CartProduct) RemoveSellerProductVariation(ctx context.Context, exec boil.ContextExecutor, related *SellerProductVariation) error {
	var err error

	queries.SetScanner(&o.SellerProductVariationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("seller_product_variation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SellerProductVariation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CartProducts {
		if queries.Equal(o.SellerProductVariationID, ri.SellerProductVariationID) {
			continue
		}

		ln := len(related.R.CartProducts)
		if ln > 1 && i < ln-1 {
			related.R.CartProducts[i] = related.R.CartProducts[ln-1]
		}
		related.R.CartProducts = related.R.CartProducts[:ln-1]
		break
	}
	return nil
}

// SetCart of the cartProduct to the related item.
// Sets o.R.Cart to related.
// Adds o to related.R.CartProducts.
func (o *CartProduct) SetCart(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Cart) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cart_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"cart_id"}),
		strmangle.WhereClause("\"", "\"", 2, cartProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CartID, related.ID)
	if o.R == nil {
		o.R = &cartProductR{
			Cart: related,
		}
	} else {
		o.R.Cart = related
	}

	if related.R == nil {
		related.R = &cartR{
			CartProducts: CartProductSlice{o},
		}
	} else {
		related.R.CartProducts = append(related.R.CartProducts, o)
	}

	return nil
}

// RemoveCart relationship.
// Sets o.R.Cart to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CartProduct) RemoveCart(ctx context.Context, exec boil.ContextExecutor, related *Cart) error {
	var err error

	queries.SetScanner(&o.CartID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("cart_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Cart = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CartProducts {
		if queries.Equal(o.CartID, ri.CartID) {
			continue
		}

		ln := len(related.R.CartProducts)
		if ln > 1 && i < ln-1 {
			related.R.CartProducts[i] = related.R.CartProducts[ln-1]
		}
		related.R.CartProducts = related.R.CartProducts[:ln-1]
		break
	}
	return nil
}

// SetSellerProduct of the cartProduct to the related item.
// Sets o.R.SellerProduct to related.
// Adds o to related.R.CartProducts.
func (o *CartProduct) SetSellerProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SellerProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"cart_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_id"}),
		strmangle.WhereClause("\"", "\"", 2, cartProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SellerProductID, related.ID)
	if o.R == nil {
		o.R = &cartProductR{
			SellerProduct: related,
		}
	} else {
		o.R.SellerProduct = related
	}

	if related.R == nil {
		related.R = &sellerProductR{
			CartProducts: CartProductSlice{o},
		}
	} else {
		related.R.CartProducts = append(related.R.CartProducts, o)
	}

	return nil
}

// RemoveSellerProduct relationship.
// Sets o.R.SellerProduct to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CartProduct) RemoveSellerProduct(ctx context.Context, exec boil.ContextExecutor, related *SellerProduct) error {
	var err error

	queries.SetScanner(&o.SellerProductID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("seller_product_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SellerProduct = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CartProducts {
		if queries.Equal(o.SellerProductID, ri.SellerProductID) {
			continue
		}

		ln := len(related.R.CartProducts)
		if ln > 1 && i < ln-1 {
			related.R.CartProducts[i] = related.R.CartProducts[ln-1]
		}
		related.R.CartProducts = related.R.CartProducts[:ln-1]
		break
	}
	return nil
}

// CartProducts retrieves all the records using an executor.
func CartProducts(mods ...qm.QueryMod) cartProductQuery {
	mods = append(mods, qm.From("\"cart_products\""))
	return cartProductQuery{NewQuery(mods...)}
}

// FindCartProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCartProduct(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CartProduct, error) {
	cartProductObj := &CartProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"cart_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cartProductObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from cart_products")
	}

	if err = cartProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cartProductObj, err
	}

	return cartProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CartProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cart_products provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cartProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cartProductInsertCacheMut.RLock()
	cache, cached := cartProductInsertCache[key]
	cartProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cartProductAllColumns,
			cartProductColumnsWithDefault,
			cartProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cartProductType, cartProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cartProductType, cartProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"cart_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"cart_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into cart_products")
	}

	if !cached {
		cartProductInsertCacheMut.Lock()
		cartProductInsertCache[key] = cache
		cartProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CartProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CartProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cartProductUpdateCacheMut.RLock()
	cache, cached := cartProductUpdateCache[key]
	cartProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cartProductAllColumns,
			cartProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update cart_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"cart_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cartProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cartProductType, cartProductMapping, append(wl, cartProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update cart_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for cart_products")
	}

	if !cached {
		cartProductUpdateCacheMut.Lock()
		cartProductUpdateCache[key] = cache
		cartProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cartProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for cart_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for cart_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CartProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"cart_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cartProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cartProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cartProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CartProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no cart_products provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cartProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cartProductUpsertCacheMut.RLock()
	cache, cached := cartProductUpsertCache[key]
	cartProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			cartProductAllColumns,
			cartProductColumnsWithDefault,
			cartProductColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			cartProductAllColumns,
			cartProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert cart_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(cartProductPrimaryKeyColumns))
			copy(conflict, cartProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"cart_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(cartProductType, cartProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cartProductType, cartProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert cart_products")
	}

	if !cached {
		cartProductUpsertCacheMut.Lock()
		cartProductUpsertCache[key] = cache
		cartProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CartProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CartProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CartProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cartProductPrimaryKeyMapping)
	sql := "DELETE FROM \"cart_products\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from cart_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for cart_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cartProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cartProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cart_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cart_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CartProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cartProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"cart_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cartProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cartProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for cart_products")
	}

	if len(cartProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CartProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCartProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CartProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CartProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cartProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"cart_products\".* FROM \"cart_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cartProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CartProductSlice")
	}

	*o = slice

	return nil
}

// CartProductExists checks if the CartProduct row exists.
func CartProductExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"cart_products\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if cart_products exists")
	}

	return exists, nil
}
