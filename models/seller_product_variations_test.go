// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSellerProductVariations(t *testing.T) {
	t.Parallel()

	query := SellerProductVariations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSellerProductVariationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProductVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductVariationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SellerProductVariations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProductVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductVariationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerProductVariationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProductVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductVariationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SellerProductVariationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SellerProductVariation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SellerProductVariationExists to return true, but got false.")
	}
}

func testSellerProductVariationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sellerProductVariationFound, err := FindSellerProductVariation(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sellerProductVariationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSellerProductVariationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SellerProductVariations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSellerProductVariationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SellerProductVariations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSellerProductVariationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sellerProductVariationOne := &SellerProductVariation{}
	sellerProductVariationTwo := &SellerProductVariation{}
	if err = randomize.Struct(seed, sellerProductVariationOne, sellerProductVariationDBTypes, false, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerProductVariationTwo, sellerProductVariationDBTypes, false, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerProductVariationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerProductVariationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerProductVariations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSellerProductVariationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sellerProductVariationOne := &SellerProductVariation{}
	sellerProductVariationTwo := &SellerProductVariation{}
	if err = randomize.Struct(seed, sellerProductVariationOne, sellerProductVariationDBTypes, false, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerProductVariationTwo, sellerProductVariationDBTypes, false, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerProductVariationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerProductVariationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sellerProductVariationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariation) error {
	*o = SellerProductVariation{}
	return nil
}

func sellerProductVariationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariation) error {
	*o = SellerProductVariation{}
	return nil
}

func sellerProductVariationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariation) error {
	*o = SellerProductVariation{}
	return nil
}

func sellerProductVariationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariation) error {
	*o = SellerProductVariation{}
	return nil
}

func sellerProductVariationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariation) error {
	*o = SellerProductVariation{}
	return nil
}

func sellerProductVariationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariation) error {
	*o = SellerProductVariation{}
	return nil
}

func sellerProductVariationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariation) error {
	*o = SellerProductVariation{}
	return nil
}

func sellerProductVariationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariation) error {
	*o = SellerProductVariation{}
	return nil
}

func sellerProductVariationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariation) error {
	*o = SellerProductVariation{}
	return nil
}

func testSellerProductVariationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SellerProductVariation{}
	o := &SellerProductVariation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation object: %s", err)
	}

	AddSellerProductVariationHook(boil.BeforeInsertHook, sellerProductVariationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationBeforeInsertHooks = []SellerProductVariationHook{}

	AddSellerProductVariationHook(boil.AfterInsertHook, sellerProductVariationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationAfterInsertHooks = []SellerProductVariationHook{}

	AddSellerProductVariationHook(boil.AfterSelectHook, sellerProductVariationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationAfterSelectHooks = []SellerProductVariationHook{}

	AddSellerProductVariationHook(boil.BeforeUpdateHook, sellerProductVariationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationBeforeUpdateHooks = []SellerProductVariationHook{}

	AddSellerProductVariationHook(boil.AfterUpdateHook, sellerProductVariationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationAfterUpdateHooks = []SellerProductVariationHook{}

	AddSellerProductVariationHook(boil.BeforeDeleteHook, sellerProductVariationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationBeforeDeleteHooks = []SellerProductVariationHook{}

	AddSellerProductVariationHook(boil.AfterDeleteHook, sellerProductVariationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationAfterDeleteHooks = []SellerProductVariationHook{}

	AddSellerProductVariationHook(boil.BeforeUpsertHook, sellerProductVariationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationBeforeUpsertHooks = []SellerProductVariationHook{}

	AddSellerProductVariationHook(boil.AfterUpsertHook, sellerProductVariationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationAfterUpsertHooks = []SellerProductVariationHook{}
}

func testSellerProductVariationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerProductVariationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sellerProductVariationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SellerProductVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerProductVariationToManyCartProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariation
	var b, c CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cartProductDBTypes, false, cartProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cartProductDBTypes, false, cartProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SellerProductVariationID, a.ID)
	queries.Assign(&c.SellerProductVariationID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CartProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SellerProductVariationID, b.SellerProductVariationID) {
			bFound = true
		}
		if queries.Equal(v.SellerProductVariationID, c.SellerProductVariationID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SellerProductVariationSlice{&a}
	if err = a.L.LoadCartProducts(ctx, tx, false, (*[]*SellerProductVariation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CartProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CartProducts = nil
	if err = a.L.LoadCartProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CartProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSellerProductVariationToManyCheckoutProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariation
	var b, c CheckoutProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, checkoutProductDBTypes, false, checkoutProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutProductDBTypes, false, checkoutProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SellerProductVariationID, a.ID)
	queries.Assign(&c.SellerProductVariationID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CheckoutProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SellerProductVariationID, b.SellerProductVariationID) {
			bFound = true
		}
		if queries.Equal(v.SellerProductVariationID, c.SellerProductVariationID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SellerProductVariationSlice{&a}
	if err = a.L.LoadCheckoutProducts(ctx, tx, false, (*[]*SellerProductVariation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CheckoutProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CheckoutProducts = nil
	if err = a.L.LoadCheckoutProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CheckoutProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSellerProductVariationToManySellerProductVariationValues(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariation
	var b, c SellerProductVariationValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sellerProductVariationValueDBTypes, false, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductVariationValueDBTypes, false, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SellerProductVariationID = a.ID
	c.SellerProductVariationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SellerProductVariationValues().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SellerProductVariationID == b.SellerProductVariationID {
			bFound = true
		}
		if v.SellerProductVariationID == c.SellerProductVariationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SellerProductVariationSlice{&a}
	if err = a.L.LoadSellerProductVariationValues(ctx, tx, false, (*[]*SellerProductVariation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerProductVariationValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SellerProductVariationValues = nil
	if err = a.L.LoadSellerProductVariationValues(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerProductVariationValues); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSellerProductVariationToManyAddOpCartProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariation
	var b, c, d, e CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CartProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CartProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCartProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SellerProductVariationID) {
			t.Error("foreign key was wrong value", a.ID, first.SellerProductVariationID)
		}
		if !queries.Equal(a.ID, second.SellerProductVariationID) {
			t.Error("foreign key was wrong value", a.ID, second.SellerProductVariationID)
		}

		if first.R.SellerProductVariation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SellerProductVariation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CartProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CartProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CartProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSellerProductVariationToManySetOpCartProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariation
	var b, c, d, e CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CartProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCartProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCartProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductVariationID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductVariationID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SellerProductVariationID) {
		t.Error("foreign key was wrong value", a.ID, d.SellerProductVariationID)
	}
	if !queries.Equal(a.ID, e.SellerProductVariationID) {
		t.Error("foreign key was wrong value", a.ID, e.SellerProductVariationID)
	}

	if b.R.SellerProductVariation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProductVariation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProductVariation != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SellerProductVariation != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CartProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CartProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSellerProductVariationToManyRemoveOpCartProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariation
	var b, c, d, e CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CartProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCartProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCartProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductVariationID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductVariationID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SellerProductVariation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProductVariation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProductVariation != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SellerProductVariation != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CartProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CartProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CartProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSellerProductVariationToManyAddOpCheckoutProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariation
	var b, c, d, e CheckoutProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CheckoutProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCheckoutProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SellerProductVariationID) {
			t.Error("foreign key was wrong value", a.ID, first.SellerProductVariationID)
		}
		if !queries.Equal(a.ID, second.SellerProductVariationID) {
			t.Error("foreign key was wrong value", a.ID, second.SellerProductVariationID)
		}

		if first.R.SellerProductVariation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SellerProductVariation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CheckoutProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CheckoutProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CheckoutProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSellerProductVariationToManySetOpCheckoutProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariation
	var b, c, d, e CheckoutProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCheckoutProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCheckoutProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductVariationID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductVariationID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SellerProductVariationID) {
		t.Error("foreign key was wrong value", a.ID, d.SellerProductVariationID)
	}
	if !queries.Equal(a.ID, e.SellerProductVariationID) {
		t.Error("foreign key was wrong value", a.ID, e.SellerProductVariationID)
	}

	if b.R.SellerProductVariation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProductVariation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProductVariation != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SellerProductVariation != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CheckoutProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CheckoutProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSellerProductVariationToManyRemoveOpCheckoutProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariation
	var b, c, d, e CheckoutProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCheckoutProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCheckoutProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductVariationID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductVariationID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SellerProductVariation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProductVariation != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProductVariation != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SellerProductVariation != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CheckoutProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CheckoutProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CheckoutProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSellerProductVariationToManyAddOpSellerProductVariationValues(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariation
	var b, c, d, e SellerProductVariationValue

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerProductVariationValue{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerProductVariationValueDBTypes, false, strmangle.SetComplement(sellerProductVariationValuePrimaryKeyColumns, sellerProductVariationValueColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SellerProductVariationValue{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSellerProductVariationValues(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SellerProductVariationID {
			t.Error("foreign key was wrong value", a.ID, first.SellerProductVariationID)
		}
		if a.ID != second.SellerProductVariationID {
			t.Error("foreign key was wrong value", a.ID, second.SellerProductVariationID)
		}

		if first.R.SellerProductVariation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SellerProductVariation != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SellerProductVariationValues[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SellerProductVariationValues[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SellerProductVariationValues().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSellerProductVariationToOneSellerProductUsingSellerProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerProductVariation
	var foreign SellerProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerProductVariationDBTypes, false, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sellerProductDBTypes, false, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SellerProductID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SellerProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerProductVariationSlice{&local}
	if err = local.L.LoadSellerProduct(ctx, tx, false, (*[]*SellerProductVariation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SellerProduct = nil
	if err = local.L.LoadSellerProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProduct == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerProductVariationToOneSetOpSellerProductUsingSellerProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariation
	var b, c SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SellerProduct{&b, &c} {
		err = a.SetSellerProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SellerProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerProductVariations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SellerProductID != x.ID {
			t.Error("foreign key was wrong value", a.SellerProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SellerProductID))
		reflect.Indirect(reflect.ValueOf(&a.SellerProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SellerProductID != x.ID {
			t.Error("foreign key was wrong value", a.SellerProductID, x.ID)
		}
	}
}

func testSellerProductVariationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerProductVariationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerProductVariationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerProductVariationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerProductVariations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sellerProductVariationDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `ProductPrice`: `text`, `SellingPrice`: `text`, `Quantity`: `bigint`, `SellerProductID`: `bigint`, `Image`: `text`}
	_                             = bytes.MinRead
)

func testSellerProductVariationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sellerProductVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sellerProductVariationAllColumns) == len(sellerProductVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSellerProductVariationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sellerProductVariationAllColumns) == len(sellerProductVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariation{}
	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerProductVariationDBTypes, true, sellerProductVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sellerProductVariationAllColumns, sellerProductVariationPrimaryKeyColumns) {
		fields = sellerProductVariationAllColumns
	} else {
		fields = strmangle.SetComplement(
			sellerProductVariationAllColumns,
			sellerProductVariationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SellerProductVariationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSellerProductVariationsUpsert(t *testing.T) {
	t.Parallel()

	if len(sellerProductVariationAllColumns) == len(sellerProductVariationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SellerProductVariation{}
	if err = randomize.Struct(seed, &o, sellerProductVariationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerProductVariation: %s", err)
	}

	count, err := SellerProductVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sellerProductVariationDBTypes, false, sellerProductVariationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerProductVariation: %s", err)
	}

	count, err = SellerProductVariations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
