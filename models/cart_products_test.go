// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCartProducts(t *testing.T) {
	t.Parallel()

	query := CartProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCartProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CartProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCartProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CartProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CartProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCartProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CartProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CartProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCartProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CartProductExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CartProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CartProductExists to return true, but got false.")
	}
}

func testCartProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	cartProductFound, err := FindCartProduct(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if cartProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCartProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CartProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCartProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CartProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCartProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cartProductOne := &CartProduct{}
	cartProductTwo := &CartProduct{}
	if err = randomize.Struct(seed, cartProductOne, cartProductDBTypes, false, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, cartProductTwo, cartProductDBTypes, false, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cartProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cartProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CartProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCartProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cartProductOne := &CartProduct{}
	cartProductTwo := &CartProduct{}
	if err = randomize.Struct(seed, cartProductOne, cartProductDBTypes, false, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, cartProductTwo, cartProductDBTypes, false, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cartProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cartProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CartProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func cartProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CartProduct) error {
	*o = CartProduct{}
	return nil
}

func cartProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CartProduct) error {
	*o = CartProduct{}
	return nil
}

func cartProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CartProduct) error {
	*o = CartProduct{}
	return nil
}

func cartProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CartProduct) error {
	*o = CartProduct{}
	return nil
}

func cartProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CartProduct) error {
	*o = CartProduct{}
	return nil
}

func cartProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CartProduct) error {
	*o = CartProduct{}
	return nil
}

func cartProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CartProduct) error {
	*o = CartProduct{}
	return nil
}

func cartProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CartProduct) error {
	*o = CartProduct{}
	return nil
}

func cartProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CartProduct) error {
	*o = CartProduct{}
	return nil
}

func testCartProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CartProduct{}
	o := &CartProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cartProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CartProduct object: %s", err)
	}

	AddCartProductHook(boil.BeforeInsertHook, cartProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cartProductBeforeInsertHooks = []CartProductHook{}

	AddCartProductHook(boil.AfterInsertHook, cartProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cartProductAfterInsertHooks = []CartProductHook{}

	AddCartProductHook(boil.AfterSelectHook, cartProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cartProductAfterSelectHooks = []CartProductHook{}

	AddCartProductHook(boil.BeforeUpdateHook, cartProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cartProductBeforeUpdateHooks = []CartProductHook{}

	AddCartProductHook(boil.AfterUpdateHook, cartProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cartProductAfterUpdateHooks = []CartProductHook{}

	AddCartProductHook(boil.BeforeDeleteHook, cartProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cartProductBeforeDeleteHooks = []CartProductHook{}

	AddCartProductHook(boil.AfterDeleteHook, cartProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cartProductAfterDeleteHooks = []CartProductHook{}

	AddCartProductHook(boil.BeforeUpsertHook, cartProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cartProductBeforeUpsertHooks = []CartProductHook{}

	AddCartProductHook(boil.AfterUpsertHook, cartProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cartProductAfterUpsertHooks = []CartProductHook{}
}

func testCartProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CartProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCartProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(cartProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CartProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCartProductToOneSellerProductVariationUsingSellerProductVariation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CartProduct
	var foreign SellerProductVariation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sellerProductVariationDBTypes, false, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SellerProductVariationID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SellerProductVariation().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CartProductSlice{&local}
	if err = local.L.LoadSellerProductVariation(ctx, tx, false, (*[]*CartProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProductVariation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SellerProductVariation = nil
	if err = local.L.LoadSellerProductVariation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProductVariation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCartProductToOneCartUsingCart(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CartProduct
	var foreign Cart

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cartDBTypes, false, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CartID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Cart().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CartProductSlice{&local}
	if err = local.L.LoadCart(ctx, tx, false, (*[]*CartProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cart == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Cart = nil
	if err = local.L.LoadCart(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Cart == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCartProductToOneSellerProductUsingSellerProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CartProduct
	var foreign SellerProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sellerProductDBTypes, false, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SellerProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SellerProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CartProductSlice{&local}
	if err = local.L.LoadSellerProduct(ctx, tx, false, (*[]*CartProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SellerProduct = nil
	if err = local.L.LoadSellerProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProduct == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCartProductToOneSetOpSellerProductVariationUsingSellerProductVariation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CartProduct
	var b, c SellerProductVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SellerProductVariation{&b, &c} {
		err = a.SetSellerProductVariation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SellerProductVariation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CartProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SellerProductVariationID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductVariationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SellerProductVariationID))
		reflect.Indirect(reflect.ValueOf(&a.SellerProductVariationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SellerProductVariationID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductVariationID, x.ID)
		}
	}
}

func testCartProductToOneRemoveOpSellerProductVariationUsingSellerProductVariation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CartProduct
	var b SellerProductVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSellerProductVariation(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSellerProductVariation(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SellerProductVariation().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SellerProductVariation != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SellerProductVariationID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CartProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCartProductToOneSetOpCartUsingCart(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CartProduct
	var b, c Cart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Cart{&b, &c} {
		err = a.SetCart(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Cart != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CartProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CartID, x.ID) {
			t.Error("foreign key was wrong value", a.CartID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CartID))
		reflect.Indirect(reflect.ValueOf(&a.CartID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CartID, x.ID) {
			t.Error("foreign key was wrong value", a.CartID, x.ID)
		}
	}
}

func testCartProductToOneRemoveOpCartUsingCart(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CartProduct
	var b Cart

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCart(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCart(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Cart().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Cart != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CartID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CartProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCartProductToOneSetOpSellerProductUsingSellerProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CartProduct
	var b, c SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SellerProduct{&b, &c} {
		err = a.SetSellerProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SellerProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CartProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SellerProductID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SellerProductID))
		reflect.Indirect(reflect.ValueOf(&a.SellerProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SellerProductID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductID, x.ID)
		}
	}
}

func testCartProductToOneRemoveOpSellerProductUsingSellerProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CartProduct
	var b SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSellerProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSellerProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SellerProduct().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SellerProduct != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SellerProductID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CartProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCartProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCartProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CartProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCartProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CartProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cartProductDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `CartID`: `bigint`, `Quantity`: `bigint`, `SellerProductID`: `bigint`, `SellerProductVariationID`: `bigint`}
	_                  = bytes.MinRead
)

func testCartProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(cartProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(cartProductAllColumns) == len(cartProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CartProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCartProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cartProductAllColumns) == len(cartProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CartProduct{}
	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CartProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cartProductDBTypes, true, cartProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cartProductAllColumns, cartProductPrimaryKeyColumns) {
		fields = cartProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			cartProductAllColumns,
			cartProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CartProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCartProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(cartProductAllColumns) == len(cartProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CartProduct{}
	if err = randomize.Struct(seed, &o, cartProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CartProduct: %s", err)
	}

	count, err := CartProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, cartProductDBTypes, false, cartProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CartProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CartProduct: %s", err)
	}

	count, err = CartProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
