// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSellerProducts(t *testing.T) {
	t.Parallel()

	query := SellerProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSellerProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SellerProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SellerProductExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SellerProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SellerProductExists to return true, but got false.")
	}
}

func testSellerProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sellerProductFound, err := FindSellerProduct(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sellerProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSellerProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SellerProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSellerProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SellerProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSellerProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sellerProductOne := &SellerProduct{}
	sellerProductTwo := &SellerProduct{}
	if err = randomize.Struct(seed, sellerProductOne, sellerProductDBTypes, false, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerProductTwo, sellerProductDBTypes, false, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSellerProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sellerProductOne := &SellerProduct{}
	sellerProductTwo := &SellerProduct{}
	if err = randomize.Struct(seed, sellerProductOne, sellerProductDBTypes, false, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerProductTwo, sellerProductDBTypes, false, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sellerProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProduct) error {
	*o = SellerProduct{}
	return nil
}

func sellerProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProduct) error {
	*o = SellerProduct{}
	return nil
}

func sellerProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SellerProduct) error {
	*o = SellerProduct{}
	return nil
}

func sellerProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerProduct) error {
	*o = SellerProduct{}
	return nil
}

func sellerProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerProduct) error {
	*o = SellerProduct{}
	return nil
}

func sellerProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerProduct) error {
	*o = SellerProduct{}
	return nil
}

func sellerProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerProduct) error {
	*o = SellerProduct{}
	return nil
}

func sellerProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProduct) error {
	*o = SellerProduct{}
	return nil
}

func sellerProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProduct) error {
	*o = SellerProduct{}
	return nil
}

func testSellerProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SellerProduct{}
	o := &SellerProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sellerProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SellerProduct object: %s", err)
	}

	AddSellerProductHook(boil.BeforeInsertHook, sellerProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sellerProductBeforeInsertHooks = []SellerProductHook{}

	AddSellerProductHook(boil.AfterInsertHook, sellerProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sellerProductAfterInsertHooks = []SellerProductHook{}

	AddSellerProductHook(boil.AfterSelectHook, sellerProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sellerProductAfterSelectHooks = []SellerProductHook{}

	AddSellerProductHook(boil.BeforeUpdateHook, sellerProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sellerProductBeforeUpdateHooks = []SellerProductHook{}

	AddSellerProductHook(boil.AfterUpdateHook, sellerProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sellerProductAfterUpdateHooks = []SellerProductHook{}

	AddSellerProductHook(boil.BeforeDeleteHook, sellerProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sellerProductBeforeDeleteHooks = []SellerProductHook{}

	AddSellerProductHook(boil.AfterDeleteHook, sellerProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sellerProductAfterDeleteHooks = []SellerProductHook{}

	AddSellerProductHook(boil.BeforeUpsertHook, sellerProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sellerProductBeforeUpsertHooks = []SellerProductHook{}

	AddSellerProductHook(boil.AfterUpsertHook, sellerProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sellerProductAfterUpsertHooks = []SellerProductHook{}
}

func testSellerProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sellerProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerProductToManyCartProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cartProductDBTypes, false, cartProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cartProductDBTypes, false, cartProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SellerProductID, a.ID)
	queries.Assign(&c.SellerProductID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CartProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SellerProductID, b.SellerProductID) {
			bFound = true
		}
		if queries.Equal(v.SellerProductID, c.SellerProductID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SellerProductSlice{&a}
	if err = a.L.LoadCartProducts(ctx, tx, false, (*[]*SellerProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CartProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CartProducts = nil
	if err = a.L.LoadCartProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CartProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSellerProductToManyCheckoutProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c CheckoutProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, checkoutProductDBTypes, false, checkoutProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutProductDBTypes, false, checkoutProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SellerProductID, a.ID)
	queries.Assign(&c.SellerProductID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CheckoutProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SellerProductID, b.SellerProductID) {
			bFound = true
		}
		if queries.Equal(v.SellerProductID, c.SellerProductID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SellerProductSlice{&a}
	if err = a.L.LoadCheckoutProducts(ctx, tx, false, (*[]*SellerProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CheckoutProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CheckoutProducts = nil
	if err = a.L.LoadCheckoutProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CheckoutProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSellerProductToManySellerProductCategories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c SellerProductCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sellerProductCategoryDBTypes, false, sellerProductCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductCategoryDBTypes, false, sellerProductCategoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SellerProductID, a.ID)
	queries.Assign(&c.SellerProductID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SellerProductCategories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SellerProductID, b.SellerProductID) {
			bFound = true
		}
		if queries.Equal(v.SellerProductID, c.SellerProductID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SellerProductSlice{&a}
	if err = a.L.LoadSellerProductCategories(ctx, tx, false, (*[]*SellerProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerProductCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SellerProductCategories = nil
	if err = a.L.LoadSellerProductCategories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerProductCategories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSellerProductToManySellerProductImages(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c SellerProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sellerProductImageDBTypes, false, sellerProductImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductImageDBTypes, false, sellerProductImageColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SellerProductID, a.ID)
	queries.Assign(&c.SellerProductID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SellerProductImages().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SellerProductID, b.SellerProductID) {
			bFound = true
		}
		if queries.Equal(v.SellerProductID, c.SellerProductID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SellerProductSlice{&a}
	if err = a.L.LoadSellerProductImages(ctx, tx, false, (*[]*SellerProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerProductImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SellerProductImages = nil
	if err = a.L.LoadSellerProductImages(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerProductImages); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSellerProductToManySellerProductVariations(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c SellerProductVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sellerProductVariationDBTypes, false, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductVariationDBTypes, false, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SellerProductID = a.ID
	c.SellerProductID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SellerProductVariations().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SellerProductID == b.SellerProductID {
			bFound = true
		}
		if v.SellerProductID == c.SellerProductID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SellerProductSlice{&a}
	if err = a.L.LoadSellerProductVariations(ctx, tx, false, (*[]*SellerProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerProductVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SellerProductVariations = nil
	if err = a.L.LoadSellerProductVariations(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerProductVariations); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSellerProductToManySellerShopProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c SellerShopProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sellerShopProductDBTypes, false, sellerShopProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerShopProductDBTypes, false, sellerShopProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SellerProductID, a.ID)
	queries.Assign(&c.SellerProductID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SellerShopProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SellerProductID, b.SellerProductID) {
			bFound = true
		}
		if queries.Equal(v.SellerProductID, c.SellerProductID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SellerProductSlice{&a}
	if err = a.L.LoadSellerShopProducts(ctx, tx, false, (*[]*SellerProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerShopProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SellerShopProducts = nil
	if err = a.L.LoadSellerShopProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerShopProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSellerProductToManyAddOpCartProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CartProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CartProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCartProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SellerProductID) {
			t.Error("foreign key was wrong value", a.ID, first.SellerProductID)
		}
		if !queries.Equal(a.ID, second.SellerProductID) {
			t.Error("foreign key was wrong value", a.ID, second.SellerProductID)
		}

		if first.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CartProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CartProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CartProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSellerProductToManySetOpCartProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CartProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCartProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCartProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SellerProductID) {
		t.Error("foreign key was wrong value", a.ID, d.SellerProductID)
	}
	if !queries.Equal(a.ID, e.SellerProductID) {
		t.Error("foreign key was wrong value", a.ID, e.SellerProductID)
	}

	if b.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SellerProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CartProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CartProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSellerProductToManyRemoveOpCartProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CartProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCartProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCartProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SellerProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CartProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CartProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CartProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSellerProductToManyAddOpCheckoutProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e CheckoutProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CheckoutProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCheckoutProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SellerProductID) {
			t.Error("foreign key was wrong value", a.ID, first.SellerProductID)
		}
		if !queries.Equal(a.ID, second.SellerProductID) {
			t.Error("foreign key was wrong value", a.ID, second.SellerProductID)
		}

		if first.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CheckoutProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CheckoutProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CheckoutProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSellerProductToManySetOpCheckoutProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e CheckoutProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCheckoutProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCheckoutProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SellerProductID) {
		t.Error("foreign key was wrong value", a.ID, d.SellerProductID)
	}
	if !queries.Equal(a.ID, e.SellerProductID) {
		t.Error("foreign key was wrong value", a.ID, e.SellerProductID)
	}

	if b.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SellerProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CheckoutProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CheckoutProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSellerProductToManyRemoveOpCheckoutProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e CheckoutProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CheckoutProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCheckoutProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCheckoutProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SellerProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CheckoutProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CheckoutProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CheckoutProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSellerProductToManyAddOpSellerProductCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e SellerProductCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerProductCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerProductCategoryDBTypes, false, strmangle.SetComplement(sellerProductCategoryPrimaryKeyColumns, sellerProductCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SellerProductCategory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSellerProductCategories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SellerProductID) {
			t.Error("foreign key was wrong value", a.ID, first.SellerProductID)
		}
		if !queries.Equal(a.ID, second.SellerProductID) {
			t.Error("foreign key was wrong value", a.ID, second.SellerProductID)
		}

		if first.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SellerProductCategories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SellerProductCategories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SellerProductCategories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSellerProductToManySetOpSellerProductCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e SellerProductCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerProductCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerProductCategoryDBTypes, false, strmangle.SetComplement(sellerProductCategoryPrimaryKeyColumns, sellerProductCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSellerProductCategories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerProductCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSellerProductCategories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerProductCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SellerProductID) {
		t.Error("foreign key was wrong value", a.ID, d.SellerProductID)
	}
	if !queries.Equal(a.ID, e.SellerProductID) {
		t.Error("foreign key was wrong value", a.ID, e.SellerProductID)
	}

	if b.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SellerProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SellerProductCategories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SellerProductCategories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSellerProductToManyRemoveOpSellerProductCategories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e SellerProductCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerProductCategory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerProductCategoryDBTypes, false, strmangle.SetComplement(sellerProductCategoryPrimaryKeyColumns, sellerProductCategoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSellerProductCategories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerProductCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSellerProductCategories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerProductCategories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SellerProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SellerProductCategories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SellerProductCategories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SellerProductCategories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSellerProductToManyAddOpSellerProductImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e SellerProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerProductImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerProductImageDBTypes, false, strmangle.SetComplement(sellerProductImagePrimaryKeyColumns, sellerProductImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SellerProductImage{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSellerProductImages(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SellerProductID) {
			t.Error("foreign key was wrong value", a.ID, first.SellerProductID)
		}
		if !queries.Equal(a.ID, second.SellerProductID) {
			t.Error("foreign key was wrong value", a.ID, second.SellerProductID)
		}

		if first.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SellerProductImages[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SellerProductImages[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SellerProductImages().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSellerProductToManySetOpSellerProductImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e SellerProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerProductImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerProductImageDBTypes, false, strmangle.SetComplement(sellerProductImagePrimaryKeyColumns, sellerProductImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSellerProductImages(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSellerProductImages(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SellerProductID) {
		t.Error("foreign key was wrong value", a.ID, d.SellerProductID)
	}
	if !queries.Equal(a.ID, e.SellerProductID) {
		t.Error("foreign key was wrong value", a.ID, e.SellerProductID)
	}

	if b.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SellerProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SellerProductImages[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SellerProductImages[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSellerProductToManyRemoveOpSellerProductImages(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e SellerProductImage

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerProductImage{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerProductImageDBTypes, false, strmangle.SetComplement(sellerProductImagePrimaryKeyColumns, sellerProductImageColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSellerProductImages(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSellerProductImages(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SellerProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SellerProductImages) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SellerProductImages[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SellerProductImages[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSellerProductToManyAddOpSellerProductVariations(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e SellerProductVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerProductVariation{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SellerProductVariation{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSellerProductVariations(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SellerProductID {
			t.Error("foreign key was wrong value", a.ID, first.SellerProductID)
		}
		if a.ID != second.SellerProductID {
			t.Error("foreign key was wrong value", a.ID, second.SellerProductID)
		}

		if first.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SellerProductVariations[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SellerProductVariations[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SellerProductVariations().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSellerProductToManyAddOpSellerShopProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e SellerShopProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerShopProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerShopProductDBTypes, false, strmangle.SetComplement(sellerShopProductPrimaryKeyColumns, sellerShopProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SellerShopProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSellerShopProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SellerProductID) {
			t.Error("foreign key was wrong value", a.ID, first.SellerProductID)
		}
		if !queries.Equal(a.ID, second.SellerProductID) {
			t.Error("foreign key was wrong value", a.ID, second.SellerProductID)
		}

		if first.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SellerProduct != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SellerShopProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SellerShopProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SellerShopProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSellerProductToManySetOpSellerShopProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e SellerShopProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerShopProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerShopProductDBTypes, false, strmangle.SetComplement(sellerShopProductPrimaryKeyColumns, sellerShopProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSellerShopProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSellerShopProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SellerProductID) {
		t.Error("foreign key was wrong value", a.ID, d.SellerProductID)
	}
	if !queries.Equal(a.ID, e.SellerProductID) {
		t.Error("foreign key was wrong value", a.ID, e.SellerProductID)
	}

	if b.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SellerProduct != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SellerShopProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SellerShopProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSellerProductToManyRemoveOpSellerShopProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c, d, e SellerShopProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerShopProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerShopProductDBTypes, false, strmangle.SetComplement(sellerShopProductPrimaryKeyColumns, sellerShopProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSellerShopProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSellerShopProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerProductID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerProductID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerProduct != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerProduct != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SellerProduct != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SellerShopProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SellerShopProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SellerShopProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSellerProductToOneBrandUsingBrand(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerProduct
	var foreign Brand

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, brandDBTypes, false, brandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Brand struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BrandID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Brand().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerProductSlice{&local}
	if err = local.L.LoadBrand(ctx, tx, false, (*[]*SellerProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Brand == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Brand = nil
	if err = local.L.LoadBrand(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Brand == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerProductToOneSellerShopUsingSellerShop(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerProduct
	var foreign SellerShop

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sellerShopDBTypes, false, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SellerShopID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SellerShop().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerProductSlice{&local}
	if err = local.L.LoadSellerShop(ctx, tx, false, (*[]*SellerProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerShop == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SellerShop = nil
	if err = local.L.LoadSellerShop(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerShop == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerProductToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerProduct
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerProductSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*SellerProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerProductToOneSetOpBrandUsingBrand(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c Brand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, brandDBTypes, false, strmangle.SetComplement(brandPrimaryKeyColumns, brandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, brandDBTypes, false, strmangle.SetComplement(brandPrimaryKeyColumns, brandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Brand{&b, &c} {
		err = a.SetBrand(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Brand != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BrandID, x.ID) {
			t.Error("foreign key was wrong value", a.BrandID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BrandID))
		reflect.Indirect(reflect.ValueOf(&a.BrandID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BrandID, x.ID) {
			t.Error("foreign key was wrong value", a.BrandID, x.ID)
		}
	}
}

func testSellerProductToOneRemoveOpBrandUsingBrand(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b Brand

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, brandDBTypes, false, strmangle.SetComplement(brandPrimaryKeyColumns, brandColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBrand(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBrand(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Brand().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Brand != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BrandID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SellerProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSellerProductToOneSetOpSellerShopUsingSellerShop(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c SellerShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SellerShop{&b, &c} {
		err = a.SetSellerShop(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SellerShop != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SellerShopID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerShopID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SellerShopID))
		reflect.Indirect(reflect.ValueOf(&a.SellerShopID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SellerShopID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerShopID, x.ID)
		}
	}
}

func testSellerProductToOneRemoveOpSellerShopUsingSellerShop(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b SellerShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSellerShop(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSellerShop(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SellerShop().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SellerShop != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SellerShopID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SellerProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSellerProductToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testSellerProductToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProduct
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SellerProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSellerProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sellerProductDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Name`: `text`, `Slug`: `text`, `SellingPrice`: `text`, `ProductPrice`: `text`, `Quantity`: `bigint`, `Active`: `boolean`, `Description`: `text`, `OfferPrice`: `bigint`, `OfferPriceStart`: `timestamp with time zone`, `OfferPriceEnd`: `timestamp with time zone`, `NextStock`: `timestamp with time zone`, `BrandID`: `bigint`, `UserID`: `bigint`, `SellerShopID`: `bigint`}
	_                    = bytes.MinRead
)

func testSellerProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sellerProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sellerProductAllColumns) == len(sellerProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSellerProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sellerProductAllColumns) == len(sellerProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerProduct{}
	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerProductDBTypes, true, sellerProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sellerProductAllColumns, sellerProductPrimaryKeyColumns) {
		fields = sellerProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			sellerProductAllColumns,
			sellerProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SellerProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSellerProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(sellerProductAllColumns) == len(sellerProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SellerProduct{}
	if err = randomize.Struct(seed, &o, sellerProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerProduct: %s", err)
	}

	count, err := SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sellerProductDBTypes, false, sellerProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerProduct: %s", err)
	}

	count, err = SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
