// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SellerShop is an object representing the database table.
type SellerShop struct {
	ID               int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt        null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt        null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt        null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name             null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Slug             null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	ContactNumber    null.String `boil:"contact_number" json:"contact_number,omitempty" toml:"contact_number" yaml:"contact_number,omitempty"`
	Banner           null.String `boil:"banner" json:"banner,omitempty" toml:"banner" yaml:"banner,omitempty"`
	ShopCategoryID   null.Int64  `boil:"shop_category_id" json:"shop_category_id,omitempty" toml:"shop_category_id" yaml:"shop_category_id,omitempty"`
	BusinessLocation null.String `boil:"business_location" json:"business_location,omitempty" toml:"business_location" yaml:"business_location,omitempty"`
	TaxID            null.String `boil:"tax_id" json:"tax_id,omitempty" toml:"tax_id" yaml:"tax_id,omitempty"`
	Active           null.Bool   `boil:"active" json:"active,omitempty" toml:"active" yaml:"active,omitempty"`
	UserID           null.Int64  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	AdminID          null.Int64  `boil:"admin_id" json:"admin_id,omitempty" toml:"admin_id" yaml:"admin_id,omitempty"`

	R *sellerShopR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sellerShopL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SellerShopColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
	Name             string
	Slug             string
	ContactNumber    string
	Banner           string
	ShopCategoryID   string
	BusinessLocation string
	TaxID            string
	Active           string
	UserID           string
	AdminID          string
}{
	ID:               "id",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
	Name:             "name",
	Slug:             "slug",
	ContactNumber:    "contact_number",
	Banner:           "banner",
	ShopCategoryID:   "shop_category_id",
	BusinessLocation: "business_location",
	TaxID:            "tax_id",
	Active:           "active",
	UserID:           "user_id",
	AdminID:          "admin_id",
}

var SellerShopTableColumns = struct {
	ID               string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
	Name             string
	Slug             string
	ContactNumber    string
	Banner           string
	ShopCategoryID   string
	BusinessLocation string
	TaxID            string
	Active           string
	UserID           string
	AdminID          string
}{
	ID:               "seller_shops.id",
	CreatedAt:        "seller_shops.created_at",
	UpdatedAt:        "seller_shops.updated_at",
	DeletedAt:        "seller_shops.deleted_at",
	Name:             "seller_shops.name",
	Slug:             "seller_shops.slug",
	ContactNumber:    "seller_shops.contact_number",
	Banner:           "seller_shops.banner",
	ShopCategoryID:   "seller_shops.shop_category_id",
	BusinessLocation: "seller_shops.business_location",
	TaxID:            "seller_shops.tax_id",
	Active:           "seller_shops.active",
	UserID:           "seller_shops.user_id",
	AdminID:          "seller_shops.admin_id",
}

// Generated where

var SellerShopWhere = struct {
	ID               whereHelperint64
	CreatedAt        whereHelpernull_Time
	UpdatedAt        whereHelpernull_Time
	DeletedAt        whereHelpernull_Time
	Name             whereHelpernull_String
	Slug             whereHelpernull_String
	ContactNumber    whereHelpernull_String
	Banner           whereHelpernull_String
	ShopCategoryID   whereHelpernull_Int64
	BusinessLocation whereHelpernull_String
	TaxID            whereHelpernull_String
	Active           whereHelpernull_Bool
	UserID           whereHelpernull_Int64
	AdminID          whereHelpernull_Int64
}{
	ID:               whereHelperint64{field: "\"seller_shops\".\"id\""},
	CreatedAt:        whereHelpernull_Time{field: "\"seller_shops\".\"created_at\""},
	UpdatedAt:        whereHelpernull_Time{field: "\"seller_shops\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"seller_shops\".\"deleted_at\""},
	Name:             whereHelpernull_String{field: "\"seller_shops\".\"name\""},
	Slug:             whereHelpernull_String{field: "\"seller_shops\".\"slug\""},
	ContactNumber:    whereHelpernull_String{field: "\"seller_shops\".\"contact_number\""},
	Banner:           whereHelpernull_String{field: "\"seller_shops\".\"banner\""},
	ShopCategoryID:   whereHelpernull_Int64{field: "\"seller_shops\".\"shop_category_id\""},
	BusinessLocation: whereHelpernull_String{field: "\"seller_shops\".\"business_location\""},
	TaxID:            whereHelpernull_String{field: "\"seller_shops\".\"tax_id\""},
	Active:           whereHelpernull_Bool{field: "\"seller_shops\".\"active\""},
	UserID:           whereHelpernull_Int64{field: "\"seller_shops\".\"user_id\""},
	AdminID:          whereHelpernull_Int64{field: "\"seller_shops\".\"admin_id\""},
}

// SellerShopRels is where relationship names are stored.
var SellerShopRels = struct {
	ShopCategory       string
	Admin              string
	User               string
	SellerProducts     string
	SellerShopProducts string
}{
	ShopCategory:       "ShopCategory",
	Admin:              "Admin",
	User:               "User",
	SellerProducts:     "SellerProducts",
	SellerShopProducts: "SellerShopProducts",
}

// sellerShopR is where relationships are stored.
type sellerShopR struct {
	ShopCategory       *ShopCategory          `boil:"ShopCategory" json:"ShopCategory" toml:"ShopCategory" yaml:"ShopCategory"`
	Admin              *User                  `boil:"Admin" json:"Admin" toml:"Admin" yaml:"Admin"`
	User               *User                  `boil:"User" json:"User" toml:"User" yaml:"User"`
	SellerProducts     SellerProductSlice     `boil:"SellerProducts" json:"SellerProducts" toml:"SellerProducts" yaml:"SellerProducts"`
	SellerShopProducts SellerShopProductSlice `boil:"SellerShopProducts" json:"SellerShopProducts" toml:"SellerShopProducts" yaml:"SellerShopProducts"`
}

// NewStruct creates a new relationship struct
func (*sellerShopR) NewStruct() *sellerShopR {
	return &sellerShopR{}
}

// sellerShopL is where Load methods for each relationship are stored.
type sellerShopL struct{}

var (
	sellerShopAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name", "slug", "contact_number", "banner", "shop_category_id", "business_location", "tax_id", "active", "user_id", "admin_id"}
	sellerShopColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "name", "slug", "contact_number", "banner", "shop_category_id", "business_location", "tax_id", "user_id", "admin_id"}
	sellerShopColumnsWithDefault    = []string{"id", "active"}
	sellerShopPrimaryKeyColumns     = []string{"id"}
)

type (
	// SellerShopSlice is an alias for a slice of pointers to SellerShop.
	// This should almost always be used instead of []SellerShop.
	SellerShopSlice []*SellerShop
	// SellerShopHook is the signature for custom SellerShop hook methods
	SellerShopHook func(context.Context, boil.ContextExecutor, *SellerShop) error

	sellerShopQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sellerShopType                 = reflect.TypeOf(&SellerShop{})
	sellerShopMapping              = queries.MakeStructMapping(sellerShopType)
	sellerShopPrimaryKeyMapping, _ = queries.BindMapping(sellerShopType, sellerShopMapping, sellerShopPrimaryKeyColumns)
	sellerShopInsertCacheMut       sync.RWMutex
	sellerShopInsertCache          = make(map[string]insertCache)
	sellerShopUpdateCacheMut       sync.RWMutex
	sellerShopUpdateCache          = make(map[string]updateCache)
	sellerShopUpsertCacheMut       sync.RWMutex
	sellerShopUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sellerShopBeforeInsertHooks []SellerShopHook
var sellerShopBeforeUpdateHooks []SellerShopHook
var sellerShopBeforeDeleteHooks []SellerShopHook
var sellerShopBeforeUpsertHooks []SellerShopHook

var sellerShopAfterInsertHooks []SellerShopHook
var sellerShopAfterSelectHooks []SellerShopHook
var sellerShopAfterUpdateHooks []SellerShopHook
var sellerShopAfterDeleteHooks []SellerShopHook
var sellerShopAfterUpsertHooks []SellerShopHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SellerShop) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerShopBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SellerShop) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerShopBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SellerShop) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerShopBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SellerShop) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerShopBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SellerShop) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerShopAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SellerShop) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerShopAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SellerShop) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerShopAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SellerShop) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerShopAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SellerShop) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerShopAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSellerShopHook registers your hook function for all future operations.
func AddSellerShopHook(hookPoint boil.HookPoint, sellerShopHook SellerShopHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sellerShopBeforeInsertHooks = append(sellerShopBeforeInsertHooks, sellerShopHook)
	case boil.BeforeUpdateHook:
		sellerShopBeforeUpdateHooks = append(sellerShopBeforeUpdateHooks, sellerShopHook)
	case boil.BeforeDeleteHook:
		sellerShopBeforeDeleteHooks = append(sellerShopBeforeDeleteHooks, sellerShopHook)
	case boil.BeforeUpsertHook:
		sellerShopBeforeUpsertHooks = append(sellerShopBeforeUpsertHooks, sellerShopHook)
	case boil.AfterInsertHook:
		sellerShopAfterInsertHooks = append(sellerShopAfterInsertHooks, sellerShopHook)
	case boil.AfterSelectHook:
		sellerShopAfterSelectHooks = append(sellerShopAfterSelectHooks, sellerShopHook)
	case boil.AfterUpdateHook:
		sellerShopAfterUpdateHooks = append(sellerShopAfterUpdateHooks, sellerShopHook)
	case boil.AfterDeleteHook:
		sellerShopAfterDeleteHooks = append(sellerShopAfterDeleteHooks, sellerShopHook)
	case boil.AfterUpsertHook:
		sellerShopAfterUpsertHooks = append(sellerShopAfterUpsertHooks, sellerShopHook)
	}
}

// One returns a single sellerShop record from the query.
func (q sellerShopQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SellerShop, error) {
	o := &SellerShop{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for seller_shops")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SellerShop records from the query.
func (q sellerShopQuery) All(ctx context.Context, exec boil.ContextExecutor) (SellerShopSlice, error) {
	var o []*SellerShop

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SellerShop slice")
	}

	if len(sellerShopAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SellerShop records in the query.
func (q sellerShopQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count seller_shops rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sellerShopQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if seller_shops exists")
	}

	return count > 0, nil
}

// ShopCategory pointed to by the foreign key.
func (o *SellerShop) ShopCategory(mods ...qm.QueryMod) shopCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ShopCategoryID),
	}

	queryMods = append(queryMods, mods...)

	query := ShopCategories(queryMods...)
	queries.SetFrom(query.Query, "\"shop_categories\"")

	return query
}

// Admin pointed to by the foreign key.
func (o *SellerShop) Admin(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AdminID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// User pointed to by the foreign key.
func (o *SellerShop) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// SellerProducts retrieves all the seller_product's SellerProducts with an executor.
func (o *SellerShop) SellerProducts(mods ...qm.QueryMod) sellerProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"seller_products\".\"seller_shop_id\"=?", o.ID),
	)

	query := SellerProducts(queryMods...)
	queries.SetFrom(query.Query, "\"seller_products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"seller_products\".*"})
	}

	return query
}

// SellerShopProducts retrieves all the seller_shop_product's SellerShopProducts with an executor.
func (o *SellerShop) SellerShopProducts(mods ...qm.QueryMod) sellerShopProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"seller_shop_products\".\"seller_shop_id\"=?", o.ID),
	)

	query := SellerShopProducts(queryMods...)
	queries.SetFrom(query.Query, "\"seller_shop_products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"seller_shop_products\".*"})
	}

	return query
}

// LoadShopCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sellerShopL) LoadShopCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerShop interface{}, mods queries.Applicator) error {
	var slice []*SellerShop
	var object *SellerShop

	if singular {
		object = maybeSellerShop.(*SellerShop)
	} else {
		slice = *maybeSellerShop.(*[]*SellerShop)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerShopR{}
		}
		if !queries.IsNil(object.ShopCategoryID) {
			args = append(args, object.ShopCategoryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerShopR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ShopCategoryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ShopCategoryID) {
				args = append(args, obj.ShopCategoryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`shop_categories`),
		qm.WhereIn(`shop_categories.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ShopCategory")
	}

	var resultSlice []*ShopCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ShopCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for shop_categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for shop_categories")
	}

	if len(sellerShopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ShopCategory = foreign
		if foreign.R == nil {
			foreign.R = &shopCategoryR{}
		}
		foreign.R.SellerShops = append(foreign.R.SellerShops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ShopCategoryID, foreign.ID) {
				local.R.ShopCategory = foreign
				if foreign.R == nil {
					foreign.R = &shopCategoryR{}
				}
				foreign.R.SellerShops = append(foreign.R.SellerShops, local)
				break
			}
		}
	}

	return nil
}

// LoadAdmin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sellerShopL) LoadAdmin(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerShop interface{}, mods queries.Applicator) error {
	var slice []*SellerShop
	var object *SellerShop

	if singular {
		object = maybeSellerShop.(*SellerShop)
	} else {
		slice = *maybeSellerShop.(*[]*SellerShop)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerShopR{}
		}
		if !queries.IsNil(object.AdminID) {
			args = append(args, object.AdminID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerShopR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AdminID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AdminID) {
				args = append(args, obj.AdminID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(sellerShopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Admin = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.AdminSellerShops = append(foreign.R.AdminSellerShops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AdminID, foreign.ID) {
				local.R.Admin = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.AdminSellerShops = append(foreign.R.AdminSellerShops, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sellerShopL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerShop interface{}, mods queries.Applicator) error {
	var slice []*SellerShop
	var object *SellerShop

	if singular {
		object = maybeSellerShop.(*SellerShop)
	} else {
		slice = *maybeSellerShop.(*[]*SellerShop)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerShopR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerShopR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(sellerShopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SellerShops = append(foreign.R.SellerShops, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SellerShops = append(foreign.R.SellerShops, local)
				break
			}
		}
	}

	return nil
}

// LoadSellerProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sellerShopL) LoadSellerProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerShop interface{}, mods queries.Applicator) error {
	var slice []*SellerShop
	var object *SellerShop

	if singular {
		object = maybeSellerShop.(*SellerShop)
	} else {
		slice = *maybeSellerShop.(*[]*SellerShop)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerShopR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerShopR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_products`),
		qm.WhereIn(`seller_products.seller_shop_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seller_products")
	}

	var resultSlice []*SellerProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seller_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seller_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_products")
	}

	if len(sellerProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SellerProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sellerProductR{}
			}
			foreign.R.SellerShop = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerShopID) {
				local.R.SellerProducts = append(local.R.SellerProducts, foreign)
				if foreign.R == nil {
					foreign.R = &sellerProductR{}
				}
				foreign.R.SellerShop = local
				break
			}
		}
	}

	return nil
}

// LoadSellerShopProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sellerShopL) LoadSellerShopProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerShop interface{}, mods queries.Applicator) error {
	var slice []*SellerShop
	var object *SellerShop

	if singular {
		object = maybeSellerShop.(*SellerShop)
	} else {
		slice = *maybeSellerShop.(*[]*SellerShop)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerShopR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerShopR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_shop_products`),
		qm.WhereIn(`seller_shop_products.seller_shop_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seller_shop_products")
	}

	var resultSlice []*SellerShopProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seller_shop_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seller_shop_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_shop_products")
	}

	if len(sellerShopProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SellerShopProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sellerShopProductR{}
			}
			foreign.R.SellerShop = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerShopID) {
				local.R.SellerShopProducts = append(local.R.SellerShopProducts, foreign)
				if foreign.R == nil {
					foreign.R = &sellerShopProductR{}
				}
				foreign.R.SellerShop = local
				break
			}
		}
	}

	return nil
}

// SetShopCategory of the sellerShop to the related item.
// Sets o.R.ShopCategory to related.
// Adds o to related.R.SellerShops.
func (o *SellerShop) SetShopCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ShopCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"seller_shops\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"shop_category_id"}),
		strmangle.WhereClause("\"", "\"", 2, sellerShopPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ShopCategoryID, related.ID)
	if o.R == nil {
		o.R = &sellerShopR{
			ShopCategory: related,
		}
	} else {
		o.R.ShopCategory = related
	}

	if related.R == nil {
		related.R = &shopCategoryR{
			SellerShops: SellerShopSlice{o},
		}
	} else {
		related.R.SellerShops = append(related.R.SellerShops, o)
	}

	return nil
}

// RemoveShopCategory relationship.
// Sets o.R.ShopCategory to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SellerShop) RemoveShopCategory(ctx context.Context, exec boil.ContextExecutor, related *ShopCategory) error {
	var err error

	queries.SetScanner(&o.ShopCategoryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("shop_category_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ShopCategory = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SellerShops {
		if queries.Equal(o.ShopCategoryID, ri.ShopCategoryID) {
			continue
		}

		ln := len(related.R.SellerShops)
		if ln > 1 && i < ln-1 {
			related.R.SellerShops[i] = related.R.SellerShops[ln-1]
		}
		related.R.SellerShops = related.R.SellerShops[:ln-1]
		break
	}
	return nil
}

// SetAdmin of the sellerShop to the related item.
// Sets o.R.Admin to related.
// Adds o to related.R.AdminSellerShops.
func (o *SellerShop) SetAdmin(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"seller_shops\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"admin_id"}),
		strmangle.WhereClause("\"", "\"", 2, sellerShopPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AdminID, related.ID)
	if o.R == nil {
		o.R = &sellerShopR{
			Admin: related,
		}
	} else {
		o.R.Admin = related
	}

	if related.R == nil {
		related.R = &userR{
			AdminSellerShops: SellerShopSlice{o},
		}
	} else {
		related.R.AdminSellerShops = append(related.R.AdminSellerShops, o)
	}

	return nil
}

// RemoveAdmin relationship.
// Sets o.R.Admin to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SellerShop) RemoveAdmin(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.AdminID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("admin_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Admin = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AdminSellerShops {
		if queries.Equal(o.AdminID, ri.AdminID) {
			continue
		}

		ln := len(related.R.AdminSellerShops)
		if ln > 1 && i < ln-1 {
			related.R.AdminSellerShops[i] = related.R.AdminSellerShops[ln-1]
		}
		related.R.AdminSellerShops = related.R.AdminSellerShops[:ln-1]
		break
	}
	return nil
}

// SetUser of the sellerShop to the related item.
// Sets o.R.User to related.
// Adds o to related.R.SellerShops.
func (o *SellerShop) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"seller_shops\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, sellerShopPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &sellerShopR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			SellerShops: SellerShopSlice{o},
		}
	} else {
		related.R.SellerShops = append(related.R.SellerShops, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *SellerShop) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SellerShops {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.SellerShops)
		if ln > 1 && i < ln-1 {
			related.R.SellerShops[i] = related.R.SellerShops[ln-1]
		}
		related.R.SellerShops = related.R.SellerShops[:ln-1]
		break
	}
	return nil
}

// AddSellerProducts adds the given related objects to the existing relationships
// of the seller_shop, optionally inserting them as new records.
// Appends related to o.R.SellerProducts.
// Sets related.R.SellerShop appropriately.
func (o *SellerShop) AddSellerProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerShopID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"seller_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_shop_id"}),
				strmangle.WhereClause("\"", "\"", 2, sellerProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerShopID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sellerShopR{
			SellerProducts: related,
		}
	} else {
		o.R.SellerProducts = append(o.R.SellerProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sellerProductR{
				SellerShop: o,
			}
		} else {
			rel.R.SellerShop = o
		}
	}
	return nil
}

// SetSellerProducts removes all previously related items of the
// seller_shop replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerShop's SellerProducts accordingly.
// Replaces o.R.SellerProducts with related.
// Sets related.R.SellerShop's SellerProducts accordingly.
func (o *SellerShop) SetSellerProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerProduct) error {
	query := "update \"seller_products\" set \"seller_shop_id\" = null where \"seller_shop_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SellerProducts {
			queries.SetScanner(&rel.SellerShopID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerShop = nil
		}

		o.R.SellerProducts = nil
	}
	return o.AddSellerProducts(ctx, exec, insert, related...)
}

// RemoveSellerProducts relationships from objects passed in.
// Removes related items from R.SellerProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerShop.
func (o *SellerShop) RemoveSellerProducts(ctx context.Context, exec boil.ContextExecutor, related ...*SellerProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerShopID, nil)
		if rel.R != nil {
			rel.R.SellerShop = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_shop_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SellerProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.SellerProducts)
			if ln > 1 && i < ln-1 {
				o.R.SellerProducts[i] = o.R.SellerProducts[ln-1]
			}
			o.R.SellerProducts = o.R.SellerProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddSellerShopProducts adds the given related objects to the existing relationships
// of the seller_shop, optionally inserting them as new records.
// Appends related to o.R.SellerShopProducts.
// Sets related.R.SellerShop appropriately.
func (o *SellerShop) AddSellerShopProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerShopProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerShopID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"seller_shop_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_shop_id"}),
				strmangle.WhereClause("\"", "\"", 2, sellerShopProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerShopID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sellerShopR{
			SellerShopProducts: related,
		}
	} else {
		o.R.SellerShopProducts = append(o.R.SellerShopProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sellerShopProductR{
				SellerShop: o,
			}
		} else {
			rel.R.SellerShop = o
		}
	}
	return nil
}

// SetSellerShopProducts removes all previously related items of the
// seller_shop replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerShop's SellerShopProducts accordingly.
// Replaces o.R.SellerShopProducts with related.
// Sets related.R.SellerShop's SellerShopProducts accordingly.
func (o *SellerShop) SetSellerShopProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerShopProduct) error {
	query := "update \"seller_shop_products\" set \"seller_shop_id\" = null where \"seller_shop_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SellerShopProducts {
			queries.SetScanner(&rel.SellerShopID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerShop = nil
		}

		o.R.SellerShopProducts = nil
	}
	return o.AddSellerShopProducts(ctx, exec, insert, related...)
}

// RemoveSellerShopProducts relationships from objects passed in.
// Removes related items from R.SellerShopProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerShop.
func (o *SellerShop) RemoveSellerShopProducts(ctx context.Context, exec boil.ContextExecutor, related ...*SellerShopProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerShopID, nil)
		if rel.R != nil {
			rel.R.SellerShop = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_shop_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SellerShopProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.SellerShopProducts)
			if ln > 1 && i < ln-1 {
				o.R.SellerShopProducts[i] = o.R.SellerShopProducts[ln-1]
			}
			o.R.SellerShopProducts = o.R.SellerShopProducts[:ln-1]
			break
		}
	}

	return nil
}

// SellerShops retrieves all the records using an executor.
func SellerShops(mods ...qm.QueryMod) sellerShopQuery {
	mods = append(mods, qm.From("\"seller_shops\""))
	return sellerShopQuery{NewQuery(mods...)}
}

// FindSellerShop retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSellerShop(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SellerShop, error) {
	sellerShopObj := &SellerShop{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"seller_shops\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sellerShopObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from seller_shops")
	}

	if err = sellerShopObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sellerShopObj, err
	}

	return sellerShopObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SellerShop) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seller_shops provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sellerShopColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sellerShopInsertCacheMut.RLock()
	cache, cached := sellerShopInsertCache[key]
	sellerShopInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sellerShopAllColumns,
			sellerShopColumnsWithDefault,
			sellerShopColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sellerShopType, sellerShopMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sellerShopType, sellerShopMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"seller_shops\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"seller_shops\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into seller_shops")
	}

	if !cached {
		sellerShopInsertCacheMut.Lock()
		sellerShopInsertCache[key] = cache
		sellerShopInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SellerShop.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SellerShop) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sellerShopUpdateCacheMut.RLock()
	cache, cached := sellerShopUpdateCache[key]
	sellerShopUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sellerShopAllColumns,
			sellerShopPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update seller_shops, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"seller_shops\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sellerShopPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sellerShopType, sellerShopMapping, append(wl, sellerShopPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update seller_shops row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for seller_shops")
	}

	if !cached {
		sellerShopUpdateCacheMut.Lock()
		sellerShopUpdateCache[key] = cache
		sellerShopUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sellerShopQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for seller_shops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for seller_shops")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SellerShopSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerShopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"seller_shops\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sellerShopPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sellerShop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sellerShop")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SellerShop) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seller_shops provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sellerShopColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sellerShopUpsertCacheMut.RLock()
	cache, cached := sellerShopUpsertCache[key]
	sellerShopUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sellerShopAllColumns,
			sellerShopColumnsWithDefault,
			sellerShopColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sellerShopAllColumns,
			sellerShopPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert seller_shops, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sellerShopPrimaryKeyColumns))
			copy(conflict, sellerShopPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"seller_shops\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sellerShopType, sellerShopMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sellerShopType, sellerShopMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert seller_shops")
	}

	if !cached {
		sellerShopUpsertCacheMut.Lock()
		sellerShopUpsertCache[key] = cache
		sellerShopUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SellerShop record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SellerShop) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SellerShop provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sellerShopPrimaryKeyMapping)
	sql := "DELETE FROM \"seller_shops\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from seller_shops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for seller_shops")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sellerShopQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sellerShopQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seller_shops")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seller_shops")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SellerShopSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sellerShopBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerShopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"seller_shops\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sellerShopPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sellerShop slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seller_shops")
	}

	if len(sellerShopAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SellerShop) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSellerShop(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SellerShopSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SellerShopSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerShopPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"seller_shops\".* FROM \"seller_shops\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sellerShopPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SellerShopSlice")
	}

	*o = slice

	return nil
}

// SellerShopExists checks if the SellerShop row exists.
func SellerShopExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"seller_shops\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if seller_shops exists")
	}

	return exists, nil
}
