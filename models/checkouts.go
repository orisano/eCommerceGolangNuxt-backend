// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Checkout is an object representing the database table.
type Checkout struct {
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt      null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt      null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt      null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CartID         null.Int64  `boil:"cart_id" json:"cart_id,omitempty" toml:"cart_id" yaml:"cart_id,omitempty"`
	TotalPrice     null.String `boil:"total_price" json:"total_price,omitempty" toml:"total_price" yaml:"total_price,omitempty"`
	UserLocationID null.Int64  `boil:"user_location_id" json:"user_location_id,omitempty" toml:"user_location_id" yaml:"user_location_id,omitempty"`
	Completed      null.Bool   `boil:"completed" json:"completed,omitempty" toml:"completed" yaml:"completed,omitempty"`
	UserID         null.Int64  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`

	R *checkoutR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L checkoutL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CheckoutColumns = struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	CartID         string
	TotalPrice     string
	UserLocationID string
	Completed      string
	UserID         string
}{
	ID:             "id",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
	DeletedAt:      "deleted_at",
	CartID:         "cart_id",
	TotalPrice:     "total_price",
	UserLocationID: "user_location_id",
	Completed:      "completed",
	UserID:         "user_id",
}

var CheckoutTableColumns = struct {
	ID             string
	CreatedAt      string
	UpdatedAt      string
	DeletedAt      string
	CartID         string
	TotalPrice     string
	UserLocationID string
	Completed      string
	UserID         string
}{
	ID:             "checkouts.id",
	CreatedAt:      "checkouts.created_at",
	UpdatedAt:      "checkouts.updated_at",
	DeletedAt:      "checkouts.deleted_at",
	CartID:         "checkouts.cart_id",
	TotalPrice:     "checkouts.total_price",
	UserLocationID: "checkouts.user_location_id",
	Completed:      "checkouts.completed",
	UserID:         "checkouts.user_id",
}

// Generated where

var CheckoutWhere = struct {
	ID             whereHelperint64
	CreatedAt      whereHelpernull_Time
	UpdatedAt      whereHelpernull_Time
	DeletedAt      whereHelpernull_Time
	CartID         whereHelpernull_Int64
	TotalPrice     whereHelpernull_String
	UserLocationID whereHelpernull_Int64
	Completed      whereHelpernull_Bool
	UserID         whereHelpernull_Int64
}{
	ID:             whereHelperint64{field: "\"checkouts\".\"id\""},
	CreatedAt:      whereHelpernull_Time{field: "\"checkouts\".\"created_at\""},
	UpdatedAt:      whereHelpernull_Time{field: "\"checkouts\".\"updated_at\""},
	DeletedAt:      whereHelpernull_Time{field: "\"checkouts\".\"deleted_at\""},
	CartID:         whereHelpernull_Int64{field: "\"checkouts\".\"cart_id\""},
	TotalPrice:     whereHelpernull_String{field: "\"checkouts\".\"total_price\""},
	UserLocationID: whereHelpernull_Int64{field: "\"checkouts\".\"user_location_id\""},
	Completed:      whereHelpernull_Bool{field: "\"checkouts\".\"completed\""},
	UserID:         whereHelpernull_Int64{field: "\"checkouts\".\"user_id\""},
}

// CheckoutRels is where relationship names are stored.
var CheckoutRels = struct {
	Cart             string
	UserLocation     string
	User             string
	CheckoutProducts string
}{
	Cart:             "Cart",
	UserLocation:     "UserLocation",
	User:             "User",
	CheckoutProducts: "CheckoutProducts",
}

// checkoutR is where relationships are stored.
type checkoutR struct {
	Cart             *Cart                `boil:"Cart" json:"Cart" toml:"Cart" yaml:"Cart"`
	UserLocation     *UserLocation        `boil:"UserLocation" json:"UserLocation" toml:"UserLocation" yaml:"UserLocation"`
	User             *User                `boil:"User" json:"User" toml:"User" yaml:"User"`
	CheckoutProducts CheckoutProductSlice `boil:"CheckoutProducts" json:"CheckoutProducts" toml:"CheckoutProducts" yaml:"CheckoutProducts"`
}

// NewStruct creates a new relationship struct
func (*checkoutR) NewStruct() *checkoutR {
	return &checkoutR{}
}

// checkoutL is where Load methods for each relationship are stored.
type checkoutL struct{}

var (
	checkoutAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "cart_id", "total_price", "user_location_id", "completed", "user_id"}
	checkoutColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "cart_id", "total_price", "user_location_id", "user_id"}
	checkoutColumnsWithDefault    = []string{"id", "completed"}
	checkoutPrimaryKeyColumns     = []string{"id"}
)

type (
	// CheckoutSlice is an alias for a slice of pointers to Checkout.
	// This should almost always be used instead of []Checkout.
	CheckoutSlice []*Checkout
	// CheckoutHook is the signature for custom Checkout hook methods
	CheckoutHook func(context.Context, boil.ContextExecutor, *Checkout) error

	checkoutQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	checkoutType                 = reflect.TypeOf(&Checkout{})
	checkoutMapping              = queries.MakeStructMapping(checkoutType)
	checkoutPrimaryKeyMapping, _ = queries.BindMapping(checkoutType, checkoutMapping, checkoutPrimaryKeyColumns)
	checkoutInsertCacheMut       sync.RWMutex
	checkoutInsertCache          = make(map[string]insertCache)
	checkoutUpdateCacheMut       sync.RWMutex
	checkoutUpdateCache          = make(map[string]updateCache)
	checkoutUpsertCacheMut       sync.RWMutex
	checkoutUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var checkoutBeforeInsertHooks []CheckoutHook
var checkoutBeforeUpdateHooks []CheckoutHook
var checkoutBeforeDeleteHooks []CheckoutHook
var checkoutBeforeUpsertHooks []CheckoutHook

var checkoutAfterInsertHooks []CheckoutHook
var checkoutAfterSelectHooks []CheckoutHook
var checkoutAfterUpdateHooks []CheckoutHook
var checkoutAfterDeleteHooks []CheckoutHook
var checkoutAfterUpsertHooks []CheckoutHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Checkout) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Checkout) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Checkout) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Checkout) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Checkout) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Checkout) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Checkout) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Checkout) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Checkout) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCheckoutHook registers your hook function for all future operations.
func AddCheckoutHook(hookPoint boil.HookPoint, checkoutHook CheckoutHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		checkoutBeforeInsertHooks = append(checkoutBeforeInsertHooks, checkoutHook)
	case boil.BeforeUpdateHook:
		checkoutBeforeUpdateHooks = append(checkoutBeforeUpdateHooks, checkoutHook)
	case boil.BeforeDeleteHook:
		checkoutBeforeDeleteHooks = append(checkoutBeforeDeleteHooks, checkoutHook)
	case boil.BeforeUpsertHook:
		checkoutBeforeUpsertHooks = append(checkoutBeforeUpsertHooks, checkoutHook)
	case boil.AfterInsertHook:
		checkoutAfterInsertHooks = append(checkoutAfterInsertHooks, checkoutHook)
	case boil.AfterSelectHook:
		checkoutAfterSelectHooks = append(checkoutAfterSelectHooks, checkoutHook)
	case boil.AfterUpdateHook:
		checkoutAfterUpdateHooks = append(checkoutAfterUpdateHooks, checkoutHook)
	case boil.AfterDeleteHook:
		checkoutAfterDeleteHooks = append(checkoutAfterDeleteHooks, checkoutHook)
	case boil.AfterUpsertHook:
		checkoutAfterUpsertHooks = append(checkoutAfterUpsertHooks, checkoutHook)
	}
}

// One returns a single checkout record from the query.
func (q checkoutQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Checkout, error) {
	o := &Checkout{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for checkouts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Checkout records from the query.
func (q checkoutQuery) All(ctx context.Context, exec boil.ContextExecutor) (CheckoutSlice, error) {
	var o []*Checkout

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Checkout slice")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Checkout records in the query.
func (q checkoutQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count checkouts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q checkoutQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if checkouts exists")
	}

	return count > 0, nil
}

// Cart pointed to by the foreign key.
func (o *Checkout) Cart(mods ...qm.QueryMod) cartQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CartID),
	}

	queryMods = append(queryMods, mods...)

	query := Carts(queryMods...)
	queries.SetFrom(query.Query, "\"carts\"")

	return query
}

// UserLocation pointed to by the foreign key.
func (o *Checkout) UserLocation(mods ...qm.QueryMod) userLocationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserLocationID),
	}

	queryMods = append(queryMods, mods...)

	query := UserLocations(queryMods...)
	queries.SetFrom(query.Query, "\"user_locations\"")

	return query
}

// User pointed to by the foreign key.
func (o *Checkout) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// CheckoutProducts retrieves all the checkout_product's CheckoutProducts with an executor.
func (o *Checkout) CheckoutProducts(mods ...qm.QueryMod) checkoutProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkout_products\".\"checkout_id\"=?", o.ID),
	)

	query := CheckoutProducts(queryMods...)
	queries.SetFrom(query.Query, "\"checkout_products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"checkout_products\".*"})
	}

	return query
}

// LoadCart allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadCart(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		object = maybeCheckout.(*Checkout)
	} else {
		slice = *maybeCheckout.(*[]*Checkout)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.CartID) {
			args = append(args, object.CartID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CartID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CartID) {
				args = append(args, obj.CartID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`carts`),
		qm.WhereIn(`carts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Cart")
	}

	var resultSlice []*Cart
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Cart")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for carts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for carts")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Cart = foreign
		if foreign.R == nil {
			foreign.R = &cartR{}
		}
		foreign.R.Checkouts = append(foreign.R.Checkouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CartID, foreign.ID) {
				local.R.Cart = foreign
				if foreign.R == nil {
					foreign.R = &cartR{}
				}
				foreign.R.Checkouts = append(foreign.R.Checkouts, local)
				break
			}
		}
	}

	return nil
}

// LoadUserLocation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadUserLocation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		object = maybeCheckout.(*Checkout)
	} else {
		slice = *maybeCheckout.(*[]*Checkout)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.UserLocationID) {
			args = append(args, object.UserLocationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserLocationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserLocationID) {
				args = append(args, obj.UserLocationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_locations`),
		qm.WhereIn(`user_locations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserLocation")
	}

	var resultSlice []*UserLocation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserLocation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_locations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_locations")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserLocation = foreign
		if foreign.R == nil {
			foreign.R = &userLocationR{}
		}
		foreign.R.Checkouts = append(foreign.R.Checkouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserLocationID, foreign.ID) {
				local.R.UserLocation = foreign
				if foreign.R == nil {
					foreign.R = &userLocationR{}
				}
				foreign.R.Checkouts = append(foreign.R.Checkouts, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		object = maybeCheckout.(*Checkout)
	} else {
		slice = *maybeCheckout.(*[]*Checkout)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Checkouts = append(foreign.R.Checkouts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Checkouts = append(foreign.R.Checkouts, local)
				break
			}
		}
	}

	return nil
}

// LoadCheckoutProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (checkoutL) LoadCheckoutProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckout interface{}, mods queries.Applicator) error {
	var slice []*Checkout
	var object *Checkout

	if singular {
		object = maybeCheckout.(*Checkout)
	} else {
		slice = *maybeCheckout.(*[]*Checkout)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkout_products`),
		qm.WhereIn(`checkout_products.checkout_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkout_products")
	}

	var resultSlice []*CheckoutProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkout_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkout_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkout_products")
	}

	if len(checkoutProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CheckoutProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutProductR{}
			}
			foreign.R.Checkout = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CheckoutID) {
				local.R.CheckoutProducts = append(local.R.CheckoutProducts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutProductR{}
				}
				foreign.R.Checkout = local
				break
			}
		}
	}

	return nil
}

// SetCart of the checkout to the related item.
// Sets o.R.Cart to related.
// Adds o to related.R.Checkouts.
func (o *Checkout) SetCart(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Cart) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"cart_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CartID, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			Cart: related,
		}
	} else {
		o.R.Cart = related
	}

	if related.R == nil {
		related.R = &cartR{
			Checkouts: CheckoutSlice{o},
		}
	} else {
		related.R.Checkouts = append(related.R.Checkouts, o)
	}

	return nil
}

// RemoveCart relationship.
// Sets o.R.Cart to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Checkout) RemoveCart(ctx context.Context, exec boil.ContextExecutor, related *Cart) error {
	var err error

	queries.SetScanner(&o.CartID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("cart_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Cart = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Checkouts {
		if queries.Equal(o.CartID, ri.CartID) {
			continue
		}

		ln := len(related.R.Checkouts)
		if ln > 1 && i < ln-1 {
			related.R.Checkouts[i] = related.R.Checkouts[ln-1]
		}
		related.R.Checkouts = related.R.Checkouts[:ln-1]
		break
	}
	return nil
}

// SetUserLocation of the checkout to the related item.
// Sets o.R.UserLocation to related.
// Adds o to related.R.Checkouts.
func (o *Checkout) SetUserLocation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserLocation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_location_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserLocationID, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			UserLocation: related,
		}
	} else {
		o.R.UserLocation = related
	}

	if related.R == nil {
		related.R = &userLocationR{
			Checkouts: CheckoutSlice{o},
		}
	} else {
		related.R.Checkouts = append(related.R.Checkouts, o)
	}

	return nil
}

// RemoveUserLocation relationship.
// Sets o.R.UserLocation to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Checkout) RemoveUserLocation(ctx context.Context, exec boil.ContextExecutor, related *UserLocation) error {
	var err error

	queries.SetScanner(&o.UserLocationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_location_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UserLocation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Checkouts {
		if queries.Equal(o.UserLocationID, ri.UserLocationID) {
			continue
		}

		ln := len(related.R.Checkouts)
		if ln > 1 && i < ln-1 {
			related.R.Checkouts[i] = related.R.Checkouts[ln-1]
		}
		related.R.Checkouts = related.R.Checkouts[:ln-1]
		break
	}
	return nil
}

// SetUser of the checkout to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Checkouts.
func (o *Checkout) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &checkoutR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Checkouts: CheckoutSlice{o},
		}
	} else {
		related.R.Checkouts = append(related.R.Checkouts, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Checkout) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Checkouts {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.Checkouts)
		if ln > 1 && i < ln-1 {
			related.R.Checkouts[i] = related.R.Checkouts[ln-1]
		}
		related.R.Checkouts = related.R.Checkouts[:ln-1]
		break
	}
	return nil
}

// AddCheckoutProducts adds the given related objects to the existing relationships
// of the checkout, optionally inserting them as new records.
// Appends related to o.R.CheckoutProducts.
// Sets related.R.Checkout appropriately.
func (o *Checkout) AddCheckoutProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CheckoutProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CheckoutID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkout_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"checkout_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CheckoutID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &checkoutR{
			CheckoutProducts: related,
		}
	} else {
		o.R.CheckoutProducts = append(o.R.CheckoutProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutProductR{
				Checkout: o,
			}
		} else {
			rel.R.Checkout = o
		}
	}
	return nil
}

// SetCheckoutProducts removes all previously related items of the
// checkout replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Checkout's CheckoutProducts accordingly.
// Replaces o.R.CheckoutProducts with related.
// Sets related.R.Checkout's CheckoutProducts accordingly.
func (o *Checkout) SetCheckoutProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CheckoutProduct) error {
	query := "update \"checkout_products\" set \"checkout_id\" = null where \"checkout_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CheckoutProducts {
			queries.SetScanner(&rel.CheckoutID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Checkout = nil
		}

		o.R.CheckoutProducts = nil
	}
	return o.AddCheckoutProducts(ctx, exec, insert, related...)
}

// RemoveCheckoutProducts relationships from objects passed in.
// Removes related items from R.CheckoutProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.Checkout.
func (o *Checkout) RemoveCheckoutProducts(ctx context.Context, exec boil.ContextExecutor, related ...*CheckoutProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CheckoutID, nil)
		if rel.R != nil {
			rel.R.Checkout = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("checkout_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CheckoutProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.CheckoutProducts)
			if ln > 1 && i < ln-1 {
				o.R.CheckoutProducts[i] = o.R.CheckoutProducts[ln-1]
			}
			o.R.CheckoutProducts = o.R.CheckoutProducts[:ln-1]
			break
		}
	}

	return nil
}

// Checkouts retrieves all the records using an executor.
func Checkouts(mods ...qm.QueryMod) checkoutQuery {
	mods = append(mods, qm.From("\"checkouts\""))
	return checkoutQuery{NewQuery(mods...)}
}

// FindCheckout retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCheckout(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Checkout, error) {
	checkoutObj := &Checkout{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"checkouts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, checkoutObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from checkouts")
	}

	if err = checkoutObj.doAfterSelectHooks(ctx, exec); err != nil {
		return checkoutObj, err
	}

	return checkoutObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Checkout) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checkouts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkoutColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	checkoutInsertCacheMut.RLock()
	cache, cached := checkoutInsertCache[key]
	checkoutInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			checkoutAllColumns,
			checkoutColumnsWithDefault,
			checkoutColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(checkoutType, checkoutMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"checkouts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"checkouts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into checkouts")
	}

	if !cached {
		checkoutInsertCacheMut.Lock()
		checkoutInsertCache[key] = cache
		checkoutInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Checkout.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Checkout) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	checkoutUpdateCacheMut.RLock()
	cache, cached := checkoutUpdateCache[key]
	checkoutUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			checkoutAllColumns,
			checkoutPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update checkouts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"checkouts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, checkoutPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, append(wl, checkoutPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update checkouts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for checkouts")
	}

	if !cached {
		checkoutUpdateCacheMut.Lock()
		checkoutUpdateCache[key] = cache
		checkoutUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q checkoutQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for checkouts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CheckoutSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"checkouts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, checkoutPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in checkout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all checkout")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Checkout) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checkouts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkoutColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	checkoutUpsertCacheMut.RLock()
	cache, cached := checkoutUpsertCache[key]
	checkoutUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			checkoutAllColumns,
			checkoutColumnsWithDefault,
			checkoutColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			checkoutAllColumns,
			checkoutPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert checkouts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(checkoutPrimaryKeyColumns))
			copy(conflict, checkoutPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"checkouts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(checkoutType, checkoutMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(checkoutType, checkoutMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert checkouts")
	}

	if !cached {
		checkoutUpsertCacheMut.Lock()
		checkoutUpsertCache[key] = cache
		checkoutUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Checkout record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Checkout) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Checkout provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), checkoutPrimaryKeyMapping)
	sql := "DELETE FROM \"checkouts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for checkouts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q checkoutQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no checkoutQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkouts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkouts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CheckoutSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(checkoutBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"checkouts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkout slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkouts")
	}

	if len(checkoutAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Checkout) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCheckout(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CheckoutSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CheckoutSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"checkouts\".* FROM \"checkouts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CheckoutSlice")
	}

	*o = slice

	return nil
}

// CheckoutExists checks if the Checkout row exists.
func CheckoutExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"checkouts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if checkouts exists")
	}

	return exists, nil
}
