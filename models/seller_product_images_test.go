// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSellerProductImages(t *testing.T) {
	t.Parallel()

	query := SellerProductImages()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSellerProductImagesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductImagesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SellerProductImages().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductImagesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerProductImageSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductImagesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SellerProductImageExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SellerProductImage exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SellerProductImageExists to return true, but got false.")
	}
}

func testSellerProductImagesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sellerProductImageFound, err := FindSellerProductImage(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sellerProductImageFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSellerProductImagesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SellerProductImages().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSellerProductImagesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SellerProductImages().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSellerProductImagesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sellerProductImageOne := &SellerProductImage{}
	sellerProductImageTwo := &SellerProductImage{}
	if err = randomize.Struct(seed, sellerProductImageOne, sellerProductImageDBTypes, false, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerProductImageTwo, sellerProductImageDBTypes, false, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerProductImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerProductImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerProductImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSellerProductImagesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sellerProductImageOne := &SellerProductImage{}
	sellerProductImageTwo := &SellerProductImage{}
	if err = randomize.Struct(seed, sellerProductImageOne, sellerProductImageDBTypes, false, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerProductImageTwo, sellerProductImageDBTypes, false, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerProductImageOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerProductImageTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sellerProductImageBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductImage) error {
	*o = SellerProductImage{}
	return nil
}

func sellerProductImageAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductImage) error {
	*o = SellerProductImage{}
	return nil
}

func sellerProductImageAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductImage) error {
	*o = SellerProductImage{}
	return nil
}

func sellerProductImageBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductImage) error {
	*o = SellerProductImage{}
	return nil
}

func sellerProductImageAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductImage) error {
	*o = SellerProductImage{}
	return nil
}

func sellerProductImageBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductImage) error {
	*o = SellerProductImage{}
	return nil
}

func sellerProductImageAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductImage) error {
	*o = SellerProductImage{}
	return nil
}

func sellerProductImageBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductImage) error {
	*o = SellerProductImage{}
	return nil
}

func sellerProductImageAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductImage) error {
	*o = SellerProductImage{}
	return nil
}

func testSellerProductImagesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SellerProductImage{}
	o := &SellerProductImage{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SellerProductImage object: %s", err)
	}

	AddSellerProductImageHook(boil.BeforeInsertHook, sellerProductImageBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sellerProductImageBeforeInsertHooks = []SellerProductImageHook{}

	AddSellerProductImageHook(boil.AfterInsertHook, sellerProductImageAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sellerProductImageAfterInsertHooks = []SellerProductImageHook{}

	AddSellerProductImageHook(boil.AfterSelectHook, sellerProductImageAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sellerProductImageAfterSelectHooks = []SellerProductImageHook{}

	AddSellerProductImageHook(boil.BeforeUpdateHook, sellerProductImageBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sellerProductImageBeforeUpdateHooks = []SellerProductImageHook{}

	AddSellerProductImageHook(boil.AfterUpdateHook, sellerProductImageAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sellerProductImageAfterUpdateHooks = []SellerProductImageHook{}

	AddSellerProductImageHook(boil.BeforeDeleteHook, sellerProductImageBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sellerProductImageBeforeDeleteHooks = []SellerProductImageHook{}

	AddSellerProductImageHook(boil.AfterDeleteHook, sellerProductImageAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sellerProductImageAfterDeleteHooks = []SellerProductImageHook{}

	AddSellerProductImageHook(boil.BeforeUpsertHook, sellerProductImageBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sellerProductImageBeforeUpsertHooks = []SellerProductImageHook{}

	AddSellerProductImageHook(boil.AfterUpsertHook, sellerProductImageAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sellerProductImageAfterUpsertHooks = []SellerProductImageHook{}
}

func testSellerProductImagesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerProductImagesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sellerProductImageColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerProductImageToOneSellerProductUsingSellerProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerProductImage
	var foreign SellerProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sellerProductDBTypes, false, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SellerProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SellerProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerProductImageSlice{&local}
	if err = local.L.LoadSellerProduct(ctx, tx, false, (*[]*SellerProductImage)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SellerProduct = nil
	if err = local.L.LoadSellerProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProduct == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerProductImageToOneSetOpSellerProductUsingSellerProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductImage
	var b, c SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductImageDBTypes, false, strmangle.SetComplement(sellerProductImagePrimaryKeyColumns, sellerProductImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SellerProduct{&b, &c} {
		err = a.SetSellerProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SellerProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerProductImages[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SellerProductID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SellerProductID))
		reflect.Indirect(reflect.ValueOf(&a.SellerProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SellerProductID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductID, x.ID)
		}
	}
}

func testSellerProductImageToOneRemoveOpSellerProductUsingSellerProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductImage
	var b SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductImageDBTypes, false, strmangle.SetComplement(sellerProductImagePrimaryKeyColumns, sellerProductImageColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSellerProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSellerProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SellerProduct().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SellerProduct != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SellerProductID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SellerProductImages) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSellerProductImagesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerProductImagesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerProductImageSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerProductImagesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerProductImages().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sellerProductImageDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `SellerProductID`: `bigint`, `Display`: `boolean`, `Image`: `text`}
	_                         = bytes.MinRead
)

func testSellerProductImagesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sellerProductImagePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sellerProductImageAllColumns) == len(sellerProductImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSellerProductImagesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sellerProductImageAllColumns) == len(sellerProductImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductImage{}
	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImageColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerProductImageDBTypes, true, sellerProductImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sellerProductImageAllColumns, sellerProductImagePrimaryKeyColumns) {
		fields = sellerProductImageAllColumns
	} else {
		fields = strmangle.SetComplement(
			sellerProductImageAllColumns,
			sellerProductImagePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SellerProductImageSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSellerProductImagesUpsert(t *testing.T) {
	t.Parallel()

	if len(sellerProductImageAllColumns) == len(sellerProductImagePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SellerProductImage{}
	if err = randomize.Struct(seed, &o, sellerProductImageDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerProductImage: %s", err)
	}

	count, err := SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sellerProductImageDBTypes, false, sellerProductImagePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProductImage struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerProductImage: %s", err)
	}

	count, err = SellerProductImages().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
