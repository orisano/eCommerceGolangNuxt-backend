// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SellerProductVariation is an object representing the database table.
type SellerProductVariation struct {
	ID              int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt       null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt       null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt       null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ProductPrice    null.String `boil:"product_price" json:"product_price,omitempty" toml:"product_price" yaml:"product_price,omitempty"`
	SellingPrice    null.String `boil:"selling_price" json:"selling_price,omitempty" toml:"selling_price" yaml:"selling_price,omitempty"`
	Quantity        null.Int64  `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	SellerProductID int64       `boil:"seller_product_id" json:"seller_product_id" toml:"seller_product_id" yaml:"seller_product_id"`
	Image           string      `boil:"image" json:"image" toml:"image" yaml:"image"`

	R *sellerProductVariationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sellerProductVariationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SellerProductVariationColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
	ProductPrice    string
	SellingPrice    string
	Quantity        string
	SellerProductID string
	Image           string
}{
	ID:              "id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
	ProductPrice:    "product_price",
	SellingPrice:    "selling_price",
	Quantity:        "quantity",
	SellerProductID: "seller_product_id",
	Image:           "image",
}

var SellerProductVariationTableColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
	ProductPrice    string
	SellingPrice    string
	Quantity        string
	SellerProductID string
	Image           string
}{
	ID:              "seller_product_variations.id",
	CreatedAt:       "seller_product_variations.created_at",
	UpdatedAt:       "seller_product_variations.updated_at",
	DeletedAt:       "seller_product_variations.deleted_at",
	ProductPrice:    "seller_product_variations.product_price",
	SellingPrice:    "seller_product_variations.selling_price",
	Quantity:        "seller_product_variations.quantity",
	SellerProductID: "seller_product_variations.seller_product_id",
	Image:           "seller_product_variations.image",
}

// Generated where

var SellerProductVariationWhere = struct {
	ID              whereHelperint64
	CreatedAt       whereHelpernull_Time
	UpdatedAt       whereHelpernull_Time
	DeletedAt       whereHelpernull_Time
	ProductPrice    whereHelpernull_String
	SellingPrice    whereHelpernull_String
	Quantity        whereHelpernull_Int64
	SellerProductID whereHelperint64
	Image           whereHelperstring
}{
	ID:              whereHelperint64{field: "\"seller_product_variations\".\"id\""},
	CreatedAt:       whereHelpernull_Time{field: "\"seller_product_variations\".\"created_at\""},
	UpdatedAt:       whereHelpernull_Time{field: "\"seller_product_variations\".\"updated_at\""},
	DeletedAt:       whereHelpernull_Time{field: "\"seller_product_variations\".\"deleted_at\""},
	ProductPrice:    whereHelpernull_String{field: "\"seller_product_variations\".\"product_price\""},
	SellingPrice:    whereHelpernull_String{field: "\"seller_product_variations\".\"selling_price\""},
	Quantity:        whereHelpernull_Int64{field: "\"seller_product_variations\".\"quantity\""},
	SellerProductID: whereHelperint64{field: "\"seller_product_variations\".\"seller_product_id\""},
	Image:           whereHelperstring{field: "\"seller_product_variations\".\"image\""},
}

// SellerProductVariationRels is where relationship names are stored.
var SellerProductVariationRels = struct {
	SellerProduct                string
	CartProducts                 string
	CheckoutProducts             string
	SellerProductVariationValues string
}{
	SellerProduct:                "SellerProduct",
	CartProducts:                 "CartProducts",
	CheckoutProducts:             "CheckoutProducts",
	SellerProductVariationValues: "SellerProductVariationValues",
}

// sellerProductVariationR is where relationships are stored.
type sellerProductVariationR struct {
	SellerProduct                *SellerProduct                   `boil:"SellerProduct" json:"SellerProduct" toml:"SellerProduct" yaml:"SellerProduct"`
	CartProducts                 CartProductSlice                 `boil:"CartProducts" json:"CartProducts" toml:"CartProducts" yaml:"CartProducts"`
	CheckoutProducts             CheckoutProductSlice             `boil:"CheckoutProducts" json:"CheckoutProducts" toml:"CheckoutProducts" yaml:"CheckoutProducts"`
	SellerProductVariationValues SellerProductVariationValueSlice `boil:"SellerProductVariationValues" json:"SellerProductVariationValues" toml:"SellerProductVariationValues" yaml:"SellerProductVariationValues"`
}

// NewStruct creates a new relationship struct
func (*sellerProductVariationR) NewStruct() *sellerProductVariationR {
	return &sellerProductVariationR{}
}

// sellerProductVariationL is where Load methods for each relationship are stored.
type sellerProductVariationL struct{}

var (
	sellerProductVariationAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "product_price", "selling_price", "quantity", "seller_product_id", "image"}
	sellerProductVariationColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "product_price", "selling_price", "seller_product_id", "image"}
	sellerProductVariationColumnsWithDefault    = []string{"id", "quantity"}
	sellerProductVariationPrimaryKeyColumns     = []string{"id"}
)

type (
	// SellerProductVariationSlice is an alias for a slice of pointers to SellerProductVariation.
	// This should almost always be used instead of []SellerProductVariation.
	SellerProductVariationSlice []*SellerProductVariation
	// SellerProductVariationHook is the signature for custom SellerProductVariation hook methods
	SellerProductVariationHook func(context.Context, boil.ContextExecutor, *SellerProductVariation) error

	sellerProductVariationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sellerProductVariationType                 = reflect.TypeOf(&SellerProductVariation{})
	sellerProductVariationMapping              = queries.MakeStructMapping(sellerProductVariationType)
	sellerProductVariationPrimaryKeyMapping, _ = queries.BindMapping(sellerProductVariationType, sellerProductVariationMapping, sellerProductVariationPrimaryKeyColumns)
	sellerProductVariationInsertCacheMut       sync.RWMutex
	sellerProductVariationInsertCache          = make(map[string]insertCache)
	sellerProductVariationUpdateCacheMut       sync.RWMutex
	sellerProductVariationUpdateCache          = make(map[string]updateCache)
	sellerProductVariationUpsertCacheMut       sync.RWMutex
	sellerProductVariationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sellerProductVariationBeforeInsertHooks []SellerProductVariationHook
var sellerProductVariationBeforeUpdateHooks []SellerProductVariationHook
var sellerProductVariationBeforeDeleteHooks []SellerProductVariationHook
var sellerProductVariationBeforeUpsertHooks []SellerProductVariationHook

var sellerProductVariationAfterInsertHooks []SellerProductVariationHook
var sellerProductVariationAfterSelectHooks []SellerProductVariationHook
var sellerProductVariationAfterUpdateHooks []SellerProductVariationHook
var sellerProductVariationAfterDeleteHooks []SellerProductVariationHook
var sellerProductVariationAfterUpsertHooks []SellerProductVariationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SellerProductVariation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SellerProductVariation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SellerProductVariation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SellerProductVariation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SellerProductVariation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SellerProductVariation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SellerProductVariation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SellerProductVariation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SellerProductVariation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSellerProductVariationHook registers your hook function for all future operations.
func AddSellerProductVariationHook(hookPoint boil.HookPoint, sellerProductVariationHook SellerProductVariationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sellerProductVariationBeforeInsertHooks = append(sellerProductVariationBeforeInsertHooks, sellerProductVariationHook)
	case boil.BeforeUpdateHook:
		sellerProductVariationBeforeUpdateHooks = append(sellerProductVariationBeforeUpdateHooks, sellerProductVariationHook)
	case boil.BeforeDeleteHook:
		sellerProductVariationBeforeDeleteHooks = append(sellerProductVariationBeforeDeleteHooks, sellerProductVariationHook)
	case boil.BeforeUpsertHook:
		sellerProductVariationBeforeUpsertHooks = append(sellerProductVariationBeforeUpsertHooks, sellerProductVariationHook)
	case boil.AfterInsertHook:
		sellerProductVariationAfterInsertHooks = append(sellerProductVariationAfterInsertHooks, sellerProductVariationHook)
	case boil.AfterSelectHook:
		sellerProductVariationAfterSelectHooks = append(sellerProductVariationAfterSelectHooks, sellerProductVariationHook)
	case boil.AfterUpdateHook:
		sellerProductVariationAfterUpdateHooks = append(sellerProductVariationAfterUpdateHooks, sellerProductVariationHook)
	case boil.AfterDeleteHook:
		sellerProductVariationAfterDeleteHooks = append(sellerProductVariationAfterDeleteHooks, sellerProductVariationHook)
	case boil.AfterUpsertHook:
		sellerProductVariationAfterUpsertHooks = append(sellerProductVariationAfterUpsertHooks, sellerProductVariationHook)
	}
}

// One returns a single sellerProductVariation record from the query.
func (q sellerProductVariationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SellerProductVariation, error) {
	o := &SellerProductVariation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for seller_product_variations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SellerProductVariation records from the query.
func (q sellerProductVariationQuery) All(ctx context.Context, exec boil.ContextExecutor) (SellerProductVariationSlice, error) {
	var o []*SellerProductVariation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SellerProductVariation slice")
	}

	if len(sellerProductVariationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SellerProductVariation records in the query.
func (q sellerProductVariationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count seller_product_variations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sellerProductVariationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if seller_product_variations exists")
	}

	return count > 0, nil
}

// SellerProduct pointed to by the foreign key.
func (o *SellerProductVariation) SellerProduct(mods ...qm.QueryMod) sellerProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SellerProductID),
	}

	queryMods = append(queryMods, mods...)

	query := SellerProducts(queryMods...)
	queries.SetFrom(query.Query, "\"seller_products\"")

	return query
}

// CartProducts retrieves all the cart_product's CartProducts with an executor.
func (o *SellerProductVariation) CartProducts(mods ...qm.QueryMod) cartProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"cart_products\".\"seller_product_variation_id\"=?", o.ID),
	)

	query := CartProducts(queryMods...)
	queries.SetFrom(query.Query, "\"cart_products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"cart_products\".*"})
	}

	return query
}

// CheckoutProducts retrieves all the checkout_product's CheckoutProducts with an executor.
func (o *SellerProductVariation) CheckoutProducts(mods ...qm.QueryMod) checkoutProductQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkout_products\".\"seller_product_variation_id\"=?", o.ID),
	)

	query := CheckoutProducts(queryMods...)
	queries.SetFrom(query.Query, "\"checkout_products\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"checkout_products\".*"})
	}

	return query
}

// SellerProductVariationValues retrieves all the seller_product_variation_value's SellerProductVariationValues with an executor.
func (o *SellerProductVariation) SellerProductVariationValues(mods ...qm.QueryMod) sellerProductVariationValueQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"seller_product_variation_values\".\"seller_product_variation_id\"=?", o.ID),
	)

	query := SellerProductVariationValues(queryMods...)
	queries.SetFrom(query.Query, "\"seller_product_variation_values\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"seller_product_variation_values\".*"})
	}

	return query
}

// LoadSellerProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sellerProductVariationL) LoadSellerProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProductVariation interface{}, mods queries.Applicator) error {
	var slice []*SellerProductVariation
	var object *SellerProductVariation

	if singular {
		object = maybeSellerProductVariation.(*SellerProductVariation)
	} else {
		slice = *maybeSellerProductVariation.(*[]*SellerProductVariation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductVariationR{}
		}
		args = append(args, object.SellerProductID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductVariationR{}
			}

			for _, a := range args {
				if a == obj.SellerProductID {
					continue Outer
				}
			}

			args = append(args, obj.SellerProductID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_products`),
		qm.WhereIn(`seller_products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SellerProduct")
	}

	var resultSlice []*SellerProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SellerProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seller_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_products")
	}

	if len(sellerProductVariationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerProduct = foreign
		if foreign.R == nil {
			foreign.R = &sellerProductR{}
		}
		foreign.R.SellerProductVariations = append(foreign.R.SellerProductVariations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SellerProductID == foreign.ID {
				local.R.SellerProduct = foreign
				if foreign.R == nil {
					foreign.R = &sellerProductR{}
				}
				foreign.R.SellerProductVariations = append(foreign.R.SellerProductVariations, local)
				break
			}
		}
	}

	return nil
}

// LoadCartProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sellerProductVariationL) LoadCartProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProductVariation interface{}, mods queries.Applicator) error {
	var slice []*SellerProductVariation
	var object *SellerProductVariation

	if singular {
		object = maybeSellerProductVariation.(*SellerProductVariation)
	} else {
		slice = *maybeSellerProductVariation.(*[]*SellerProductVariation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductVariationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductVariationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`cart_products`),
		qm.WhereIn(`cart_products.seller_product_variation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load cart_products")
	}

	var resultSlice []*CartProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice cart_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on cart_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for cart_products")
	}

	if len(cartProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CartProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cartProductR{}
			}
			foreign.R.SellerProductVariation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerProductVariationID) {
				local.R.CartProducts = append(local.R.CartProducts, foreign)
				if foreign.R == nil {
					foreign.R = &cartProductR{}
				}
				foreign.R.SellerProductVariation = local
				break
			}
		}
	}

	return nil
}

// LoadCheckoutProducts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sellerProductVariationL) LoadCheckoutProducts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProductVariation interface{}, mods queries.Applicator) error {
	var slice []*SellerProductVariation
	var object *SellerProductVariation

	if singular {
		object = maybeSellerProductVariation.(*SellerProductVariation)
	} else {
		slice = *maybeSellerProductVariation.(*[]*SellerProductVariation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductVariationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductVariationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkout_products`),
		qm.WhereIn(`checkout_products.seller_product_variation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkout_products")
	}

	var resultSlice []*CheckoutProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkout_products")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkout_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkout_products")
	}

	if len(checkoutProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CheckoutProducts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutProductR{}
			}
			foreign.R.SellerProductVariation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SellerProductVariationID) {
				local.R.CheckoutProducts = append(local.R.CheckoutProducts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutProductR{}
				}
				foreign.R.SellerProductVariation = local
				break
			}
		}
	}

	return nil
}

// LoadSellerProductVariationValues allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sellerProductVariationL) LoadSellerProductVariationValues(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProductVariation interface{}, mods queries.Applicator) error {
	var slice []*SellerProductVariation
	var object *SellerProductVariation

	if singular {
		object = maybeSellerProductVariation.(*SellerProductVariation)
	} else {
		slice = *maybeSellerProductVariation.(*[]*SellerProductVariation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductVariationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductVariationR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_product_variation_values`),
		qm.WhereIn(`seller_product_variation_values.seller_product_variation_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seller_product_variation_values")
	}

	var resultSlice []*SellerProductVariationValue
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seller_product_variation_values")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seller_product_variation_values")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_product_variation_values")
	}

	if len(sellerProductVariationValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SellerProductVariationValues = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sellerProductVariationValueR{}
			}
			foreign.R.SellerProductVariation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SellerProductVariationID {
				local.R.SellerProductVariationValues = append(local.R.SellerProductVariationValues, foreign)
				if foreign.R == nil {
					foreign.R = &sellerProductVariationValueR{}
				}
				foreign.R.SellerProductVariation = local
				break
			}
		}
	}

	return nil
}

// SetSellerProduct of the sellerProductVariation to the related item.
// Sets o.R.SellerProduct to related.
// Adds o to related.R.SellerProductVariations.
func (o *SellerProductVariation) SetSellerProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SellerProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"seller_product_variations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_id"}),
		strmangle.WhereClause("\"", "\"", 2, sellerProductVariationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SellerProductID = related.ID
	if o.R == nil {
		o.R = &sellerProductVariationR{
			SellerProduct: related,
		}
	} else {
		o.R.SellerProduct = related
	}

	if related.R == nil {
		related.R = &sellerProductR{
			SellerProductVariations: SellerProductVariationSlice{o},
		}
	} else {
		related.R.SellerProductVariations = append(related.R.SellerProductVariations, o)
	}

	return nil
}

// AddCartProducts adds the given related objects to the existing relationships
// of the seller_product_variation, optionally inserting them as new records.
// Appends related to o.R.CartProducts.
// Sets related.R.SellerProductVariation appropriately.
func (o *SellerProductVariation) AddCartProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CartProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerProductVariationID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"cart_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_variation_id"}),
				strmangle.WhereClause("\"", "\"", 2, cartProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerProductVariationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sellerProductVariationR{
			CartProducts: related,
		}
	} else {
		o.R.CartProducts = append(o.R.CartProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cartProductR{
				SellerProductVariation: o,
			}
		} else {
			rel.R.SellerProductVariation = o
		}
	}
	return nil
}

// SetCartProducts removes all previously related items of the
// seller_product_variation replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerProductVariation's CartProducts accordingly.
// Replaces o.R.CartProducts with related.
// Sets related.R.SellerProductVariation's CartProducts accordingly.
func (o *SellerProductVariation) SetCartProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CartProduct) error {
	query := "update \"cart_products\" set \"seller_product_variation_id\" = null where \"seller_product_variation_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CartProducts {
			queries.SetScanner(&rel.SellerProductVariationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerProductVariation = nil
		}

		o.R.CartProducts = nil
	}
	return o.AddCartProducts(ctx, exec, insert, related...)
}

// RemoveCartProducts relationships from objects passed in.
// Removes related items from R.CartProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerProductVariation.
func (o *SellerProductVariation) RemoveCartProducts(ctx context.Context, exec boil.ContextExecutor, related ...*CartProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerProductVariationID, nil)
		if rel.R != nil {
			rel.R.SellerProductVariation = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_product_variation_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CartProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.CartProducts)
			if ln > 1 && i < ln-1 {
				o.R.CartProducts[i] = o.R.CartProducts[ln-1]
			}
			o.R.CartProducts = o.R.CartProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddCheckoutProducts adds the given related objects to the existing relationships
// of the seller_product_variation, optionally inserting them as new records.
// Appends related to o.R.CheckoutProducts.
// Sets related.R.SellerProductVariation appropriately.
func (o *SellerProductVariation) AddCheckoutProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CheckoutProduct) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SellerProductVariationID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkout_products\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_variation_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutProductPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SellerProductVariationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &sellerProductVariationR{
			CheckoutProducts: related,
		}
	} else {
		o.R.CheckoutProducts = append(o.R.CheckoutProducts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutProductR{
				SellerProductVariation: o,
			}
		} else {
			rel.R.SellerProductVariation = o
		}
	}
	return nil
}

// SetCheckoutProducts removes all previously related items of the
// seller_product_variation replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SellerProductVariation's CheckoutProducts accordingly.
// Replaces o.R.CheckoutProducts with related.
// Sets related.R.SellerProductVariation's CheckoutProducts accordingly.
func (o *SellerProductVariation) SetCheckoutProducts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CheckoutProduct) error {
	query := "update \"checkout_products\" set \"seller_product_variation_id\" = null where \"seller_product_variation_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CheckoutProducts {
			queries.SetScanner(&rel.SellerProductVariationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SellerProductVariation = nil
		}

		o.R.CheckoutProducts = nil
	}
	return o.AddCheckoutProducts(ctx, exec, insert, related...)
}

// RemoveCheckoutProducts relationships from objects passed in.
// Removes related items from R.CheckoutProducts (uses pointer comparison, removal does not keep order)
// Sets related.R.SellerProductVariation.
func (o *SellerProductVariation) RemoveCheckoutProducts(ctx context.Context, exec boil.ContextExecutor, related ...*CheckoutProduct) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SellerProductVariationID, nil)
		if rel.R != nil {
			rel.R.SellerProductVariation = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("seller_product_variation_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CheckoutProducts {
			if rel != ri {
				continue
			}

			ln := len(o.R.CheckoutProducts)
			if ln > 1 && i < ln-1 {
				o.R.CheckoutProducts[i] = o.R.CheckoutProducts[ln-1]
			}
			o.R.CheckoutProducts = o.R.CheckoutProducts[:ln-1]
			break
		}
	}

	return nil
}

// AddSellerProductVariationValues adds the given related objects to the existing relationships
// of the seller_product_variation, optionally inserting them as new records.
// Appends related to o.R.SellerProductVariationValues.
// Sets related.R.SellerProductVariation appropriately.
func (o *SellerProductVariation) AddSellerProductVariationValues(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerProductVariationValue) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SellerProductVariationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"seller_product_variation_values\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_variation_id"}),
				strmangle.WhereClause("\"", "\"", 2, sellerProductVariationValuePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SellerProductVariationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &sellerProductVariationR{
			SellerProductVariationValues: related,
		}
	} else {
		o.R.SellerProductVariationValues = append(o.R.SellerProductVariationValues, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sellerProductVariationValueR{
				SellerProductVariation: o,
			}
		} else {
			rel.R.SellerProductVariation = o
		}
	}
	return nil
}

// SellerProductVariations retrieves all the records using an executor.
func SellerProductVariations(mods ...qm.QueryMod) sellerProductVariationQuery {
	mods = append(mods, qm.From("\"seller_product_variations\""))
	return sellerProductVariationQuery{NewQuery(mods...)}
}

// FindSellerProductVariation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSellerProductVariation(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SellerProductVariation, error) {
	sellerProductVariationObj := &SellerProductVariation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"seller_product_variations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sellerProductVariationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from seller_product_variations")
	}

	if err = sellerProductVariationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sellerProductVariationObj, err
	}

	return sellerProductVariationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SellerProductVariation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seller_product_variations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sellerProductVariationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sellerProductVariationInsertCacheMut.RLock()
	cache, cached := sellerProductVariationInsertCache[key]
	sellerProductVariationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sellerProductVariationAllColumns,
			sellerProductVariationColumnsWithDefault,
			sellerProductVariationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sellerProductVariationType, sellerProductVariationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sellerProductVariationType, sellerProductVariationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"seller_product_variations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"seller_product_variations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into seller_product_variations")
	}

	if !cached {
		sellerProductVariationInsertCacheMut.Lock()
		sellerProductVariationInsertCache[key] = cache
		sellerProductVariationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SellerProductVariation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SellerProductVariation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sellerProductVariationUpdateCacheMut.RLock()
	cache, cached := sellerProductVariationUpdateCache[key]
	sellerProductVariationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sellerProductVariationAllColumns,
			sellerProductVariationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update seller_product_variations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"seller_product_variations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sellerProductVariationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sellerProductVariationType, sellerProductVariationMapping, append(wl, sellerProductVariationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update seller_product_variations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for seller_product_variations")
	}

	if !cached {
		sellerProductVariationUpdateCacheMut.Lock()
		sellerProductVariationUpdateCache[key] = cache
		sellerProductVariationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sellerProductVariationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for seller_product_variations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for seller_product_variations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SellerProductVariationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerProductVariationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"seller_product_variations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sellerProductVariationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sellerProductVariation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sellerProductVariation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SellerProductVariation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seller_product_variations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sellerProductVariationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sellerProductVariationUpsertCacheMut.RLock()
	cache, cached := sellerProductVariationUpsertCache[key]
	sellerProductVariationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sellerProductVariationAllColumns,
			sellerProductVariationColumnsWithDefault,
			sellerProductVariationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sellerProductVariationAllColumns,
			sellerProductVariationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert seller_product_variations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sellerProductVariationPrimaryKeyColumns))
			copy(conflict, sellerProductVariationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"seller_product_variations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sellerProductVariationType, sellerProductVariationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sellerProductVariationType, sellerProductVariationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert seller_product_variations")
	}

	if !cached {
		sellerProductVariationUpsertCacheMut.Lock()
		sellerProductVariationUpsertCache[key] = cache
		sellerProductVariationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SellerProductVariation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SellerProductVariation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SellerProductVariation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sellerProductVariationPrimaryKeyMapping)
	sql := "DELETE FROM \"seller_product_variations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from seller_product_variations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for seller_product_variations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sellerProductVariationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sellerProductVariationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seller_product_variations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seller_product_variations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SellerProductVariationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sellerProductVariationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerProductVariationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"seller_product_variations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sellerProductVariationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sellerProductVariation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seller_product_variations")
	}

	if len(sellerProductVariationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SellerProductVariation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSellerProductVariation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SellerProductVariationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SellerProductVariationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerProductVariationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"seller_product_variations\".* FROM \"seller_product_variations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sellerProductVariationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SellerProductVariationSlice")
	}

	*o = slice

	return nil
}

// SellerProductVariationExists checks if the SellerProductVariation row exists.
func SellerProductVariationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"seller_product_variations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if seller_product_variations exists")
	}

	return exists, nil
}
