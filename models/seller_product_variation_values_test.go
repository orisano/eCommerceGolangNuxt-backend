// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSellerProductVariationValues(t *testing.T) {
	t.Parallel()

	query := SellerProductVariationValues()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSellerProductVariationValuesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProductVariationValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductVariationValuesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SellerProductVariationValues().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProductVariationValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductVariationValuesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerProductVariationValueSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerProductVariationValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerProductVariationValuesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SellerProductVariationValueExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SellerProductVariationValue exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SellerProductVariationValueExists to return true, but got false.")
	}
}

func testSellerProductVariationValuesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sellerProductVariationValueFound, err := FindSellerProductVariationValue(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sellerProductVariationValueFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSellerProductVariationValuesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SellerProductVariationValues().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSellerProductVariationValuesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SellerProductVariationValues().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSellerProductVariationValuesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sellerProductVariationValueOne := &SellerProductVariationValue{}
	sellerProductVariationValueTwo := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, sellerProductVariationValueOne, sellerProductVariationValueDBTypes, false, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerProductVariationValueTwo, sellerProductVariationValueDBTypes, false, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerProductVariationValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerProductVariationValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerProductVariationValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSellerProductVariationValuesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sellerProductVariationValueOne := &SellerProductVariationValue{}
	sellerProductVariationValueTwo := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, sellerProductVariationValueOne, sellerProductVariationValueDBTypes, false, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerProductVariationValueTwo, sellerProductVariationValueDBTypes, false, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerProductVariationValueOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerProductVariationValueTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductVariationValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sellerProductVariationValueBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariationValue) error {
	*o = SellerProductVariationValue{}
	return nil
}

func sellerProductVariationValueAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariationValue) error {
	*o = SellerProductVariationValue{}
	return nil
}

func sellerProductVariationValueAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariationValue) error {
	*o = SellerProductVariationValue{}
	return nil
}

func sellerProductVariationValueBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariationValue) error {
	*o = SellerProductVariationValue{}
	return nil
}

func sellerProductVariationValueAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariationValue) error {
	*o = SellerProductVariationValue{}
	return nil
}

func sellerProductVariationValueBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariationValue) error {
	*o = SellerProductVariationValue{}
	return nil
}

func sellerProductVariationValueAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariationValue) error {
	*o = SellerProductVariationValue{}
	return nil
}

func sellerProductVariationValueBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariationValue) error {
	*o = SellerProductVariationValue{}
	return nil
}

func sellerProductVariationValueAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerProductVariationValue) error {
	*o = SellerProductVariationValue{}
	return nil
}

func testSellerProductVariationValuesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SellerProductVariationValue{}
	o := &SellerProductVariationValue{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue object: %s", err)
	}

	AddSellerProductVariationValueHook(boil.BeforeInsertHook, sellerProductVariationValueBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationValueBeforeInsertHooks = []SellerProductVariationValueHook{}

	AddSellerProductVariationValueHook(boil.AfterInsertHook, sellerProductVariationValueAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationValueAfterInsertHooks = []SellerProductVariationValueHook{}

	AddSellerProductVariationValueHook(boil.AfterSelectHook, sellerProductVariationValueAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationValueAfterSelectHooks = []SellerProductVariationValueHook{}

	AddSellerProductVariationValueHook(boil.BeforeUpdateHook, sellerProductVariationValueBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationValueBeforeUpdateHooks = []SellerProductVariationValueHook{}

	AddSellerProductVariationValueHook(boil.AfterUpdateHook, sellerProductVariationValueAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationValueAfterUpdateHooks = []SellerProductVariationValueHook{}

	AddSellerProductVariationValueHook(boil.BeforeDeleteHook, sellerProductVariationValueBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationValueBeforeDeleteHooks = []SellerProductVariationValueHook{}

	AddSellerProductVariationValueHook(boil.AfterDeleteHook, sellerProductVariationValueAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationValueAfterDeleteHooks = []SellerProductVariationValueHook{}

	AddSellerProductVariationValueHook(boil.BeforeUpsertHook, sellerProductVariationValueBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationValueBeforeUpsertHooks = []SellerProductVariationValueHook{}

	AddSellerProductVariationValueHook(boil.AfterUpsertHook, sellerProductVariationValueAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sellerProductVariationValueAfterUpsertHooks = []SellerProductVariationValueHook{}
}

func testSellerProductVariationValuesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductVariationValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerProductVariationValuesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sellerProductVariationValueColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SellerProductVariationValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerProductVariationValueToOneAttributeUsingAttribute(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerProductVariationValue
	var foreign Attribute

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerProductVariationValueDBTypes, false, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AttributeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Attribute().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerProductVariationValueSlice{&local}
	if err = local.L.LoadAttribute(ctx, tx, false, (*[]*SellerProductVariationValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Attribute == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Attribute = nil
	if err = local.L.LoadAttribute(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Attribute == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerProductVariationValueToOneSellerProductVariationUsingSellerProductVariation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerProductVariationValue
	var foreign SellerProductVariation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerProductVariationValueDBTypes, false, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sellerProductVariationDBTypes, false, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SellerProductVariationID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SellerProductVariation().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerProductVariationValueSlice{&local}
	if err = local.L.LoadSellerProductVariation(ctx, tx, false, (*[]*SellerProductVariationValue)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProductVariation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SellerProductVariation = nil
	if err = local.L.LoadSellerProductVariation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProductVariation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerProductVariationValueToOneSetOpAttributeUsingAttribute(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariationValue
	var b, c Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationValueDBTypes, false, strmangle.SetComplement(sellerProductVariationValuePrimaryKeyColumns, sellerProductVariationValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Attribute{&b, &c} {
		err = a.SetAttribute(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Attribute != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerProductVariationValues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AttributeID != x.ID {
			t.Error("foreign key was wrong value", a.AttributeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AttributeID))
		reflect.Indirect(reflect.ValueOf(&a.AttributeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AttributeID != x.ID {
			t.Error("foreign key was wrong value", a.AttributeID, x.ID)
		}
	}
}
func testSellerProductVariationValueToOneSetOpSellerProductVariationUsingSellerProductVariation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerProductVariationValue
	var b, c SellerProductVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerProductVariationValueDBTypes, false, strmangle.SetComplement(sellerProductVariationValuePrimaryKeyColumns, sellerProductVariationValueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SellerProductVariation{&b, &c} {
		err = a.SetSellerProductVariation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SellerProductVariation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerProductVariationValues[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SellerProductVariationID != x.ID {
			t.Error("foreign key was wrong value", a.SellerProductVariationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SellerProductVariationID))
		reflect.Indirect(reflect.ValueOf(&a.SellerProductVariationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SellerProductVariationID != x.ID {
			t.Error("foreign key was wrong value", a.SellerProductVariationID, x.ID)
		}
	}
}

func testSellerProductVariationValuesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerProductVariationValuesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerProductVariationValueSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerProductVariationValuesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerProductVariationValues().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sellerProductVariationValueDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Name`: `text`, `Description`: `text`, `SellerProductVariationID`: `bigint`, `AttributeID`: `bigint`}
	_                                  = bytes.MinRead
)

func testSellerProductVariationValuesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sellerProductVariationValuePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sellerProductVariationValueAllColumns) == len(sellerProductVariationValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductVariationValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSellerProductVariationValuesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sellerProductVariationValueAllColumns) == len(sellerProductVariationValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerProductVariationValue{}
	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerProductVariationValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerProductVariationValueDBTypes, true, sellerProductVariationValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sellerProductVariationValueAllColumns, sellerProductVariationValuePrimaryKeyColumns) {
		fields = sellerProductVariationValueAllColumns
	} else {
		fields = strmangle.SetComplement(
			sellerProductVariationValueAllColumns,
			sellerProductVariationValuePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SellerProductVariationValueSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSellerProductVariationValuesUpsert(t *testing.T) {
	t.Parallel()

	if len(sellerProductVariationValueAllColumns) == len(sellerProductVariationValuePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SellerProductVariationValue{}
	if err = randomize.Struct(seed, &o, sellerProductVariationValueDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerProductVariationValue: %s", err)
	}

	count, err := SellerProductVariationValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sellerProductVariationValueDBTypes, false, sellerProductVariationValuePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariationValue struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerProductVariationValue: %s", err)
	}

	count, err = SellerProductVariationValues().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
