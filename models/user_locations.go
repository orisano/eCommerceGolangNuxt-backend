// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserLocation is an object representing the database table.
type UserLocation struct {
	ID            int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt     null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt     null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	UserID        null.Int64  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	Area          null.String `boil:"area" json:"area,omitempty" toml:"area" yaml:"area,omitempty"`
	Street        null.String `boil:"street" json:"street,omitempty" toml:"street" yaml:"street,omitempty"`
	House         null.String `boil:"house" json:"house,omitempty" toml:"house" yaml:"house,omitempty"`
	PostOffice    null.String `boil:"post_office" json:"post_office,omitempty" toml:"post_office" yaml:"post_office,omitempty"`
	PostCode      null.String `boil:"post_code" json:"post_code,omitempty" toml:"post_code" yaml:"post_code,omitempty"`
	PoliceStation null.String `boil:"police_station" json:"police_station,omitempty" toml:"police_station" yaml:"police_station,omitempty"`
	City          null.String `boil:"city" json:"city,omitempty" toml:"city" yaml:"city,omitempty"`

	R *userLocationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userLocationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserLocationColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	UserID        string
	Area          string
	Street        string
	House         string
	PostOffice    string
	PostCode      string
	PoliceStation string
	City          string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
	UserID:        "user_id",
	Area:          "area",
	Street:        "street",
	House:         "house",
	PostOffice:    "post_office",
	PostCode:      "post_code",
	PoliceStation: "police_station",
	City:          "city",
}

var UserLocationTableColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	UserID        string
	Area          string
	Street        string
	House         string
	PostOffice    string
	PostCode      string
	PoliceStation string
	City          string
}{
	ID:            "user_locations.id",
	CreatedAt:     "user_locations.created_at",
	UpdatedAt:     "user_locations.updated_at",
	DeletedAt:     "user_locations.deleted_at",
	UserID:        "user_locations.user_id",
	Area:          "user_locations.area",
	Street:        "user_locations.street",
	House:         "user_locations.house",
	PostOffice:    "user_locations.post_office",
	PostCode:      "user_locations.post_code",
	PoliceStation: "user_locations.police_station",
	City:          "user_locations.city",
}

// Generated where

var UserLocationWhere = struct {
	ID            whereHelperint64
	CreatedAt     whereHelpernull_Time
	UpdatedAt     whereHelpernull_Time
	DeletedAt     whereHelpernull_Time
	UserID        whereHelpernull_Int64
	Area          whereHelpernull_String
	Street        whereHelpernull_String
	House         whereHelpernull_String
	PostOffice    whereHelpernull_String
	PostCode      whereHelpernull_String
	PoliceStation whereHelpernull_String
	City          whereHelpernull_String
}{
	ID:            whereHelperint64{field: "\"user_locations\".\"id\""},
	CreatedAt:     whereHelpernull_Time{field: "\"user_locations\".\"created_at\""},
	UpdatedAt:     whereHelpernull_Time{field: "\"user_locations\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"user_locations\".\"deleted_at\""},
	UserID:        whereHelpernull_Int64{field: "\"user_locations\".\"user_id\""},
	Area:          whereHelpernull_String{field: "\"user_locations\".\"area\""},
	Street:        whereHelpernull_String{field: "\"user_locations\".\"street\""},
	House:         whereHelpernull_String{field: "\"user_locations\".\"house\""},
	PostOffice:    whereHelpernull_String{field: "\"user_locations\".\"post_office\""},
	PostCode:      whereHelpernull_String{field: "\"user_locations\".\"post_code\""},
	PoliceStation: whereHelpernull_String{field: "\"user_locations\".\"police_station\""},
	City:          whereHelpernull_String{field: "\"user_locations\".\"city\""},
}

// UserLocationRels is where relationship names are stored.
var UserLocationRels = struct {
	User      string
	Checkouts string
}{
	User:      "User",
	Checkouts: "Checkouts",
}

// userLocationR is where relationships are stored.
type userLocationR struct {
	User      *User         `boil:"User" json:"User" toml:"User" yaml:"User"`
	Checkouts CheckoutSlice `boil:"Checkouts" json:"Checkouts" toml:"Checkouts" yaml:"Checkouts"`
}

// NewStruct creates a new relationship struct
func (*userLocationR) NewStruct() *userLocationR {
	return &userLocationR{}
}

// userLocationL is where Load methods for each relationship are stored.
type userLocationL struct{}

var (
	userLocationAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "user_id", "area", "street", "house", "post_office", "post_code", "police_station", "city"}
	userLocationColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "user_id", "area", "street", "house", "post_office", "post_code", "police_station", "city"}
	userLocationColumnsWithDefault    = []string{"id"}
	userLocationPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserLocationSlice is an alias for a slice of pointers to UserLocation.
	// This should almost always be used instead of []UserLocation.
	UserLocationSlice []*UserLocation
	// UserLocationHook is the signature for custom UserLocation hook methods
	UserLocationHook func(context.Context, boil.ContextExecutor, *UserLocation) error

	userLocationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userLocationType                 = reflect.TypeOf(&UserLocation{})
	userLocationMapping              = queries.MakeStructMapping(userLocationType)
	userLocationPrimaryKeyMapping, _ = queries.BindMapping(userLocationType, userLocationMapping, userLocationPrimaryKeyColumns)
	userLocationInsertCacheMut       sync.RWMutex
	userLocationInsertCache          = make(map[string]insertCache)
	userLocationUpdateCacheMut       sync.RWMutex
	userLocationUpdateCache          = make(map[string]updateCache)
	userLocationUpsertCacheMut       sync.RWMutex
	userLocationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userLocationBeforeInsertHooks []UserLocationHook
var userLocationBeforeUpdateHooks []UserLocationHook
var userLocationBeforeDeleteHooks []UserLocationHook
var userLocationBeforeUpsertHooks []UserLocationHook

var userLocationAfterInsertHooks []UserLocationHook
var userLocationAfterSelectHooks []UserLocationHook
var userLocationAfterUpdateHooks []UserLocationHook
var userLocationAfterDeleteHooks []UserLocationHook
var userLocationAfterUpsertHooks []UserLocationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserLocation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLocationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserLocation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLocationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserLocation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLocationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserLocation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLocationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserLocation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLocationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserLocation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLocationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserLocation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLocationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserLocation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLocationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserLocation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLocationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserLocationHook registers your hook function for all future operations.
func AddUserLocationHook(hookPoint boil.HookPoint, userLocationHook UserLocationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userLocationBeforeInsertHooks = append(userLocationBeforeInsertHooks, userLocationHook)
	case boil.BeforeUpdateHook:
		userLocationBeforeUpdateHooks = append(userLocationBeforeUpdateHooks, userLocationHook)
	case boil.BeforeDeleteHook:
		userLocationBeforeDeleteHooks = append(userLocationBeforeDeleteHooks, userLocationHook)
	case boil.BeforeUpsertHook:
		userLocationBeforeUpsertHooks = append(userLocationBeforeUpsertHooks, userLocationHook)
	case boil.AfterInsertHook:
		userLocationAfterInsertHooks = append(userLocationAfterInsertHooks, userLocationHook)
	case boil.AfterSelectHook:
		userLocationAfterSelectHooks = append(userLocationAfterSelectHooks, userLocationHook)
	case boil.AfterUpdateHook:
		userLocationAfterUpdateHooks = append(userLocationAfterUpdateHooks, userLocationHook)
	case boil.AfterDeleteHook:
		userLocationAfterDeleteHooks = append(userLocationAfterDeleteHooks, userLocationHook)
	case boil.AfterUpsertHook:
		userLocationAfterUpsertHooks = append(userLocationAfterUpsertHooks, userLocationHook)
	}
}

// One returns a single userLocation record from the query.
func (q userLocationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserLocation, error) {
	o := &UserLocation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_locations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserLocation records from the query.
func (q userLocationQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserLocationSlice, error) {
	var o []*UserLocation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserLocation slice")
	}

	if len(userLocationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserLocation records in the query.
func (q userLocationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_locations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userLocationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_locations exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UserLocation) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Checkouts retrieves all the checkout's Checkouts with an executor.
func (o *UserLocation) Checkouts(mods ...qm.QueryMod) checkoutQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"checkouts\".\"user_location_id\"=?", o.ID),
	)

	query := Checkouts(queryMods...)
	queries.SetFrom(query.Query, "\"checkouts\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"checkouts\".*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userLocationL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserLocation interface{}, mods queries.Applicator) error {
	var slice []*UserLocation
	var object *UserLocation

	if singular {
		object = maybeUserLocation.(*UserLocation)
	} else {
		slice = *maybeUserLocation.(*[]*UserLocation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userLocationR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userLocationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userLocationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserLocations = append(foreign.R.UserLocations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserLocations = append(foreign.R.UserLocations, local)
				break
			}
		}
	}

	return nil
}

// LoadCheckouts allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userLocationL) LoadCheckouts(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserLocation interface{}, mods queries.Applicator) error {
	var slice []*UserLocation
	var object *UserLocation

	if singular {
		object = maybeUserLocation.(*UserLocation)
	} else {
		slice = *maybeUserLocation.(*[]*UserLocation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userLocationR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userLocationR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.user_location_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load checkouts")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice checkouts")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if len(checkoutAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Checkouts = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &checkoutR{}
			}
			foreign.R.UserLocation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UserLocationID) {
				local.R.Checkouts = append(local.R.Checkouts, foreign)
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.UserLocation = local
				break
			}
		}
	}

	return nil
}

// SetUser of the userLocation to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserLocations.
func (o *UserLocation) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_locations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userLocationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &userLocationR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserLocations: UserLocationSlice{o},
		}
	} else {
		related.R.UserLocations = append(related.R.UserLocations, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *UserLocation) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UserLocations {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.UserLocations)
		if ln > 1 && i < ln-1 {
			related.R.UserLocations[i] = related.R.UserLocations[ln-1]
		}
		related.R.UserLocations = related.R.UserLocations[:ln-1]
		break
	}
	return nil
}

// AddCheckouts adds the given related objects to the existing relationships
// of the user_location, optionally inserting them as new records.
// Appends related to o.R.Checkouts.
// Sets related.R.UserLocation appropriately.
func (o *UserLocation) AddCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UserLocationID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"checkouts\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_location_id"}),
				strmangle.WhereClause("\"", "\"", 2, checkoutPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UserLocationID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userLocationR{
			Checkouts: related,
		}
	} else {
		o.R.Checkouts = append(o.R.Checkouts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &checkoutR{
				UserLocation: o,
			}
		} else {
			rel.R.UserLocation = o
		}
	}
	return nil
}

// SetCheckouts removes all previously related items of the
// user_location replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UserLocation's Checkouts accordingly.
// Replaces o.R.Checkouts with related.
// Sets related.R.UserLocation's Checkouts accordingly.
func (o *UserLocation) SetCheckouts(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Checkout) error {
	query := "update \"checkouts\" set \"user_location_id\" = null where \"user_location_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Checkouts {
			queries.SetScanner(&rel.UserLocationID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UserLocation = nil
		}

		o.R.Checkouts = nil
	}
	return o.AddCheckouts(ctx, exec, insert, related...)
}

// RemoveCheckouts relationships from objects passed in.
// Removes related items from R.Checkouts (uses pointer comparison, removal does not keep order)
// Sets related.R.UserLocation.
func (o *UserLocation) RemoveCheckouts(ctx context.Context, exec boil.ContextExecutor, related ...*Checkout) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UserLocationID, nil)
		if rel.R != nil {
			rel.R.UserLocation = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("user_location_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Checkouts {
			if rel != ri {
				continue
			}

			ln := len(o.R.Checkouts)
			if ln > 1 && i < ln-1 {
				o.R.Checkouts[i] = o.R.Checkouts[ln-1]
			}
			o.R.Checkouts = o.R.Checkouts[:ln-1]
			break
		}
	}

	return nil
}

// UserLocations retrieves all the records using an executor.
func UserLocations(mods ...qm.QueryMod) userLocationQuery {
	mods = append(mods, qm.From("\"user_locations\""))
	return userLocationQuery{NewQuery(mods...)}
}

// FindUserLocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserLocation(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UserLocation, error) {
	userLocationObj := &UserLocation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_locations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userLocationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_locations")
	}

	if err = userLocationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userLocationObj, err
	}

	return userLocationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserLocation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_locations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLocationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userLocationInsertCacheMut.RLock()
	cache, cached := userLocationInsertCache[key]
	userLocationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userLocationAllColumns,
			userLocationColumnsWithDefault,
			userLocationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userLocationType, userLocationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userLocationType, userLocationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_locations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_locations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_locations")
	}

	if !cached {
		userLocationInsertCacheMut.Lock()
		userLocationInsertCache[key] = cache
		userLocationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserLocation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserLocation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userLocationUpdateCacheMut.RLock()
	cache, cached := userLocationUpdateCache[key]
	userLocationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userLocationAllColumns,
			userLocationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_locations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_locations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userLocationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userLocationType, userLocationMapping, append(wl, userLocationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_locations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_locations")
	}

	if !cached {
		userLocationUpdateCacheMut.Lock()
		userLocationUpdateCache[key] = cache
		userLocationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userLocationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_locations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_locations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserLocationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_locations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userLocationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userLocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userLocation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserLocation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_locations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLocationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userLocationUpsertCacheMut.RLock()
	cache, cached := userLocationUpsertCache[key]
	userLocationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userLocationAllColumns,
			userLocationColumnsWithDefault,
			userLocationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userLocationAllColumns,
			userLocationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_locations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userLocationPrimaryKeyColumns))
			copy(conflict, userLocationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_locations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userLocationType, userLocationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userLocationType, userLocationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_locations")
	}

	if !cached {
		userLocationUpsertCacheMut.Lock()
		userLocationUpsertCache[key] = cache
		userLocationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserLocation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserLocation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserLocation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userLocationPrimaryKeyMapping)
	sql := "DELETE FROM \"user_locations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_locations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_locations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userLocationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userLocationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_locations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_locations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserLocationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userLocationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_locations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLocationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userLocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_locations")
	}

	if len(userLocationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserLocation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserLocation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserLocationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserLocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_locations\".* FROM \"user_locations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userLocationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserLocationSlice")
	}

	*o = slice

	return nil
}

// UserLocationExists checks if the UserLocation row exists.
func UserLocationExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_locations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_locations exists")
	}

	return exists, nil
}
