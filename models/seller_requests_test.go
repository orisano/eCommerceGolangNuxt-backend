// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSellerRequests(t *testing.T) {
	t.Parallel()

	query := SellerRequests()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSellerRequestsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerRequestsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SellerRequests().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerRequestsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerRequestSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerRequestsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SellerRequestExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SellerRequest exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SellerRequestExists to return true, but got false.")
	}
}

func testSellerRequestsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sellerRequestFound, err := FindSellerRequest(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sellerRequestFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSellerRequestsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SellerRequests().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSellerRequestsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SellerRequests().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSellerRequestsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sellerRequestOne := &SellerRequest{}
	sellerRequestTwo := &SellerRequest{}
	if err = randomize.Struct(seed, sellerRequestOne, sellerRequestDBTypes, false, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerRequestTwo, sellerRequestDBTypes, false, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSellerRequestsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sellerRequestOne := &SellerRequest{}
	sellerRequestTwo := &SellerRequest{}
	if err = randomize.Struct(seed, sellerRequestOne, sellerRequestDBTypes, false, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerRequestTwo, sellerRequestDBTypes, false, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerRequestOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerRequestTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sellerRequestBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerRequest) error {
	*o = SellerRequest{}
	return nil
}

func sellerRequestAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerRequest) error {
	*o = SellerRequest{}
	return nil
}

func sellerRequestAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SellerRequest) error {
	*o = SellerRequest{}
	return nil
}

func sellerRequestBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerRequest) error {
	*o = SellerRequest{}
	return nil
}

func sellerRequestAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerRequest) error {
	*o = SellerRequest{}
	return nil
}

func sellerRequestBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerRequest) error {
	*o = SellerRequest{}
	return nil
}

func sellerRequestAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerRequest) error {
	*o = SellerRequest{}
	return nil
}

func sellerRequestBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerRequest) error {
	*o = SellerRequest{}
	return nil
}

func sellerRequestAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerRequest) error {
	*o = SellerRequest{}
	return nil
}

func testSellerRequestsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SellerRequest{}
	o := &SellerRequest{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SellerRequest object: %s", err)
	}

	AddSellerRequestHook(boil.BeforeInsertHook, sellerRequestBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sellerRequestBeforeInsertHooks = []SellerRequestHook{}

	AddSellerRequestHook(boil.AfterInsertHook, sellerRequestAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sellerRequestAfterInsertHooks = []SellerRequestHook{}

	AddSellerRequestHook(boil.AfterSelectHook, sellerRequestAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sellerRequestAfterSelectHooks = []SellerRequestHook{}

	AddSellerRequestHook(boil.BeforeUpdateHook, sellerRequestBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sellerRequestBeforeUpdateHooks = []SellerRequestHook{}

	AddSellerRequestHook(boil.AfterUpdateHook, sellerRequestAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sellerRequestAfterUpdateHooks = []SellerRequestHook{}

	AddSellerRequestHook(boil.BeforeDeleteHook, sellerRequestBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sellerRequestBeforeDeleteHooks = []SellerRequestHook{}

	AddSellerRequestHook(boil.AfterDeleteHook, sellerRequestAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sellerRequestAfterDeleteHooks = []SellerRequestHook{}

	AddSellerRequestHook(boil.BeforeUpsertHook, sellerRequestBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sellerRequestBeforeUpsertHooks = []SellerRequestHook{}

	AddSellerRequestHook(boil.AfterUpsertHook, sellerRequestAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sellerRequestAfterUpsertHooks = []SellerRequestHook{}
}

func testSellerRequestsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerRequestsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sellerRequestColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SellerRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerRequestToOneShopCategoryUsingShopCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerRequest
	var foreign ShopCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerRequestDBTypes, false, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shopCategoryDBTypes, false, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ShopCategoryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShopCategory().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerRequestSlice{&local}
	if err = local.L.LoadShopCategory(ctx, tx, false, (*[]*SellerRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShopCategory == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShopCategory = nil
	if err = local.L.LoadShopCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShopCategory == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerRequestToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerRequest
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerRequestSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*SellerRequest)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerRequestToOneSetOpShopCategoryUsingShopCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerRequest
	var b, c ShopCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerRequestDBTypes, false, strmangle.SetComplement(sellerRequestPrimaryKeyColumns, sellerRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shopCategoryDBTypes, false, strmangle.SetComplement(shopCategoryPrimaryKeyColumns, shopCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shopCategoryDBTypes, false, strmangle.SetComplement(shopCategoryPrimaryKeyColumns, shopCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShopCategory{&b, &c} {
		err = a.SetShopCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShopCategory != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerRequests[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ShopCategoryID != x.ID {
			t.Error("foreign key was wrong value", a.ShopCategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShopCategoryID))
		reflect.Indirect(reflect.ValueOf(&a.ShopCategoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ShopCategoryID != x.ID {
			t.Error("foreign key was wrong value", a.ShopCategoryID, x.ID)
		}
	}
}
func testSellerRequestToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerRequest
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerRequestDBTypes, false, strmangle.SetComplement(sellerRequestPrimaryKeyColumns, sellerRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerRequests[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testSellerRequestToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerRequest
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerRequestDBTypes, false, strmangle.SetComplement(sellerRequestPrimaryKeyColumns, sellerRequestColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SellerRequests) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSellerRequestsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerRequestsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerRequestSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerRequestsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerRequests().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sellerRequestDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `SellerName`: `text`, `ShopName`: `text`, `ContactNumber`: `character varying`, `ShopLocation`: `text`, `TaxID`: `text`, `Accepted`: `boolean`, `UserID`: `bigint`, `ShopCategoryID`: `bigint`}
	_                    = bytes.MinRead
)

func testSellerRequestsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sellerRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sellerRequestAllColumns) == len(sellerRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSellerRequestsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sellerRequestAllColumns) == len(sellerRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerRequest{}
	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerRequestDBTypes, true, sellerRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sellerRequestAllColumns, sellerRequestPrimaryKeyColumns) {
		fields = sellerRequestAllColumns
	} else {
		fields = strmangle.SetComplement(
			sellerRequestAllColumns,
			sellerRequestPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SellerRequestSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSellerRequestsUpsert(t *testing.T) {
	t.Parallel()

	if len(sellerRequestAllColumns) == len(sellerRequestPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SellerRequest{}
	if err = randomize.Struct(seed, &o, sellerRequestDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerRequest: %s", err)
	}

	count, err := SellerRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sellerRequestDBTypes, false, sellerRequestPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerRequest struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerRequest: %s", err)
	}

	count, err = SellerRequests().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
