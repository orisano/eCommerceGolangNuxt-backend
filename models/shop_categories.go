// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ShopCategory is an object representing the database table.
type ShopCategory struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name      null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Slug      null.String `boil:"slug" json:"slug,omitempty" toml:"slug" yaml:"slug,omitempty"`
	Image     null.String `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`

	R *shopCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L shopCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ShopCategoryColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	Name      string
	Slug      string
	Image     string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	Name:      "name",
	Slug:      "slug",
	Image:     "image",
}

var ShopCategoryTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	Name      string
	Slug      string
	Image     string
}{
	ID:        "shop_categories.id",
	CreatedAt: "shop_categories.created_at",
	UpdatedAt: "shop_categories.updated_at",
	DeletedAt: "shop_categories.deleted_at",
	Name:      "shop_categories.name",
	Slug:      "shop_categories.slug",
	Image:     "shop_categories.image",
}

// Generated where

var ShopCategoryWhere = struct {
	ID        whereHelperint64
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	DeletedAt whereHelpernull_Time
	Name      whereHelpernull_String
	Slug      whereHelpernull_String
	Image     whereHelpernull_String
}{
	ID:        whereHelperint64{field: "\"shop_categories\".\"id\""},
	CreatedAt: whereHelpernull_Time{field: "\"shop_categories\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"shop_categories\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"shop_categories\".\"deleted_at\""},
	Name:      whereHelpernull_String{field: "\"shop_categories\".\"name\""},
	Slug:      whereHelpernull_String{field: "\"shop_categories\".\"slug\""},
	Image:     whereHelpernull_String{field: "\"shop_categories\".\"image\""},
}

// ShopCategoryRels is where relationship names are stored.
var ShopCategoryRels = struct {
	Categories     string
	SellerRequests string
	SellerShops    string
}{
	Categories:     "Categories",
	SellerRequests: "SellerRequests",
	SellerShops:    "SellerShops",
}

// shopCategoryR is where relationships are stored.
type shopCategoryR struct {
	Categories     CategorySlice      `boil:"Categories" json:"Categories" toml:"Categories" yaml:"Categories"`
	SellerRequests SellerRequestSlice `boil:"SellerRequests" json:"SellerRequests" toml:"SellerRequests" yaml:"SellerRequests"`
	SellerShops    SellerShopSlice    `boil:"SellerShops" json:"SellerShops" toml:"SellerShops" yaml:"SellerShops"`
}

// NewStruct creates a new relationship struct
func (*shopCategoryR) NewStruct() *shopCategoryR {
	return &shopCategoryR{}
}

// shopCategoryL is where Load methods for each relationship are stored.
type shopCategoryL struct{}

var (
	shopCategoryAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name", "slug", "image"}
	shopCategoryColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "name", "slug", "image"}
	shopCategoryColumnsWithDefault    = []string{"id"}
	shopCategoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// ShopCategorySlice is an alias for a slice of pointers to ShopCategory.
	// This should almost always be used instead of []ShopCategory.
	ShopCategorySlice []*ShopCategory
	// ShopCategoryHook is the signature for custom ShopCategory hook methods
	ShopCategoryHook func(context.Context, boil.ContextExecutor, *ShopCategory) error

	shopCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	shopCategoryType                 = reflect.TypeOf(&ShopCategory{})
	shopCategoryMapping              = queries.MakeStructMapping(shopCategoryType)
	shopCategoryPrimaryKeyMapping, _ = queries.BindMapping(shopCategoryType, shopCategoryMapping, shopCategoryPrimaryKeyColumns)
	shopCategoryInsertCacheMut       sync.RWMutex
	shopCategoryInsertCache          = make(map[string]insertCache)
	shopCategoryUpdateCacheMut       sync.RWMutex
	shopCategoryUpdateCache          = make(map[string]updateCache)
	shopCategoryUpsertCacheMut       sync.RWMutex
	shopCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var shopCategoryBeforeInsertHooks []ShopCategoryHook
var shopCategoryBeforeUpdateHooks []ShopCategoryHook
var shopCategoryBeforeDeleteHooks []ShopCategoryHook
var shopCategoryBeforeUpsertHooks []ShopCategoryHook

var shopCategoryAfterInsertHooks []ShopCategoryHook
var shopCategoryAfterSelectHooks []ShopCategoryHook
var shopCategoryAfterUpdateHooks []ShopCategoryHook
var shopCategoryAfterDeleteHooks []ShopCategoryHook
var shopCategoryAfterUpsertHooks []ShopCategoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ShopCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ShopCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ShopCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ShopCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ShopCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ShopCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ShopCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ShopCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ShopCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range shopCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddShopCategoryHook registers your hook function for all future operations.
func AddShopCategoryHook(hookPoint boil.HookPoint, shopCategoryHook ShopCategoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		shopCategoryBeforeInsertHooks = append(shopCategoryBeforeInsertHooks, shopCategoryHook)
	case boil.BeforeUpdateHook:
		shopCategoryBeforeUpdateHooks = append(shopCategoryBeforeUpdateHooks, shopCategoryHook)
	case boil.BeforeDeleteHook:
		shopCategoryBeforeDeleteHooks = append(shopCategoryBeforeDeleteHooks, shopCategoryHook)
	case boil.BeforeUpsertHook:
		shopCategoryBeforeUpsertHooks = append(shopCategoryBeforeUpsertHooks, shopCategoryHook)
	case boil.AfterInsertHook:
		shopCategoryAfterInsertHooks = append(shopCategoryAfterInsertHooks, shopCategoryHook)
	case boil.AfterSelectHook:
		shopCategoryAfterSelectHooks = append(shopCategoryAfterSelectHooks, shopCategoryHook)
	case boil.AfterUpdateHook:
		shopCategoryAfterUpdateHooks = append(shopCategoryAfterUpdateHooks, shopCategoryHook)
	case boil.AfterDeleteHook:
		shopCategoryAfterDeleteHooks = append(shopCategoryAfterDeleteHooks, shopCategoryHook)
	case boil.AfterUpsertHook:
		shopCategoryAfterUpsertHooks = append(shopCategoryAfterUpsertHooks, shopCategoryHook)
	}
}

// One returns a single shopCategory record from the query.
func (q shopCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ShopCategory, error) {
	o := &ShopCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for shop_categories")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ShopCategory records from the query.
func (q shopCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (ShopCategorySlice, error) {
	var o []*ShopCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ShopCategory slice")
	}

	if len(shopCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ShopCategory records in the query.
func (q shopCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count shop_categories rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q shopCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if shop_categories exists")
	}

	return count > 0, nil
}

// Categories retrieves all the category's Categories with an executor.
func (o *ShopCategory) Categories(mods ...qm.QueryMod) categoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"categories\".\"shop_category_id\"=?", o.ID),
	)

	query := Categories(queryMods...)
	queries.SetFrom(query.Query, "\"categories\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"categories\".*"})
	}

	return query
}

// SellerRequests retrieves all the seller_request's SellerRequests with an executor.
func (o *ShopCategory) SellerRequests(mods ...qm.QueryMod) sellerRequestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"seller_requests\".\"shop_category_id\"=?", o.ID),
	)

	query := SellerRequests(queryMods...)
	queries.SetFrom(query.Query, "\"seller_requests\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"seller_requests\".*"})
	}

	return query
}

// SellerShops retrieves all the seller_shop's SellerShops with an executor.
func (o *ShopCategory) SellerShops(mods ...qm.QueryMod) sellerShopQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"seller_shops\".\"shop_category_id\"=?", o.ID),
	)

	query := SellerShops(queryMods...)
	queries.SetFrom(query.Query, "\"seller_shops\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"seller_shops\".*"})
	}

	return query
}

// LoadCategories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shopCategoryL) LoadCategories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShopCategory interface{}, mods queries.Applicator) error {
	var slice []*ShopCategory
	var object *ShopCategory

	if singular {
		object = maybeShopCategory.(*ShopCategory)
	} else {
		slice = *maybeShopCategory.(*[]*ShopCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shopCategoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shopCategoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.shop_category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load categories")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice categories")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Categories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &categoryR{}
			}
			foreign.R.ShopCategory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShopCategoryID {
				local.R.Categories = append(local.R.Categories, foreign)
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.ShopCategory = local
				break
			}
		}
	}

	return nil
}

// LoadSellerRequests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shopCategoryL) LoadSellerRequests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShopCategory interface{}, mods queries.Applicator) error {
	var slice []*ShopCategory
	var object *ShopCategory

	if singular {
		object = maybeShopCategory.(*ShopCategory)
	} else {
		slice = *maybeShopCategory.(*[]*ShopCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shopCategoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shopCategoryR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_requests`),
		qm.WhereIn(`seller_requests.shop_category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seller_requests")
	}

	var resultSlice []*SellerRequest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seller_requests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seller_requests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_requests")
	}

	if len(sellerRequestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SellerRequests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sellerRequestR{}
			}
			foreign.R.ShopCategory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ShopCategoryID {
				local.R.SellerRequests = append(local.R.SellerRequests, foreign)
				if foreign.R == nil {
					foreign.R = &sellerRequestR{}
				}
				foreign.R.ShopCategory = local
				break
			}
		}
	}

	return nil
}

// LoadSellerShops allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (shopCategoryL) LoadSellerShops(ctx context.Context, e boil.ContextExecutor, singular bool, maybeShopCategory interface{}, mods queries.Applicator) error {
	var slice []*ShopCategory
	var object *ShopCategory

	if singular {
		object = maybeShopCategory.(*ShopCategory)
	} else {
		slice = *maybeShopCategory.(*[]*ShopCategory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &shopCategoryR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &shopCategoryR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_shops`),
		qm.WhereIn(`seller_shops.shop_category_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load seller_shops")
	}

	var resultSlice []*SellerShop
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice seller_shops")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on seller_shops")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_shops")
	}

	if len(sellerShopAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SellerShops = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sellerShopR{}
			}
			foreign.R.ShopCategory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ShopCategoryID) {
				local.R.SellerShops = append(local.R.SellerShops, foreign)
				if foreign.R == nil {
					foreign.R = &sellerShopR{}
				}
				foreign.R.ShopCategory = local
				break
			}
		}
	}

	return nil
}

// AddCategories adds the given related objects to the existing relationships
// of the shop_category, optionally inserting them as new records.
// Appends related to o.R.Categories.
// Sets related.R.ShopCategory appropriately.
func (o *ShopCategory) AddCategories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Category) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShopCategoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"categories\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shop_category_id"}),
				strmangle.WhereClause("\"", "\"", 2, categoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShopCategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shopCategoryR{
			Categories: related,
		}
	} else {
		o.R.Categories = append(o.R.Categories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoryR{
				ShopCategory: o,
			}
		} else {
			rel.R.ShopCategory = o
		}
	}
	return nil
}

// AddSellerRequests adds the given related objects to the existing relationships
// of the shop_category, optionally inserting them as new records.
// Appends related to o.R.SellerRequests.
// Sets related.R.ShopCategory appropriately.
func (o *ShopCategory) AddSellerRequests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerRequest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ShopCategoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"seller_requests\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shop_category_id"}),
				strmangle.WhereClause("\"", "\"", 2, sellerRequestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ShopCategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &shopCategoryR{
			SellerRequests: related,
		}
	} else {
		o.R.SellerRequests = append(o.R.SellerRequests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sellerRequestR{
				ShopCategory: o,
			}
		} else {
			rel.R.ShopCategory = o
		}
	}
	return nil
}

// AddSellerShops adds the given related objects to the existing relationships
// of the shop_category, optionally inserting them as new records.
// Appends related to o.R.SellerShops.
// Sets related.R.ShopCategory appropriately.
func (o *ShopCategory) AddSellerShops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerShop) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ShopCategoryID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"seller_shops\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"shop_category_id"}),
				strmangle.WhereClause("\"", "\"", 2, sellerShopPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ShopCategoryID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &shopCategoryR{
			SellerShops: related,
		}
	} else {
		o.R.SellerShops = append(o.R.SellerShops, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sellerShopR{
				ShopCategory: o,
			}
		} else {
			rel.R.ShopCategory = o
		}
	}
	return nil
}

// SetSellerShops removes all previously related items of the
// shop_category replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ShopCategory's SellerShops accordingly.
// Replaces o.R.SellerShops with related.
// Sets related.R.ShopCategory's SellerShops accordingly.
func (o *ShopCategory) SetSellerShops(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SellerShop) error {
	query := "update \"seller_shops\" set \"shop_category_id\" = null where \"shop_category_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SellerShops {
			queries.SetScanner(&rel.ShopCategoryID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ShopCategory = nil
		}

		o.R.SellerShops = nil
	}
	return o.AddSellerShops(ctx, exec, insert, related...)
}

// RemoveSellerShops relationships from objects passed in.
// Removes related items from R.SellerShops (uses pointer comparison, removal does not keep order)
// Sets related.R.ShopCategory.
func (o *ShopCategory) RemoveSellerShops(ctx context.Context, exec boil.ContextExecutor, related ...*SellerShop) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ShopCategoryID, nil)
		if rel.R != nil {
			rel.R.ShopCategory = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("shop_category_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SellerShops {
			if rel != ri {
				continue
			}

			ln := len(o.R.SellerShops)
			if ln > 1 && i < ln-1 {
				o.R.SellerShops[i] = o.R.SellerShops[ln-1]
			}
			o.R.SellerShops = o.R.SellerShops[:ln-1]
			break
		}
	}

	return nil
}

// ShopCategories retrieves all the records using an executor.
func ShopCategories(mods ...qm.QueryMod) shopCategoryQuery {
	mods = append(mods, qm.From("\"shop_categories\""))
	return shopCategoryQuery{NewQuery(mods...)}
}

// FindShopCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindShopCategory(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ShopCategory, error) {
	shopCategoryObj := &ShopCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"shop_categories\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, shopCategoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from shop_categories")
	}

	if err = shopCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return shopCategoryObj, err
	}

	return shopCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ShopCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shop_categories provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	shopCategoryInsertCacheMut.RLock()
	cache, cached := shopCategoryInsertCache[key]
	shopCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			shopCategoryAllColumns,
			shopCategoryColumnsWithDefault,
			shopCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(shopCategoryType, shopCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(shopCategoryType, shopCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"shop_categories\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"shop_categories\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into shop_categories")
	}

	if !cached {
		shopCategoryInsertCacheMut.Lock()
		shopCategoryInsertCache[key] = cache
		shopCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ShopCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ShopCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	shopCategoryUpdateCacheMut.RLock()
	cache, cached := shopCategoryUpdateCache[key]
	shopCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			shopCategoryAllColumns,
			shopCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update shop_categories, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"shop_categories\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, shopCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(shopCategoryType, shopCategoryMapping, append(wl, shopCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update shop_categories row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for shop_categories")
	}

	if !cached {
		shopCategoryUpdateCacheMut.Lock()
		shopCategoryUpdateCache[key] = cache
		shopCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q shopCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for shop_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for shop_categories")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ShopCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"shop_categories\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, shopCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in shopCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all shopCategory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ShopCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no shop_categories provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(shopCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	shopCategoryUpsertCacheMut.RLock()
	cache, cached := shopCategoryUpsertCache[key]
	shopCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			shopCategoryAllColumns,
			shopCategoryColumnsWithDefault,
			shopCategoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			shopCategoryAllColumns,
			shopCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert shop_categories, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(shopCategoryPrimaryKeyColumns))
			copy(conflict, shopCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"shop_categories\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(shopCategoryType, shopCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(shopCategoryType, shopCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert shop_categories")
	}

	if !cached {
		shopCategoryUpsertCacheMut.Lock()
		shopCategoryUpsertCache[key] = cache
		shopCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ShopCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ShopCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ShopCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), shopCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"shop_categories\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from shop_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for shop_categories")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q shopCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no shopCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shop_categories")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shop_categories")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ShopCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(shopCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"shop_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from shopCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for shop_categories")
	}

	if len(shopCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ShopCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindShopCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ShopCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ShopCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), shopCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"shop_categories\".* FROM \"shop_categories\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, shopCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ShopCategorySlice")
	}

	*o = slice

	return nil
}

// ShopCategoryExists checks if the ShopCategory row exists.
func ShopCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"shop_categories\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if shop_categories exists")
	}

	return exists, nil
}
