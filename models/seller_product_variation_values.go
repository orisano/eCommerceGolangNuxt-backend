// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SellerProductVariationValue is an object representing the database table.
type SellerProductVariationValue struct {
	ID                       int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt                null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt                null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt                null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name                     null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	Description              null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	SellerProductVariationID int64       `boil:"seller_product_variation_id" json:"seller_product_variation_id" toml:"seller_product_variation_id" yaml:"seller_product_variation_id"`
	AttributeID              int64       `boil:"attribute_id" json:"attribute_id" toml:"attribute_id" yaml:"attribute_id"`

	R *sellerProductVariationValueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sellerProductVariationValueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SellerProductVariationValueColumns = struct {
	ID                       string
	CreatedAt                string
	UpdatedAt                string
	DeletedAt                string
	Name                     string
	Description              string
	SellerProductVariationID string
	AttributeID              string
}{
	ID:                       "id",
	CreatedAt:                "created_at",
	UpdatedAt:                "updated_at",
	DeletedAt:                "deleted_at",
	Name:                     "name",
	Description:              "description",
	SellerProductVariationID: "seller_product_variation_id",
	AttributeID:              "attribute_id",
}

var SellerProductVariationValueTableColumns = struct {
	ID                       string
	CreatedAt                string
	UpdatedAt                string
	DeletedAt                string
	Name                     string
	Description              string
	SellerProductVariationID string
	AttributeID              string
}{
	ID:                       "seller_product_variation_values.id",
	CreatedAt:                "seller_product_variation_values.created_at",
	UpdatedAt:                "seller_product_variation_values.updated_at",
	DeletedAt:                "seller_product_variation_values.deleted_at",
	Name:                     "seller_product_variation_values.name",
	Description:              "seller_product_variation_values.description",
	SellerProductVariationID: "seller_product_variation_values.seller_product_variation_id",
	AttributeID:              "seller_product_variation_values.attribute_id",
}

// Generated where

var SellerProductVariationValueWhere = struct {
	ID                       whereHelperint64
	CreatedAt                whereHelpernull_Time
	UpdatedAt                whereHelpernull_Time
	DeletedAt                whereHelpernull_Time
	Name                     whereHelpernull_String
	Description              whereHelpernull_String
	SellerProductVariationID whereHelperint64
	AttributeID              whereHelperint64
}{
	ID:                       whereHelperint64{field: "\"seller_product_variation_values\".\"id\""},
	CreatedAt:                whereHelpernull_Time{field: "\"seller_product_variation_values\".\"created_at\""},
	UpdatedAt:                whereHelpernull_Time{field: "\"seller_product_variation_values\".\"updated_at\""},
	DeletedAt:                whereHelpernull_Time{field: "\"seller_product_variation_values\".\"deleted_at\""},
	Name:                     whereHelpernull_String{field: "\"seller_product_variation_values\".\"name\""},
	Description:              whereHelpernull_String{field: "\"seller_product_variation_values\".\"description\""},
	SellerProductVariationID: whereHelperint64{field: "\"seller_product_variation_values\".\"seller_product_variation_id\""},
	AttributeID:              whereHelperint64{field: "\"seller_product_variation_values\".\"attribute_id\""},
}

// SellerProductVariationValueRels is where relationship names are stored.
var SellerProductVariationValueRels = struct {
	Attribute              string
	SellerProductVariation string
}{
	Attribute:              "Attribute",
	SellerProductVariation: "SellerProductVariation",
}

// sellerProductVariationValueR is where relationships are stored.
type sellerProductVariationValueR struct {
	Attribute              *Attribute              `boil:"Attribute" json:"Attribute" toml:"Attribute" yaml:"Attribute"`
	SellerProductVariation *SellerProductVariation `boil:"SellerProductVariation" json:"SellerProductVariation" toml:"SellerProductVariation" yaml:"SellerProductVariation"`
}

// NewStruct creates a new relationship struct
func (*sellerProductVariationValueR) NewStruct() *sellerProductVariationValueR {
	return &sellerProductVariationValueR{}
}

// sellerProductVariationValueL is where Load methods for each relationship are stored.
type sellerProductVariationValueL struct{}

var (
	sellerProductVariationValueAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name", "description", "seller_product_variation_id", "attribute_id"}
	sellerProductVariationValueColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "name", "description", "seller_product_variation_id", "attribute_id"}
	sellerProductVariationValueColumnsWithDefault    = []string{"id"}
	sellerProductVariationValuePrimaryKeyColumns     = []string{"id"}
)

type (
	// SellerProductVariationValueSlice is an alias for a slice of pointers to SellerProductVariationValue.
	// This should almost always be used instead of []SellerProductVariationValue.
	SellerProductVariationValueSlice []*SellerProductVariationValue
	// SellerProductVariationValueHook is the signature for custom SellerProductVariationValue hook methods
	SellerProductVariationValueHook func(context.Context, boil.ContextExecutor, *SellerProductVariationValue) error

	sellerProductVariationValueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sellerProductVariationValueType                 = reflect.TypeOf(&SellerProductVariationValue{})
	sellerProductVariationValueMapping              = queries.MakeStructMapping(sellerProductVariationValueType)
	sellerProductVariationValuePrimaryKeyMapping, _ = queries.BindMapping(sellerProductVariationValueType, sellerProductVariationValueMapping, sellerProductVariationValuePrimaryKeyColumns)
	sellerProductVariationValueInsertCacheMut       sync.RWMutex
	sellerProductVariationValueInsertCache          = make(map[string]insertCache)
	sellerProductVariationValueUpdateCacheMut       sync.RWMutex
	sellerProductVariationValueUpdateCache          = make(map[string]updateCache)
	sellerProductVariationValueUpsertCacheMut       sync.RWMutex
	sellerProductVariationValueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sellerProductVariationValueBeforeInsertHooks []SellerProductVariationValueHook
var sellerProductVariationValueBeforeUpdateHooks []SellerProductVariationValueHook
var sellerProductVariationValueBeforeDeleteHooks []SellerProductVariationValueHook
var sellerProductVariationValueBeforeUpsertHooks []SellerProductVariationValueHook

var sellerProductVariationValueAfterInsertHooks []SellerProductVariationValueHook
var sellerProductVariationValueAfterSelectHooks []SellerProductVariationValueHook
var sellerProductVariationValueAfterUpdateHooks []SellerProductVariationValueHook
var sellerProductVariationValueAfterDeleteHooks []SellerProductVariationValueHook
var sellerProductVariationValueAfterUpsertHooks []SellerProductVariationValueHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SellerProductVariationValue) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationValueBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SellerProductVariationValue) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationValueBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SellerProductVariationValue) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationValueBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SellerProductVariationValue) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationValueBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SellerProductVariationValue) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationValueAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SellerProductVariationValue) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationValueAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SellerProductVariationValue) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationValueAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SellerProductVariationValue) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationValueAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SellerProductVariationValue) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sellerProductVariationValueAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSellerProductVariationValueHook registers your hook function for all future operations.
func AddSellerProductVariationValueHook(hookPoint boil.HookPoint, sellerProductVariationValueHook SellerProductVariationValueHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		sellerProductVariationValueBeforeInsertHooks = append(sellerProductVariationValueBeforeInsertHooks, sellerProductVariationValueHook)
	case boil.BeforeUpdateHook:
		sellerProductVariationValueBeforeUpdateHooks = append(sellerProductVariationValueBeforeUpdateHooks, sellerProductVariationValueHook)
	case boil.BeforeDeleteHook:
		sellerProductVariationValueBeforeDeleteHooks = append(sellerProductVariationValueBeforeDeleteHooks, sellerProductVariationValueHook)
	case boil.BeforeUpsertHook:
		sellerProductVariationValueBeforeUpsertHooks = append(sellerProductVariationValueBeforeUpsertHooks, sellerProductVariationValueHook)
	case boil.AfterInsertHook:
		sellerProductVariationValueAfterInsertHooks = append(sellerProductVariationValueAfterInsertHooks, sellerProductVariationValueHook)
	case boil.AfterSelectHook:
		sellerProductVariationValueAfterSelectHooks = append(sellerProductVariationValueAfterSelectHooks, sellerProductVariationValueHook)
	case boil.AfterUpdateHook:
		sellerProductVariationValueAfterUpdateHooks = append(sellerProductVariationValueAfterUpdateHooks, sellerProductVariationValueHook)
	case boil.AfterDeleteHook:
		sellerProductVariationValueAfterDeleteHooks = append(sellerProductVariationValueAfterDeleteHooks, sellerProductVariationValueHook)
	case boil.AfterUpsertHook:
		sellerProductVariationValueAfterUpsertHooks = append(sellerProductVariationValueAfterUpsertHooks, sellerProductVariationValueHook)
	}
}

// One returns a single sellerProductVariationValue record from the query.
func (q sellerProductVariationValueQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SellerProductVariationValue, error) {
	o := &SellerProductVariationValue{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for seller_product_variation_values")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SellerProductVariationValue records from the query.
func (q sellerProductVariationValueQuery) All(ctx context.Context, exec boil.ContextExecutor) (SellerProductVariationValueSlice, error) {
	var o []*SellerProductVariationValue

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SellerProductVariationValue slice")
	}

	if len(sellerProductVariationValueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SellerProductVariationValue records in the query.
func (q sellerProductVariationValueQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count seller_product_variation_values rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sellerProductVariationValueQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if seller_product_variation_values exists")
	}

	return count > 0, nil
}

// Attribute pointed to by the foreign key.
func (o *SellerProductVariationValue) Attribute(mods ...qm.QueryMod) attributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AttributeID),
	}

	queryMods = append(queryMods, mods...)

	query := Attributes(queryMods...)
	queries.SetFrom(query.Query, "\"attributes\"")

	return query
}

// SellerProductVariation pointed to by the foreign key.
func (o *SellerProductVariationValue) SellerProductVariation(mods ...qm.QueryMod) sellerProductVariationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SellerProductVariationID),
	}

	queryMods = append(queryMods, mods...)

	query := SellerProductVariations(queryMods...)
	queries.SetFrom(query.Query, "\"seller_product_variations\"")

	return query
}

// LoadAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sellerProductVariationValueL) LoadAttribute(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProductVariationValue interface{}, mods queries.Applicator) error {
	var slice []*SellerProductVariationValue
	var object *SellerProductVariationValue

	if singular {
		object = maybeSellerProductVariationValue.(*SellerProductVariationValue)
	} else {
		slice = *maybeSellerProductVariationValue.(*[]*SellerProductVariationValue)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductVariationValueR{}
		}
		args = append(args, object.AttributeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductVariationValueR{}
			}

			for _, a := range args {
				if a == obj.AttributeID {
					continue Outer
				}
			}

			args = append(args, obj.AttributeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`attributes`),
		qm.WhereIn(`attributes.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Attribute")
	}

	var resultSlice []*Attribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Attribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attributes")
	}

	if len(sellerProductVariationValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Attribute = foreign
		if foreign.R == nil {
			foreign.R = &attributeR{}
		}
		foreign.R.SellerProductVariationValues = append(foreign.R.SellerProductVariationValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AttributeID == foreign.ID {
				local.R.Attribute = foreign
				if foreign.R == nil {
					foreign.R = &attributeR{}
				}
				foreign.R.SellerProductVariationValues = append(foreign.R.SellerProductVariationValues, local)
				break
			}
		}
	}

	return nil
}

// LoadSellerProductVariation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sellerProductVariationValueL) LoadSellerProductVariation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSellerProductVariationValue interface{}, mods queries.Applicator) error {
	var slice []*SellerProductVariationValue
	var object *SellerProductVariationValue

	if singular {
		object = maybeSellerProductVariationValue.(*SellerProductVariationValue)
	} else {
		slice = *maybeSellerProductVariationValue.(*[]*SellerProductVariationValue)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sellerProductVariationValueR{}
		}
		args = append(args, object.SellerProductVariationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sellerProductVariationValueR{}
			}

			for _, a := range args {
				if a == obj.SellerProductVariationID {
					continue Outer
				}
			}

			args = append(args, obj.SellerProductVariationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_product_variations`),
		qm.WhereIn(`seller_product_variations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SellerProductVariation")
	}

	var resultSlice []*SellerProductVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SellerProductVariation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seller_product_variations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_product_variations")
	}

	if len(sellerProductVariationValueAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerProductVariation = foreign
		if foreign.R == nil {
			foreign.R = &sellerProductVariationR{}
		}
		foreign.R.SellerProductVariationValues = append(foreign.R.SellerProductVariationValues, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SellerProductVariationID == foreign.ID {
				local.R.SellerProductVariation = foreign
				if foreign.R == nil {
					foreign.R = &sellerProductVariationR{}
				}
				foreign.R.SellerProductVariationValues = append(foreign.R.SellerProductVariationValues, local)
				break
			}
		}
	}

	return nil
}

// SetAttribute of the sellerProductVariationValue to the related item.
// Sets o.R.Attribute to related.
// Adds o to related.R.SellerProductVariationValues.
func (o *SellerProductVariationValue) SetAttribute(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Attribute) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"seller_product_variation_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"attribute_id"}),
		strmangle.WhereClause("\"", "\"", 2, sellerProductVariationValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AttributeID = related.ID
	if o.R == nil {
		o.R = &sellerProductVariationValueR{
			Attribute: related,
		}
	} else {
		o.R.Attribute = related
	}

	if related.R == nil {
		related.R = &attributeR{
			SellerProductVariationValues: SellerProductVariationValueSlice{o},
		}
	} else {
		related.R.SellerProductVariationValues = append(related.R.SellerProductVariationValues, o)
	}

	return nil
}

// SetSellerProductVariation of the sellerProductVariationValue to the related item.
// Sets o.R.SellerProductVariation to related.
// Adds o to related.R.SellerProductVariationValues.
func (o *SellerProductVariationValue) SetSellerProductVariation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SellerProductVariation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"seller_product_variation_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_variation_id"}),
		strmangle.WhereClause("\"", "\"", 2, sellerProductVariationValuePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SellerProductVariationID = related.ID
	if o.R == nil {
		o.R = &sellerProductVariationValueR{
			SellerProductVariation: related,
		}
	} else {
		o.R.SellerProductVariation = related
	}

	if related.R == nil {
		related.R = &sellerProductVariationR{
			SellerProductVariationValues: SellerProductVariationValueSlice{o},
		}
	} else {
		related.R.SellerProductVariationValues = append(related.R.SellerProductVariationValues, o)
	}

	return nil
}

// SellerProductVariationValues retrieves all the records using an executor.
func SellerProductVariationValues(mods ...qm.QueryMod) sellerProductVariationValueQuery {
	mods = append(mods, qm.From("\"seller_product_variation_values\""))
	return sellerProductVariationValueQuery{NewQuery(mods...)}
}

// FindSellerProductVariationValue retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSellerProductVariationValue(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SellerProductVariationValue, error) {
	sellerProductVariationValueObj := &SellerProductVariationValue{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"seller_product_variation_values\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sellerProductVariationValueObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from seller_product_variation_values")
	}

	if err = sellerProductVariationValueObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sellerProductVariationValueObj, err
	}

	return sellerProductVariationValueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SellerProductVariationValue) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seller_product_variation_values provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sellerProductVariationValueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sellerProductVariationValueInsertCacheMut.RLock()
	cache, cached := sellerProductVariationValueInsertCache[key]
	sellerProductVariationValueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sellerProductVariationValueAllColumns,
			sellerProductVariationValueColumnsWithDefault,
			sellerProductVariationValueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sellerProductVariationValueType, sellerProductVariationValueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sellerProductVariationValueType, sellerProductVariationValueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"seller_product_variation_values\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"seller_product_variation_values\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into seller_product_variation_values")
	}

	if !cached {
		sellerProductVariationValueInsertCacheMut.Lock()
		sellerProductVariationValueInsertCache[key] = cache
		sellerProductVariationValueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SellerProductVariationValue.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SellerProductVariationValue) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sellerProductVariationValueUpdateCacheMut.RLock()
	cache, cached := sellerProductVariationValueUpdateCache[key]
	sellerProductVariationValueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sellerProductVariationValueAllColumns,
			sellerProductVariationValuePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update seller_product_variation_values, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"seller_product_variation_values\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, sellerProductVariationValuePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sellerProductVariationValueType, sellerProductVariationValueMapping, append(wl, sellerProductVariationValuePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update seller_product_variation_values row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for seller_product_variation_values")
	}

	if !cached {
		sellerProductVariationValueUpdateCacheMut.Lock()
		sellerProductVariationValueUpdateCache[key] = cache
		sellerProductVariationValueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sellerProductVariationValueQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for seller_product_variation_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for seller_product_variation_values")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SellerProductVariationValueSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerProductVariationValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"seller_product_variation_values\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, sellerProductVariationValuePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sellerProductVariationValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sellerProductVariationValue")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SellerProductVariationValue) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no seller_product_variation_values provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sellerProductVariationValueColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sellerProductVariationValueUpsertCacheMut.RLock()
	cache, cached := sellerProductVariationValueUpsertCache[key]
	sellerProductVariationValueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sellerProductVariationValueAllColumns,
			sellerProductVariationValueColumnsWithDefault,
			sellerProductVariationValueColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sellerProductVariationValueAllColumns,
			sellerProductVariationValuePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert seller_product_variation_values, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sellerProductVariationValuePrimaryKeyColumns))
			copy(conflict, sellerProductVariationValuePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"seller_product_variation_values\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sellerProductVariationValueType, sellerProductVariationValueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sellerProductVariationValueType, sellerProductVariationValueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert seller_product_variation_values")
	}

	if !cached {
		sellerProductVariationValueUpsertCacheMut.Lock()
		sellerProductVariationValueUpsertCache[key] = cache
		sellerProductVariationValueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SellerProductVariationValue record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SellerProductVariationValue) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SellerProductVariationValue provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sellerProductVariationValuePrimaryKeyMapping)
	sql := "DELETE FROM \"seller_product_variation_values\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from seller_product_variation_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for seller_product_variation_values")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sellerProductVariationValueQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sellerProductVariationValueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from seller_product_variation_values")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seller_product_variation_values")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SellerProductVariationValueSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sellerProductVariationValueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerProductVariationValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"seller_product_variation_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sellerProductVariationValuePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sellerProductVariationValue slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for seller_product_variation_values")
	}

	if len(sellerProductVariationValueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SellerProductVariationValue) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSellerProductVariationValue(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SellerProductVariationValueSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SellerProductVariationValueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sellerProductVariationValuePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"seller_product_variation_values\".* FROM \"seller_product_variation_values\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, sellerProductVariationValuePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SellerProductVariationValueSlice")
	}

	*o = slice

	return nil
}

// SellerProductVariationValueExists checks if the SellerProductVariationValue row exists.
func SellerProductVariationValueExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"seller_product_variation_values\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if seller_product_variation_values exists")
	}

	return exists, nil
}
