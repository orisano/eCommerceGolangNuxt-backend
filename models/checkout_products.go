// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CheckoutProduct is an object representing the database table.
type CheckoutProduct struct {
	ID                       int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt                null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt                null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt                null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	CheckoutID               null.Int64  `boil:"checkout_id" json:"checkout_id,omitempty" toml:"checkout_id" yaml:"checkout_id,omitempty"`
	SellerProductID          null.Int64  `boil:"seller_product_id" json:"seller_product_id,omitempty" toml:"seller_product_id" yaml:"seller_product_id,omitempty"`
	SellerProductVariationID null.Int64  `boil:"seller_product_variation_id" json:"seller_product_variation_id,omitempty" toml:"seller_product_variation_id" yaml:"seller_product_variation_id,omitempty"`
	Quantity                 null.Int64  `boil:"quantity" json:"quantity,omitempty" toml:"quantity" yaml:"quantity,omitempty"`
	SellingPrice             null.String `boil:"selling_price" json:"selling_price,omitempty" toml:"selling_price" yaml:"selling_price,omitempty"`
	OfferPrice               null.Int64  `boil:"offer_price" json:"offer_price,omitempty" toml:"offer_price" yaml:"offer_price,omitempty"`
	Received                 null.Bool   `boil:"received" json:"received,omitempty" toml:"received" yaml:"received,omitempty"`
	Status                   null.Int64  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	UserID                   null.Int64  `boil:"user_id" json:"user_id,omitempty" toml:"user_id" yaml:"user_id,omitempty"`
	SellingSellerID          null.Int64  `boil:"selling_seller_id" json:"selling_seller_id,omitempty" toml:"selling_seller_id" yaml:"selling_seller_id,omitempty"`

	R *checkoutProductR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L checkoutProductL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CheckoutProductColumns = struct {
	ID                       string
	CreatedAt                string
	UpdatedAt                string
	DeletedAt                string
	CheckoutID               string
	SellerProductID          string
	SellerProductVariationID string
	Quantity                 string
	SellingPrice             string
	OfferPrice               string
	Received                 string
	Status                   string
	UserID                   string
	SellingSellerID          string
}{
	ID:                       "id",
	CreatedAt:                "created_at",
	UpdatedAt:                "updated_at",
	DeletedAt:                "deleted_at",
	CheckoutID:               "checkout_id",
	SellerProductID:          "seller_product_id",
	SellerProductVariationID: "seller_product_variation_id",
	Quantity:                 "quantity",
	SellingPrice:             "selling_price",
	OfferPrice:               "offer_price",
	Received:                 "received",
	Status:                   "status",
	UserID:                   "user_id",
	SellingSellerID:          "selling_seller_id",
}

var CheckoutProductTableColumns = struct {
	ID                       string
	CreatedAt                string
	UpdatedAt                string
	DeletedAt                string
	CheckoutID               string
	SellerProductID          string
	SellerProductVariationID string
	Quantity                 string
	SellingPrice             string
	OfferPrice               string
	Received                 string
	Status                   string
	UserID                   string
	SellingSellerID          string
}{
	ID:                       "checkout_products.id",
	CreatedAt:                "checkout_products.created_at",
	UpdatedAt:                "checkout_products.updated_at",
	DeletedAt:                "checkout_products.deleted_at",
	CheckoutID:               "checkout_products.checkout_id",
	SellerProductID:          "checkout_products.seller_product_id",
	SellerProductVariationID: "checkout_products.seller_product_variation_id",
	Quantity:                 "checkout_products.quantity",
	SellingPrice:             "checkout_products.selling_price",
	OfferPrice:               "checkout_products.offer_price",
	Received:                 "checkout_products.received",
	Status:                   "checkout_products.status",
	UserID:                   "checkout_products.user_id",
	SellingSellerID:          "checkout_products.selling_seller_id",
}

// Generated where

type whereHelpernull_Bool struct{ field string }

func (w whereHelpernull_Bool) EQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bool) NEQ(x null.Bool) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bool) LT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bool) LTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bool) GT(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bool) GTE(x null.Bool) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bool) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bool) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CheckoutProductWhere = struct {
	ID                       whereHelperint64
	CreatedAt                whereHelpernull_Time
	UpdatedAt                whereHelpernull_Time
	DeletedAt                whereHelpernull_Time
	CheckoutID               whereHelpernull_Int64
	SellerProductID          whereHelpernull_Int64
	SellerProductVariationID whereHelpernull_Int64
	Quantity                 whereHelpernull_Int64
	SellingPrice             whereHelpernull_String
	OfferPrice               whereHelpernull_Int64
	Received                 whereHelpernull_Bool
	Status                   whereHelpernull_Int64
	UserID                   whereHelpernull_Int64
	SellingSellerID          whereHelpernull_Int64
}{
	ID:                       whereHelperint64{field: "\"checkout_products\".\"id\""},
	CreatedAt:                whereHelpernull_Time{field: "\"checkout_products\".\"created_at\""},
	UpdatedAt:                whereHelpernull_Time{field: "\"checkout_products\".\"updated_at\""},
	DeletedAt:                whereHelpernull_Time{field: "\"checkout_products\".\"deleted_at\""},
	CheckoutID:               whereHelpernull_Int64{field: "\"checkout_products\".\"checkout_id\""},
	SellerProductID:          whereHelpernull_Int64{field: "\"checkout_products\".\"seller_product_id\""},
	SellerProductVariationID: whereHelpernull_Int64{field: "\"checkout_products\".\"seller_product_variation_id\""},
	Quantity:                 whereHelpernull_Int64{field: "\"checkout_products\".\"quantity\""},
	SellingPrice:             whereHelpernull_String{field: "\"checkout_products\".\"selling_price\""},
	OfferPrice:               whereHelpernull_Int64{field: "\"checkout_products\".\"offer_price\""},
	Received:                 whereHelpernull_Bool{field: "\"checkout_products\".\"received\""},
	Status:                   whereHelpernull_Int64{field: "\"checkout_products\".\"status\""},
	UserID:                   whereHelpernull_Int64{field: "\"checkout_products\".\"user_id\""},
	SellingSellerID:          whereHelpernull_Int64{field: "\"checkout_products\".\"selling_seller_id\""},
}

// CheckoutProductRels is where relationship names are stored.
var CheckoutProductRels = struct {
	SellerProductVariation string
	Checkout               string
	SellerProduct          string
	User                   string
	SellingSeller          string
}{
	SellerProductVariation: "SellerProductVariation",
	Checkout:               "Checkout",
	SellerProduct:          "SellerProduct",
	User:                   "User",
	SellingSeller:          "SellingSeller",
}

// checkoutProductR is where relationships are stored.
type checkoutProductR struct {
	SellerProductVariation *SellerProductVariation `boil:"SellerProductVariation" json:"SellerProductVariation" toml:"SellerProductVariation" yaml:"SellerProductVariation"`
	Checkout               *Checkout               `boil:"Checkout" json:"Checkout" toml:"Checkout" yaml:"Checkout"`
	SellerProduct          *SellerProduct          `boil:"SellerProduct" json:"SellerProduct" toml:"SellerProduct" yaml:"SellerProduct"`
	User                   *User                   `boil:"User" json:"User" toml:"User" yaml:"User"`
	SellingSeller          *User                   `boil:"SellingSeller" json:"SellingSeller" toml:"SellingSeller" yaml:"SellingSeller"`
}

// NewStruct creates a new relationship struct
func (*checkoutProductR) NewStruct() *checkoutProductR {
	return &checkoutProductR{}
}

// checkoutProductL is where Load methods for each relationship are stored.
type checkoutProductL struct{}

var (
	checkoutProductAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "checkout_id", "seller_product_id", "seller_product_variation_id", "quantity", "selling_price", "offer_price", "received", "status", "user_id", "selling_seller_id"}
	checkoutProductColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "checkout_id", "seller_product_id", "seller_product_variation_id", "quantity", "selling_price", "offer_price", "user_id", "selling_seller_id"}
	checkoutProductColumnsWithDefault    = []string{"id", "received", "status"}
	checkoutProductPrimaryKeyColumns     = []string{"id"}
)

type (
	// CheckoutProductSlice is an alias for a slice of pointers to CheckoutProduct.
	// This should almost always be used instead of []CheckoutProduct.
	CheckoutProductSlice []*CheckoutProduct
	// CheckoutProductHook is the signature for custom CheckoutProduct hook methods
	CheckoutProductHook func(context.Context, boil.ContextExecutor, *CheckoutProduct) error

	checkoutProductQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	checkoutProductType                 = reflect.TypeOf(&CheckoutProduct{})
	checkoutProductMapping              = queries.MakeStructMapping(checkoutProductType)
	checkoutProductPrimaryKeyMapping, _ = queries.BindMapping(checkoutProductType, checkoutProductMapping, checkoutProductPrimaryKeyColumns)
	checkoutProductInsertCacheMut       sync.RWMutex
	checkoutProductInsertCache          = make(map[string]insertCache)
	checkoutProductUpdateCacheMut       sync.RWMutex
	checkoutProductUpdateCache          = make(map[string]updateCache)
	checkoutProductUpsertCacheMut       sync.RWMutex
	checkoutProductUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var checkoutProductBeforeInsertHooks []CheckoutProductHook
var checkoutProductBeforeUpdateHooks []CheckoutProductHook
var checkoutProductBeforeDeleteHooks []CheckoutProductHook
var checkoutProductBeforeUpsertHooks []CheckoutProductHook

var checkoutProductAfterInsertHooks []CheckoutProductHook
var checkoutProductAfterSelectHooks []CheckoutProductHook
var checkoutProductAfterUpdateHooks []CheckoutProductHook
var checkoutProductAfterDeleteHooks []CheckoutProductHook
var checkoutProductAfterUpsertHooks []CheckoutProductHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CheckoutProduct) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutProductBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CheckoutProduct) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutProductBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CheckoutProduct) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutProductBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CheckoutProduct) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutProductBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CheckoutProduct) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutProductAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CheckoutProduct) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutProductAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CheckoutProduct) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutProductAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CheckoutProduct) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutProductAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CheckoutProduct) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range checkoutProductAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCheckoutProductHook registers your hook function for all future operations.
func AddCheckoutProductHook(hookPoint boil.HookPoint, checkoutProductHook CheckoutProductHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		checkoutProductBeforeInsertHooks = append(checkoutProductBeforeInsertHooks, checkoutProductHook)
	case boil.BeforeUpdateHook:
		checkoutProductBeforeUpdateHooks = append(checkoutProductBeforeUpdateHooks, checkoutProductHook)
	case boil.BeforeDeleteHook:
		checkoutProductBeforeDeleteHooks = append(checkoutProductBeforeDeleteHooks, checkoutProductHook)
	case boil.BeforeUpsertHook:
		checkoutProductBeforeUpsertHooks = append(checkoutProductBeforeUpsertHooks, checkoutProductHook)
	case boil.AfterInsertHook:
		checkoutProductAfterInsertHooks = append(checkoutProductAfterInsertHooks, checkoutProductHook)
	case boil.AfterSelectHook:
		checkoutProductAfterSelectHooks = append(checkoutProductAfterSelectHooks, checkoutProductHook)
	case boil.AfterUpdateHook:
		checkoutProductAfterUpdateHooks = append(checkoutProductAfterUpdateHooks, checkoutProductHook)
	case boil.AfterDeleteHook:
		checkoutProductAfterDeleteHooks = append(checkoutProductAfterDeleteHooks, checkoutProductHook)
	case boil.AfterUpsertHook:
		checkoutProductAfterUpsertHooks = append(checkoutProductAfterUpsertHooks, checkoutProductHook)
	}
}

// One returns a single checkoutProduct record from the query.
func (q checkoutProductQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CheckoutProduct, error) {
	o := &CheckoutProduct{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for checkout_products")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CheckoutProduct records from the query.
func (q checkoutProductQuery) All(ctx context.Context, exec boil.ContextExecutor) (CheckoutProductSlice, error) {
	var o []*CheckoutProduct

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CheckoutProduct slice")
	}

	if len(checkoutProductAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CheckoutProduct records in the query.
func (q checkoutProductQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count checkout_products rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q checkoutProductQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if checkout_products exists")
	}

	return count > 0, nil
}

// SellerProductVariation pointed to by the foreign key.
func (o *CheckoutProduct) SellerProductVariation(mods ...qm.QueryMod) sellerProductVariationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SellerProductVariationID),
	}

	queryMods = append(queryMods, mods...)

	query := SellerProductVariations(queryMods...)
	queries.SetFrom(query.Query, "\"seller_product_variations\"")

	return query
}

// Checkout pointed to by the foreign key.
func (o *CheckoutProduct) Checkout(mods ...qm.QueryMod) checkoutQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CheckoutID),
	}

	queryMods = append(queryMods, mods...)

	query := Checkouts(queryMods...)
	queries.SetFrom(query.Query, "\"checkouts\"")

	return query
}

// SellerProduct pointed to by the foreign key.
func (o *CheckoutProduct) SellerProduct(mods ...qm.QueryMod) sellerProductQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SellerProductID),
	}

	queryMods = append(queryMods, mods...)

	query := SellerProducts(queryMods...)
	queries.SetFrom(query.Query, "\"seller_products\"")

	return query
}

// User pointed to by the foreign key.
func (o *CheckoutProduct) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// SellingSeller pointed to by the foreign key.
func (o *CheckoutProduct) SellingSeller(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SellingSellerID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadSellerProductVariation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutProductL) LoadSellerProductVariation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckoutProduct interface{}, mods queries.Applicator) error {
	var slice []*CheckoutProduct
	var object *CheckoutProduct

	if singular {
		object = maybeCheckoutProduct.(*CheckoutProduct)
	} else {
		slice = *maybeCheckoutProduct.(*[]*CheckoutProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutProductR{}
		}
		if !queries.IsNil(object.SellerProductVariationID) {
			args = append(args, object.SellerProductVariationID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SellerProductVariationID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SellerProductVariationID) {
				args = append(args, obj.SellerProductVariationID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_product_variations`),
		qm.WhereIn(`seller_product_variations.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SellerProductVariation")
	}

	var resultSlice []*SellerProductVariation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SellerProductVariation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seller_product_variations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_product_variations")
	}

	if len(checkoutProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerProductVariation = foreign
		if foreign.R == nil {
			foreign.R = &sellerProductVariationR{}
		}
		foreign.R.CheckoutProducts = append(foreign.R.CheckoutProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SellerProductVariationID, foreign.ID) {
				local.R.SellerProductVariation = foreign
				if foreign.R == nil {
					foreign.R = &sellerProductVariationR{}
				}
				foreign.R.CheckoutProducts = append(foreign.R.CheckoutProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadCheckout allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutProductL) LoadCheckout(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckoutProduct interface{}, mods queries.Applicator) error {
	var slice []*CheckoutProduct
	var object *CheckoutProduct

	if singular {
		object = maybeCheckoutProduct.(*CheckoutProduct)
	} else {
		slice = *maybeCheckoutProduct.(*[]*CheckoutProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutProductR{}
		}
		if !queries.IsNil(object.CheckoutID) {
			args = append(args, object.CheckoutID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CheckoutID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CheckoutID) {
				args = append(args, obj.CheckoutID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`checkouts`),
		qm.WhereIn(`checkouts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Checkout")
	}

	var resultSlice []*Checkout
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Checkout")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for checkouts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for checkouts")
	}

	if len(checkoutProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Checkout = foreign
		if foreign.R == nil {
			foreign.R = &checkoutR{}
		}
		foreign.R.CheckoutProducts = append(foreign.R.CheckoutProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CheckoutID, foreign.ID) {
				local.R.Checkout = foreign
				if foreign.R == nil {
					foreign.R = &checkoutR{}
				}
				foreign.R.CheckoutProducts = append(foreign.R.CheckoutProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadSellerProduct allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutProductL) LoadSellerProduct(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckoutProduct interface{}, mods queries.Applicator) error {
	var slice []*CheckoutProduct
	var object *CheckoutProduct

	if singular {
		object = maybeCheckoutProduct.(*CheckoutProduct)
	} else {
		slice = *maybeCheckoutProduct.(*[]*CheckoutProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutProductR{}
		}
		if !queries.IsNil(object.SellerProductID) {
			args = append(args, object.SellerProductID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SellerProductID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SellerProductID) {
				args = append(args, obj.SellerProductID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`seller_products`),
		qm.WhereIn(`seller_products.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SellerProduct")
	}

	var resultSlice []*SellerProduct
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SellerProduct")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for seller_products")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for seller_products")
	}

	if len(checkoutProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellerProduct = foreign
		if foreign.R == nil {
			foreign.R = &sellerProductR{}
		}
		foreign.R.CheckoutProducts = append(foreign.R.CheckoutProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SellerProductID, foreign.ID) {
				local.R.SellerProduct = foreign
				if foreign.R == nil {
					foreign.R = &sellerProductR{}
				}
				foreign.R.CheckoutProducts = append(foreign.R.CheckoutProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutProductL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckoutProduct interface{}, mods queries.Applicator) error {
	var slice []*CheckoutProduct
	var object *CheckoutProduct

	if singular {
		object = maybeCheckoutProduct.(*CheckoutProduct)
	} else {
		slice = *maybeCheckoutProduct.(*[]*CheckoutProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutProductR{}
		}
		if !queries.IsNil(object.UserID) {
			args = append(args, object.UserID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UserID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UserID) {
				args = append(args, obj.UserID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(checkoutProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CheckoutProducts = append(foreign.R.CheckoutProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserID, foreign.ID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CheckoutProducts = append(foreign.R.CheckoutProducts, local)
				break
			}
		}
	}

	return nil
}

// LoadSellingSeller allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (checkoutProductL) LoadSellingSeller(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCheckoutProduct interface{}, mods queries.Applicator) error {
	var slice []*CheckoutProduct
	var object *CheckoutProduct

	if singular {
		object = maybeCheckoutProduct.(*CheckoutProduct)
	} else {
		slice = *maybeCheckoutProduct.(*[]*CheckoutProduct)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &checkoutProductR{}
		}
		if !queries.IsNil(object.SellingSellerID) {
			args = append(args, object.SellingSellerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &checkoutProductR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SellingSellerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SellingSellerID) {
				args = append(args, obj.SellingSellerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(checkoutProductAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SellingSeller = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SellingSellerCheckoutProducts = append(foreign.R.SellingSellerCheckoutProducts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SellingSellerID, foreign.ID) {
				local.R.SellingSeller = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SellingSellerCheckoutProducts = append(foreign.R.SellingSellerCheckoutProducts, local)
				break
			}
		}
	}

	return nil
}

// SetSellerProductVariation of the checkoutProduct to the related item.
// Sets o.R.SellerProductVariation to related.
// Adds o to related.R.CheckoutProducts.
func (o *CheckoutProduct) SetSellerProductVariation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SellerProductVariation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkout_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_variation_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SellerProductVariationID, related.ID)
	if o.R == nil {
		o.R = &checkoutProductR{
			SellerProductVariation: related,
		}
	} else {
		o.R.SellerProductVariation = related
	}

	if related.R == nil {
		related.R = &sellerProductVariationR{
			CheckoutProducts: CheckoutProductSlice{o},
		}
	} else {
		related.R.CheckoutProducts = append(related.R.CheckoutProducts, o)
	}

	return nil
}

// RemoveSellerProductVariation relationship.
// Sets o.R.SellerProductVariation to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CheckoutProduct) RemoveSellerProductVariation(ctx context.Context, exec boil.ContextExecutor, related *SellerProductVariation) error {
	var err error

	queries.SetScanner(&o.SellerProductVariationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("seller_product_variation_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SellerProductVariation = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CheckoutProducts {
		if queries.Equal(o.SellerProductVariationID, ri.SellerProductVariationID) {
			continue
		}

		ln := len(related.R.CheckoutProducts)
		if ln > 1 && i < ln-1 {
			related.R.CheckoutProducts[i] = related.R.CheckoutProducts[ln-1]
		}
		related.R.CheckoutProducts = related.R.CheckoutProducts[:ln-1]
		break
	}
	return nil
}

// SetCheckout of the checkoutProduct to the related item.
// Sets o.R.Checkout to related.
// Adds o to related.R.CheckoutProducts.
func (o *CheckoutProduct) SetCheckout(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Checkout) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkout_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"checkout_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CheckoutID, related.ID)
	if o.R == nil {
		o.R = &checkoutProductR{
			Checkout: related,
		}
	} else {
		o.R.Checkout = related
	}

	if related.R == nil {
		related.R = &checkoutR{
			CheckoutProducts: CheckoutProductSlice{o},
		}
	} else {
		related.R.CheckoutProducts = append(related.R.CheckoutProducts, o)
	}

	return nil
}

// RemoveCheckout relationship.
// Sets o.R.Checkout to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CheckoutProduct) RemoveCheckout(ctx context.Context, exec boil.ContextExecutor, related *Checkout) error {
	var err error

	queries.SetScanner(&o.CheckoutID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("checkout_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Checkout = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CheckoutProducts {
		if queries.Equal(o.CheckoutID, ri.CheckoutID) {
			continue
		}

		ln := len(related.R.CheckoutProducts)
		if ln > 1 && i < ln-1 {
			related.R.CheckoutProducts[i] = related.R.CheckoutProducts[ln-1]
		}
		related.R.CheckoutProducts = related.R.CheckoutProducts[:ln-1]
		break
	}
	return nil
}

// SetSellerProduct of the checkoutProduct to the related item.
// Sets o.R.SellerProduct to related.
// Adds o to related.R.CheckoutProducts.
func (o *CheckoutProduct) SetSellerProduct(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SellerProduct) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkout_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"seller_product_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SellerProductID, related.ID)
	if o.R == nil {
		o.R = &checkoutProductR{
			SellerProduct: related,
		}
	} else {
		o.R.SellerProduct = related
	}

	if related.R == nil {
		related.R = &sellerProductR{
			CheckoutProducts: CheckoutProductSlice{o},
		}
	} else {
		related.R.CheckoutProducts = append(related.R.CheckoutProducts, o)
	}

	return nil
}

// RemoveSellerProduct relationship.
// Sets o.R.SellerProduct to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CheckoutProduct) RemoveSellerProduct(ctx context.Context, exec boil.ContextExecutor, related *SellerProduct) error {
	var err error

	queries.SetScanner(&o.SellerProductID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("seller_product_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SellerProduct = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CheckoutProducts {
		if queries.Equal(o.SellerProductID, ri.SellerProductID) {
			continue
		}

		ln := len(related.R.CheckoutProducts)
		if ln > 1 && i < ln-1 {
			related.R.CheckoutProducts[i] = related.R.CheckoutProducts[ln-1]
		}
		related.R.CheckoutProducts = related.R.CheckoutProducts[:ln-1]
		break
	}
	return nil
}

// SetUser of the checkoutProduct to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CheckoutProducts.
func (o *CheckoutProduct) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkout_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserID, related.ID)
	if o.R == nil {
		o.R = &checkoutProductR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CheckoutProducts: CheckoutProductSlice{o},
		}
	} else {
		related.R.CheckoutProducts = append(related.R.CheckoutProducts, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CheckoutProduct) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CheckoutProducts {
		if queries.Equal(o.UserID, ri.UserID) {
			continue
		}

		ln := len(related.R.CheckoutProducts)
		if ln > 1 && i < ln-1 {
			related.R.CheckoutProducts[i] = related.R.CheckoutProducts[ln-1]
		}
		related.R.CheckoutProducts = related.R.CheckoutProducts[:ln-1]
		break
	}
	return nil
}

// SetSellingSeller of the checkoutProduct to the related item.
// Sets o.R.SellingSeller to related.
// Adds o to related.R.SellingSellerCheckoutProducts.
func (o *CheckoutProduct) SetSellingSeller(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"checkout_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"selling_seller_id"}),
		strmangle.WhereClause("\"", "\"", 2, checkoutProductPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SellingSellerID, related.ID)
	if o.R == nil {
		o.R = &checkoutProductR{
			SellingSeller: related,
		}
	} else {
		o.R.SellingSeller = related
	}

	if related.R == nil {
		related.R = &userR{
			SellingSellerCheckoutProducts: CheckoutProductSlice{o},
		}
	} else {
		related.R.SellingSellerCheckoutProducts = append(related.R.SellingSellerCheckoutProducts, o)
	}

	return nil
}

// RemoveSellingSeller relationship.
// Sets o.R.SellingSeller to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *CheckoutProduct) RemoveSellingSeller(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.SellingSellerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("selling_seller_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SellingSeller = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SellingSellerCheckoutProducts {
		if queries.Equal(o.SellingSellerID, ri.SellingSellerID) {
			continue
		}

		ln := len(related.R.SellingSellerCheckoutProducts)
		if ln > 1 && i < ln-1 {
			related.R.SellingSellerCheckoutProducts[i] = related.R.SellingSellerCheckoutProducts[ln-1]
		}
		related.R.SellingSellerCheckoutProducts = related.R.SellingSellerCheckoutProducts[:ln-1]
		break
	}
	return nil
}

// CheckoutProducts retrieves all the records using an executor.
func CheckoutProducts(mods ...qm.QueryMod) checkoutProductQuery {
	mods = append(mods, qm.From("\"checkout_products\""))
	return checkoutProductQuery{NewQuery(mods...)}
}

// FindCheckoutProduct retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCheckoutProduct(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CheckoutProduct, error) {
	checkoutProductObj := &CheckoutProduct{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"checkout_products\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, checkoutProductObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from checkout_products")
	}

	if err = checkoutProductObj.doAfterSelectHooks(ctx, exec); err != nil {
		return checkoutProductObj, err
	}

	return checkoutProductObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CheckoutProduct) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checkout_products provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkoutProductColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	checkoutProductInsertCacheMut.RLock()
	cache, cached := checkoutProductInsertCache[key]
	checkoutProductInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			checkoutProductAllColumns,
			checkoutProductColumnsWithDefault,
			checkoutProductColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(checkoutProductType, checkoutProductMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(checkoutProductType, checkoutProductMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"checkout_products\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"checkout_products\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into checkout_products")
	}

	if !cached {
		checkoutProductInsertCacheMut.Lock()
		checkoutProductInsertCache[key] = cache
		checkoutProductInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CheckoutProduct.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CheckoutProduct) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	checkoutProductUpdateCacheMut.RLock()
	cache, cached := checkoutProductUpdateCache[key]
	checkoutProductUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			checkoutProductAllColumns,
			checkoutProductPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update checkout_products, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"checkout_products\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, checkoutProductPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(checkoutProductType, checkoutProductMapping, append(wl, checkoutProductPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update checkout_products row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for checkout_products")
	}

	if !cached {
		checkoutProductUpdateCacheMut.Lock()
		checkoutProductUpdateCache[key] = cache
		checkoutProductUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q checkoutProductQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for checkout_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for checkout_products")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CheckoutProductSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"checkout_products\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, checkoutProductPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in checkoutProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all checkoutProduct")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CheckoutProduct) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no checkout_products provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(checkoutProductColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	checkoutProductUpsertCacheMut.RLock()
	cache, cached := checkoutProductUpsertCache[key]
	checkoutProductUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			checkoutProductAllColumns,
			checkoutProductColumnsWithDefault,
			checkoutProductColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			checkoutProductAllColumns,
			checkoutProductPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert checkout_products, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(checkoutProductPrimaryKeyColumns))
			copy(conflict, checkoutProductPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"checkout_products\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(checkoutProductType, checkoutProductMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(checkoutProductType, checkoutProductMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert checkout_products")
	}

	if !cached {
		checkoutProductUpsertCacheMut.Lock()
		checkoutProductUpsertCache[key] = cache
		checkoutProductUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CheckoutProduct record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CheckoutProduct) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CheckoutProduct provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), checkoutProductPrimaryKeyMapping)
	sql := "DELETE FROM \"checkout_products\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from checkout_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for checkout_products")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q checkoutProductQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no checkoutProductQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkout_products")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkout_products")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CheckoutProductSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(checkoutProductBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"checkout_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutProductPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from checkoutProduct slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for checkout_products")
	}

	if len(checkoutProductAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CheckoutProduct) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCheckoutProduct(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CheckoutProductSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CheckoutProductSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), checkoutProductPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"checkout_products\".* FROM \"checkout_products\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, checkoutProductPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CheckoutProductSlice")
	}

	*o = slice

	return nil
}

// CheckoutProductExists checks if the CheckoutProduct row exists.
func CheckoutProductExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"checkout_products\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if checkout_products exists")
	}

	return exists, nil
}
