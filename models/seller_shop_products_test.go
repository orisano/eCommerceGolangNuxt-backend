// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSellerShopProducts(t *testing.T) {
	t.Parallel()

	query := SellerShopProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSellerShopProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerShopProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SellerShopProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerShopProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerShopProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerShopProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SellerShopProductExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SellerShopProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SellerShopProductExists to return true, but got false.")
	}
}

func testSellerShopProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sellerShopProductFound, err := FindSellerShopProduct(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sellerShopProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSellerShopProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SellerShopProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSellerShopProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SellerShopProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSellerShopProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sellerShopProductOne := &SellerShopProduct{}
	sellerShopProductTwo := &SellerShopProduct{}
	if err = randomize.Struct(seed, sellerShopProductOne, sellerShopProductDBTypes, false, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerShopProductTwo, sellerShopProductDBTypes, false, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerShopProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerShopProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerShopProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSellerShopProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sellerShopProductOne := &SellerShopProduct{}
	sellerShopProductTwo := &SellerShopProduct{}
	if err = randomize.Struct(seed, sellerShopProductOne, sellerShopProductDBTypes, false, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerShopProductTwo, sellerShopProductDBTypes, false, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerShopProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerShopProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sellerShopProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerShopProduct) error {
	*o = SellerShopProduct{}
	return nil
}

func sellerShopProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerShopProduct) error {
	*o = SellerShopProduct{}
	return nil
}

func sellerShopProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SellerShopProduct) error {
	*o = SellerShopProduct{}
	return nil
}

func sellerShopProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerShopProduct) error {
	*o = SellerShopProduct{}
	return nil
}

func sellerShopProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerShopProduct) error {
	*o = SellerShopProduct{}
	return nil
}

func sellerShopProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerShopProduct) error {
	*o = SellerShopProduct{}
	return nil
}

func sellerShopProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerShopProduct) error {
	*o = SellerShopProduct{}
	return nil
}

func sellerShopProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerShopProduct) error {
	*o = SellerShopProduct{}
	return nil
}

func sellerShopProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerShopProduct) error {
	*o = SellerShopProduct{}
	return nil
}

func testSellerShopProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SellerShopProduct{}
	o := &SellerShopProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct object: %s", err)
	}

	AddSellerShopProductHook(boil.BeforeInsertHook, sellerShopProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sellerShopProductBeforeInsertHooks = []SellerShopProductHook{}

	AddSellerShopProductHook(boil.AfterInsertHook, sellerShopProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sellerShopProductAfterInsertHooks = []SellerShopProductHook{}

	AddSellerShopProductHook(boil.AfterSelectHook, sellerShopProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sellerShopProductAfterSelectHooks = []SellerShopProductHook{}

	AddSellerShopProductHook(boil.BeforeUpdateHook, sellerShopProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sellerShopProductBeforeUpdateHooks = []SellerShopProductHook{}

	AddSellerShopProductHook(boil.AfterUpdateHook, sellerShopProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sellerShopProductAfterUpdateHooks = []SellerShopProductHook{}

	AddSellerShopProductHook(boil.BeforeDeleteHook, sellerShopProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sellerShopProductBeforeDeleteHooks = []SellerShopProductHook{}

	AddSellerShopProductHook(boil.AfterDeleteHook, sellerShopProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sellerShopProductAfterDeleteHooks = []SellerShopProductHook{}

	AddSellerShopProductHook(boil.BeforeUpsertHook, sellerShopProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sellerShopProductBeforeUpsertHooks = []SellerShopProductHook{}

	AddSellerShopProductHook(boil.AfterUpsertHook, sellerShopProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sellerShopProductAfterUpsertHooks = []SellerShopProductHook{}
}

func testSellerShopProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerShopProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sellerShopProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerShopProductToOneSellerProductUsingSellerProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerShopProduct
	var foreign SellerProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sellerProductDBTypes, false, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SellerProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SellerProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerShopProductSlice{&local}
	if err = local.L.LoadSellerProduct(ctx, tx, false, (*[]*SellerShopProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SellerProduct = nil
	if err = local.L.LoadSellerProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProduct == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerShopProductToOneSellerShopUsingSellerShop(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerShopProduct
	var foreign SellerShop

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sellerShopDBTypes, false, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SellerShopID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SellerShop().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerShopProductSlice{&local}
	if err = local.L.LoadSellerShop(ctx, tx, false, (*[]*SellerShopProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerShop == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SellerShop = nil
	if err = local.L.LoadSellerShop(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerShop == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerShopProductToOneSetOpSellerProductUsingSellerProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShopProduct
	var b, c SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopProductDBTypes, false, strmangle.SetComplement(sellerShopProductPrimaryKeyColumns, sellerShopProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SellerProduct{&b, &c} {
		err = a.SetSellerProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SellerProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerShopProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SellerProductID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SellerProductID))
		reflect.Indirect(reflect.ValueOf(&a.SellerProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SellerProductID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductID, x.ID)
		}
	}
}

func testSellerShopProductToOneRemoveOpSellerProductUsingSellerProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShopProduct
	var b SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopProductDBTypes, false, strmangle.SetComplement(sellerShopProductPrimaryKeyColumns, sellerShopProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSellerProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSellerProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SellerProduct().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SellerProduct != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SellerProductID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SellerShopProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSellerShopProductToOneSetOpSellerShopUsingSellerShop(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShopProduct
	var b, c SellerShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopProductDBTypes, false, strmangle.SetComplement(sellerShopProductPrimaryKeyColumns, sellerShopProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SellerShop{&b, &c} {
		err = a.SetSellerShop(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SellerShop != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerShopProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SellerShopID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerShopID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SellerShopID))
		reflect.Indirect(reflect.ValueOf(&a.SellerShopID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SellerShopID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerShopID, x.ID)
		}
	}
}

func testSellerShopProductToOneRemoveOpSellerShopUsingSellerShop(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShopProduct
	var b SellerShop

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopProductDBTypes, false, strmangle.SetComplement(sellerShopProductPrimaryKeyColumns, sellerShopProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSellerShop(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSellerShop(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SellerShop().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SellerShop != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SellerShopID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SellerShopProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSellerShopProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerShopProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerShopProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerShopProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerShopProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sellerShopProductDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `SellerProductID`: `bigint`, `SellerShopID`: `bigint`}
	_                        = bytes.MinRead
)

func testSellerShopProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sellerShopProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sellerShopProductAllColumns) == len(sellerShopProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSellerShopProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sellerShopProductAllColumns) == len(sellerShopProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerShopProduct{}
	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerShopProductDBTypes, true, sellerShopProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sellerShopProductAllColumns, sellerShopProductPrimaryKeyColumns) {
		fields = sellerShopProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			sellerShopProductAllColumns,
			sellerShopProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SellerShopProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSellerShopProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(sellerShopProductAllColumns) == len(sellerShopProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SellerShopProduct{}
	if err = randomize.Struct(seed, &o, sellerShopProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerShopProduct: %s", err)
	}

	count, err := SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sellerShopProductDBTypes, false, sellerShopProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerShopProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerShopProduct: %s", err)
	}

	count, err = SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
