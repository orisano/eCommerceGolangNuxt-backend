// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCarts(t *testing.T) {
	t.Parallel()

	query := Carts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCartsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Carts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCartsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Carts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Carts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCartsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CartSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Carts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCartsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CartExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Cart exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CartExists to return true, but got false.")
	}
}

func testCartsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	cartFound, err := FindCart(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if cartFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCartsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Carts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCartsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Carts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCartsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cartOne := &Cart{}
	cartTwo := &Cart{}
	if err = randomize.Struct(seed, cartOne, cartDBTypes, false, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}
	if err = randomize.Struct(seed, cartTwo, cartDBTypes, false, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Carts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCartsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cartOne := &Cart{}
	cartTwo := &Cart{}
	if err = randomize.Struct(seed, cartOne, cartDBTypes, false, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}
	if err = randomize.Struct(seed, cartTwo, cartDBTypes, false, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cartOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cartTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Carts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func cartBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Cart) error {
	*o = Cart{}
	return nil
}

func cartAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Cart) error {
	*o = Cart{}
	return nil
}

func cartAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Cart) error {
	*o = Cart{}
	return nil
}

func cartBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Cart) error {
	*o = Cart{}
	return nil
}

func cartAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Cart) error {
	*o = Cart{}
	return nil
}

func cartBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Cart) error {
	*o = Cart{}
	return nil
}

func cartAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Cart) error {
	*o = Cart{}
	return nil
}

func cartBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Cart) error {
	*o = Cart{}
	return nil
}

func cartAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Cart) error {
	*o = Cart{}
	return nil
}

func testCartsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Cart{}
	o := &Cart{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cartDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Cart object: %s", err)
	}

	AddCartHook(boil.BeforeInsertHook, cartBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cartBeforeInsertHooks = []CartHook{}

	AddCartHook(boil.AfterInsertHook, cartAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cartAfterInsertHooks = []CartHook{}

	AddCartHook(boil.AfterSelectHook, cartAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cartAfterSelectHooks = []CartHook{}

	AddCartHook(boil.BeforeUpdateHook, cartBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cartBeforeUpdateHooks = []CartHook{}

	AddCartHook(boil.AfterUpdateHook, cartAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cartAfterUpdateHooks = []CartHook{}

	AddCartHook(boil.BeforeDeleteHook, cartBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cartBeforeDeleteHooks = []CartHook{}

	AddCartHook(boil.AfterDeleteHook, cartAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cartAfterDeleteHooks = []CartHook{}

	AddCartHook(boil.BeforeUpsertHook, cartBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cartBeforeUpsertHooks = []CartHook{}

	AddCartHook(boil.AfterUpsertHook, cartAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cartAfterUpsertHooks = []CartHook{}
}

func testCartsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Carts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCartsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(cartColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Carts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCartToManyCartProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cart
	var b, c CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cartProductDBTypes, false, cartProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cartProductDBTypes, false, cartProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CartID, a.ID)
	queries.Assign(&c.CartID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CartProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CartID, b.CartID) {
			bFound = true
		}
		if queries.Equal(v.CartID, c.CartID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CartSlice{&a}
	if err = a.L.LoadCartProducts(ctx, tx, false, (*[]*Cart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CartProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CartProducts = nil
	if err = a.L.LoadCartProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CartProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCartToManyCheckouts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cart
	var b, c Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CartID, a.ID)
	queries.Assign(&c.CartID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Checkouts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CartID, b.CartID) {
			bFound = true
		}
		if queries.Equal(v.CartID, c.CartID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CartSlice{&a}
	if err = a.L.LoadCheckouts(ctx, tx, false, (*[]*Cart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Checkouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Checkouts = nil
	if err = a.L.LoadCheckouts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Checkouts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCartToManyAddOpCartProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cart
	var b, c, d, e CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CartProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CartProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCartProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CartID) {
			t.Error("foreign key was wrong value", a.ID, first.CartID)
		}
		if !queries.Equal(a.ID, second.CartID) {
			t.Error("foreign key was wrong value", a.ID, second.CartID)
		}

		if first.R.Cart != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Cart != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CartProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CartProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CartProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCartToManySetOpCartProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cart
	var b, c, d, e CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CartProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCartProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCartProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CartID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CartID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CartID) {
		t.Error("foreign key was wrong value", a.ID, d.CartID)
	}
	if !queries.Equal(a.ID, e.CartID) {
		t.Error("foreign key was wrong value", a.ID, e.CartID)
	}

	if b.R.Cart != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Cart != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Cart != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Cart != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CartProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CartProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCartToManyRemoveOpCartProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cart
	var b, c, d, e CartProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CartProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cartProductDBTypes, false, strmangle.SetComplement(cartProductPrimaryKeyColumns, cartProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCartProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCartProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CartProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CartID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CartID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Cart != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Cart != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Cart != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Cart != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CartProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CartProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CartProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCartToManyAddOpCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cart
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Checkout{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCheckouts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CartID) {
			t.Error("foreign key was wrong value", a.ID, first.CartID)
		}
		if !queries.Equal(a.ID, second.CartID) {
			t.Error("foreign key was wrong value", a.ID, second.CartID)
		}

		if first.R.Cart != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Cart != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Checkouts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Checkouts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Checkouts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCartToManySetOpCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cart
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCheckouts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCheckouts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CartID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CartID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CartID) {
		t.Error("foreign key was wrong value", a.ID, d.CartID)
	}
	if !queries.Equal(a.ID, e.CartID) {
		t.Error("foreign key was wrong value", a.ID, e.CartID)
	}

	if b.R.Cart != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Cart != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Cart != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Cart != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Checkouts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Checkouts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCartToManyRemoveOpCheckouts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cart
	var b, c, d, e Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Checkout{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCheckouts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCheckouts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Checkouts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CartID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CartID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Cart != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Cart != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Cart != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Cart != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Checkouts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Checkouts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Checkouts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCartToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Cart
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CartSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Cart)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCartToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cart
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Carts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testCartToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Cart
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cartDBTypes, false, strmangle.SetComplement(cartPrimaryKeyColumns, cartColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Carts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCartsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCartsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CartSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCartsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Carts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cartDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Slug`: `text`, `UserID`: `bigint`}
	_           = bytes.MinRead
)

func testCartsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(cartPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(cartAllColumns) == len(cartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Carts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cartDBTypes, true, cartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCartsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cartAllColumns) == len(cartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Cart{}
	if err = randomize.Struct(seed, o, cartDBTypes, true, cartColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Carts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cartDBTypes, true, cartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cartAllColumns, cartPrimaryKeyColumns) {
		fields = cartAllColumns
	} else {
		fields = strmangle.SetComplement(
			cartAllColumns,
			cartPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CartSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCartsUpsert(t *testing.T) {
	t.Parallel()

	if len(cartAllColumns) == len(cartPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Cart{}
	if err = randomize.Struct(seed, &o, cartDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Cart: %s", err)
	}

	count, err := Carts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, cartDBTypes, false, cartPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Cart struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Cart: %s", err)
	}

	count, err = Carts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
