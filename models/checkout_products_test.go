// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCheckoutProducts(t *testing.T) {
	t.Parallel()

	query := CheckoutProducts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCheckoutProductsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckoutProductsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CheckoutProducts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckoutProductsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CheckoutProductSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCheckoutProductsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CheckoutProductExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CheckoutProduct exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CheckoutProductExists to return true, but got false.")
	}
}

func testCheckoutProductsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	checkoutProductFound, err := FindCheckoutProduct(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if checkoutProductFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCheckoutProductsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CheckoutProducts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCheckoutProductsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CheckoutProducts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCheckoutProductsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	checkoutProductOne := &CheckoutProduct{}
	checkoutProductTwo := &CheckoutProduct{}
	if err = randomize.Struct(seed, checkoutProductOne, checkoutProductDBTypes, false, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, checkoutProductTwo, checkoutProductDBTypes, false, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = checkoutProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = checkoutProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CheckoutProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCheckoutProductsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	checkoutProductOne := &CheckoutProduct{}
	checkoutProductTwo := &CheckoutProduct{}
	if err = randomize.Struct(seed, checkoutProductOne, checkoutProductDBTypes, false, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}
	if err = randomize.Struct(seed, checkoutProductTwo, checkoutProductDBTypes, false, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = checkoutProductOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = checkoutProductTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func checkoutProductBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutProduct) error {
	*o = CheckoutProduct{}
	return nil
}

func checkoutProductAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutProduct) error {
	*o = CheckoutProduct{}
	return nil
}

func checkoutProductAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutProduct) error {
	*o = CheckoutProduct{}
	return nil
}

func checkoutProductBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutProduct) error {
	*o = CheckoutProduct{}
	return nil
}

func checkoutProductAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutProduct) error {
	*o = CheckoutProduct{}
	return nil
}

func checkoutProductBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutProduct) error {
	*o = CheckoutProduct{}
	return nil
}

func checkoutProductAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutProduct) error {
	*o = CheckoutProduct{}
	return nil
}

func checkoutProductBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutProduct) error {
	*o = CheckoutProduct{}
	return nil
}

func checkoutProductAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CheckoutProduct) error {
	*o = CheckoutProduct{}
	return nil
}

func testCheckoutProductsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CheckoutProduct{}
	o := &CheckoutProduct{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct object: %s", err)
	}

	AddCheckoutProductHook(boil.BeforeInsertHook, checkoutProductBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	checkoutProductBeforeInsertHooks = []CheckoutProductHook{}

	AddCheckoutProductHook(boil.AfterInsertHook, checkoutProductAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	checkoutProductAfterInsertHooks = []CheckoutProductHook{}

	AddCheckoutProductHook(boil.AfterSelectHook, checkoutProductAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	checkoutProductAfterSelectHooks = []CheckoutProductHook{}

	AddCheckoutProductHook(boil.BeforeUpdateHook, checkoutProductBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	checkoutProductBeforeUpdateHooks = []CheckoutProductHook{}

	AddCheckoutProductHook(boil.AfterUpdateHook, checkoutProductAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	checkoutProductAfterUpdateHooks = []CheckoutProductHook{}

	AddCheckoutProductHook(boil.BeforeDeleteHook, checkoutProductBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	checkoutProductBeforeDeleteHooks = []CheckoutProductHook{}

	AddCheckoutProductHook(boil.AfterDeleteHook, checkoutProductAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	checkoutProductAfterDeleteHooks = []CheckoutProductHook{}

	AddCheckoutProductHook(boil.BeforeUpsertHook, checkoutProductBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	checkoutProductBeforeUpsertHooks = []CheckoutProductHook{}

	AddCheckoutProductHook(boil.AfterUpsertHook, checkoutProductAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	checkoutProductAfterUpsertHooks = []CheckoutProductHook{}
}

func testCheckoutProductsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCheckoutProductsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(checkoutProductColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCheckoutProductToOneSellerProductVariationUsingSellerProductVariation(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CheckoutProduct
	var foreign SellerProductVariation

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sellerProductVariationDBTypes, false, sellerProductVariationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProductVariation struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SellerProductVariationID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SellerProductVariation().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CheckoutProductSlice{&local}
	if err = local.L.LoadSellerProductVariation(ctx, tx, false, (*[]*CheckoutProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProductVariation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SellerProductVariation = nil
	if err = local.L.LoadSellerProductVariation(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProductVariation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCheckoutProductToOneCheckoutUsingCheckout(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CheckoutProduct
	var foreign Checkout

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, checkoutDBTypes, false, checkoutColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Checkout struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CheckoutID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Checkout().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CheckoutProductSlice{&local}
	if err = local.L.LoadCheckout(ctx, tx, false, (*[]*CheckoutProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Checkout == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Checkout = nil
	if err = local.L.LoadCheckout(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Checkout == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCheckoutProductToOneSellerProductUsingSellerProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CheckoutProduct
	var foreign SellerProduct

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, sellerProductDBTypes, false, sellerProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerProduct struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SellerProductID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SellerProduct().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CheckoutProductSlice{&local}
	if err = local.L.LoadSellerProduct(ctx, tx, false, (*[]*CheckoutProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProduct == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SellerProduct = nil
	if err = local.L.LoadSellerProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellerProduct == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCheckoutProductToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CheckoutProduct
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CheckoutProductSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*CheckoutProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCheckoutProductToOneUserUsingSellingSeller(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CheckoutProduct
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.SellingSellerID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.SellingSeller().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CheckoutProductSlice{&local}
	if err = local.L.LoadSellingSeller(ctx, tx, false, (*[]*CheckoutProduct)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellingSeller == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.SellingSeller = nil
	if err = local.L.LoadSellingSeller(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.SellingSeller == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCheckoutProductToOneSetOpSellerProductVariationUsingSellerProductVariation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutProduct
	var b, c SellerProductVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SellerProductVariation{&b, &c} {
		err = a.SetSellerProductVariation(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SellerProductVariation != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CheckoutProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SellerProductVariationID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductVariationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SellerProductVariationID))
		reflect.Indirect(reflect.ValueOf(&a.SellerProductVariationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SellerProductVariationID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductVariationID, x.ID)
		}
	}
}

func testCheckoutProductToOneRemoveOpSellerProductVariationUsingSellerProductVariation(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutProduct
	var b SellerProductVariation

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductVariationDBTypes, false, strmangle.SetComplement(sellerProductVariationPrimaryKeyColumns, sellerProductVariationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSellerProductVariation(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSellerProductVariation(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SellerProductVariation().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SellerProductVariation != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SellerProductVariationID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CheckoutProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutProductToOneSetOpCheckoutUsingCheckout(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutProduct
	var b, c Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Checkout{&b, &c} {
		err = a.SetCheckout(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Checkout != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CheckoutProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CheckoutID, x.ID) {
			t.Error("foreign key was wrong value", a.CheckoutID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CheckoutID))
		reflect.Indirect(reflect.ValueOf(&a.CheckoutID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CheckoutID, x.ID) {
			t.Error("foreign key was wrong value", a.CheckoutID, x.ID)
		}
	}
}

func testCheckoutProductToOneRemoveOpCheckoutUsingCheckout(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutProduct
	var b Checkout

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, checkoutDBTypes, false, strmangle.SetComplement(checkoutPrimaryKeyColumns, checkoutColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCheckout(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCheckout(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Checkout().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Checkout != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CheckoutID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CheckoutProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutProductToOneSetOpSellerProductUsingSellerProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutProduct
	var b, c SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SellerProduct{&b, &c} {
		err = a.SetSellerProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SellerProduct != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CheckoutProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SellerProductID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SellerProductID))
		reflect.Indirect(reflect.ValueOf(&a.SellerProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SellerProductID, x.ID) {
			t.Error("foreign key was wrong value", a.SellerProductID, x.ID)
		}
	}
}

func testCheckoutProductToOneRemoveOpSellerProductUsingSellerProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutProduct
	var b SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSellerProduct(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSellerProduct(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SellerProduct().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SellerProduct != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SellerProductID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CheckoutProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutProductToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutProduct
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CheckoutProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testCheckoutProductToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutProduct
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CheckoutProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutProductToOneSetOpUserUsingSellingSeller(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutProduct
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetSellingSeller(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.SellingSeller != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellingSellerCheckoutProducts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.SellingSellerID, x.ID) {
			t.Error("foreign key was wrong value", a.SellingSellerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SellingSellerID))
		reflect.Indirect(reflect.ValueOf(&a.SellingSellerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.SellingSellerID, x.ID) {
			t.Error("foreign key was wrong value", a.SellingSellerID, x.ID)
		}
	}
}

func testCheckoutProductToOneRemoveOpUserUsingSellingSeller(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CheckoutProduct
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, checkoutProductDBTypes, false, strmangle.SetComplement(checkoutProductPrimaryKeyColumns, checkoutProductColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetSellingSeller(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveSellingSeller(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.SellingSeller().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.SellingSeller != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.SellingSellerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SellingSellerCheckoutProducts) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCheckoutProductsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCheckoutProductsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CheckoutProductSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCheckoutProductsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CheckoutProducts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	checkoutProductDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `CheckoutID`: `bigint`, `SellerProductID`: `bigint`, `SellerProductVariationID`: `bigint`, `Quantity`: `bigint`, `SellingPrice`: `text`, `OfferPrice`: `bigint`, `Received`: `boolean`, `Status`: `bigint`, `UserID`: `bigint`, `SellingSellerID`: `bigint`}
	_                      = bytes.MinRead
)

func testCheckoutProductsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(checkoutProductPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(checkoutProductAllColumns) == len(checkoutProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCheckoutProductsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(checkoutProductAllColumns) == len(checkoutProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CheckoutProduct{}
	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, checkoutProductDBTypes, true, checkoutProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(checkoutProductAllColumns, checkoutProductPrimaryKeyColumns) {
		fields = checkoutProductAllColumns
	} else {
		fields = strmangle.SetComplement(
			checkoutProductAllColumns,
			checkoutProductPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CheckoutProductSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCheckoutProductsUpsert(t *testing.T) {
	t.Parallel()

	if len(checkoutProductAllColumns) == len(checkoutProductPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CheckoutProduct{}
	if err = randomize.Struct(seed, &o, checkoutProductDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CheckoutProduct: %s", err)
	}

	count, err := CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, checkoutProductDBTypes, false, checkoutProductPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CheckoutProduct struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CheckoutProduct: %s", err)
	}

	count, err = CheckoutProducts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
