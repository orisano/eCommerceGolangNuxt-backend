// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSellerShops(t *testing.T) {
	t.Parallel()

	query := SellerShops()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSellerShopsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerShops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerShopsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SellerShops().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerShops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerShopsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerShopSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SellerShops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSellerShopsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SellerShopExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SellerShop exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SellerShopExists to return true, but got false.")
	}
}

func testSellerShopsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sellerShopFound, err := FindSellerShop(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if sellerShopFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSellerShopsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SellerShops().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSellerShopsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SellerShops().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSellerShopsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sellerShopOne := &SellerShop{}
	sellerShopTwo := &SellerShop{}
	if err = randomize.Struct(seed, sellerShopOne, sellerShopDBTypes, false, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerShopTwo, sellerShopDBTypes, false, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerShopOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerShopTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerShops().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSellerShopsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sellerShopOne := &SellerShop{}
	sellerShopTwo := &SellerShop{}
	if err = randomize.Struct(seed, sellerShopOne, sellerShopDBTypes, false, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}
	if err = randomize.Struct(seed, sellerShopTwo, sellerShopDBTypes, false, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sellerShopOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sellerShopTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerShops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sellerShopBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerShop) error {
	*o = SellerShop{}
	return nil
}

func sellerShopAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerShop) error {
	*o = SellerShop{}
	return nil
}

func sellerShopAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SellerShop) error {
	*o = SellerShop{}
	return nil
}

func sellerShopBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerShop) error {
	*o = SellerShop{}
	return nil
}

func sellerShopAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SellerShop) error {
	*o = SellerShop{}
	return nil
}

func sellerShopBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerShop) error {
	*o = SellerShop{}
	return nil
}

func sellerShopAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SellerShop) error {
	*o = SellerShop{}
	return nil
}

func sellerShopBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerShop) error {
	*o = SellerShop{}
	return nil
}

func sellerShopAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SellerShop) error {
	*o = SellerShop{}
	return nil
}

func testSellerShopsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SellerShop{}
	o := &SellerShop{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sellerShopDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SellerShop object: %s", err)
	}

	AddSellerShopHook(boil.BeforeInsertHook, sellerShopBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sellerShopBeforeInsertHooks = []SellerShopHook{}

	AddSellerShopHook(boil.AfterInsertHook, sellerShopAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sellerShopAfterInsertHooks = []SellerShopHook{}

	AddSellerShopHook(boil.AfterSelectHook, sellerShopAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sellerShopAfterSelectHooks = []SellerShopHook{}

	AddSellerShopHook(boil.BeforeUpdateHook, sellerShopBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sellerShopBeforeUpdateHooks = []SellerShopHook{}

	AddSellerShopHook(boil.AfterUpdateHook, sellerShopAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sellerShopAfterUpdateHooks = []SellerShopHook{}

	AddSellerShopHook(boil.BeforeDeleteHook, sellerShopBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sellerShopBeforeDeleteHooks = []SellerShopHook{}

	AddSellerShopHook(boil.AfterDeleteHook, sellerShopAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sellerShopAfterDeleteHooks = []SellerShopHook{}

	AddSellerShopHook(boil.BeforeUpsertHook, sellerShopBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sellerShopBeforeUpsertHooks = []SellerShopHook{}

	AddSellerShopHook(boil.AfterUpsertHook, sellerShopAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sellerShopAfterUpsertHooks = []SellerShopHook{}
}

func testSellerShopsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerShops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerShopsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sellerShopColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SellerShops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSellerShopToManySellerProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b, c SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sellerProductDBTypes, false, sellerProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerProductDBTypes, false, sellerProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SellerShopID, a.ID)
	queries.Assign(&c.SellerShopID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SellerProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SellerShopID, b.SellerShopID) {
			bFound = true
		}
		if queries.Equal(v.SellerShopID, c.SellerShopID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SellerShopSlice{&a}
	if err = a.L.LoadSellerProducts(ctx, tx, false, (*[]*SellerShop)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SellerProducts = nil
	if err = a.L.LoadSellerProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSellerShopToManySellerShopProducts(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b, c SellerShopProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, sellerShopProductDBTypes, false, sellerShopProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, sellerShopProductDBTypes, false, sellerShopProductColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SellerShopID, a.ID)
	queries.Assign(&c.SellerShopID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SellerShopProducts().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SellerShopID, b.SellerShopID) {
			bFound = true
		}
		if queries.Equal(v.SellerShopID, c.SellerShopID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SellerShopSlice{&a}
	if err = a.L.LoadSellerShopProducts(ctx, tx, false, (*[]*SellerShop)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerShopProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SellerShopProducts = nil
	if err = a.L.LoadSellerShopProducts(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SellerShopProducts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSellerShopToManyAddOpSellerProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b, c, d, e SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SellerProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSellerProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SellerShopID) {
			t.Error("foreign key was wrong value", a.ID, first.SellerShopID)
		}
		if !queries.Equal(a.ID, second.SellerShopID) {
			t.Error("foreign key was wrong value", a.ID, second.SellerShopID)
		}

		if first.R.SellerShop != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SellerShop != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SellerProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SellerProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SellerProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSellerShopToManySetOpSellerProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b, c, d, e SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSellerProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSellerProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerShopID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerShopID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SellerShopID) {
		t.Error("foreign key was wrong value", a.ID, d.SellerShopID)
	}
	if !queries.Equal(a.ID, e.SellerShopID) {
		t.Error("foreign key was wrong value", a.ID, e.SellerShopID)
	}

	if b.R.SellerShop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerShop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerShop != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SellerShop != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SellerProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SellerProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSellerShopToManyRemoveOpSellerProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b, c, d, e SellerProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerProductDBTypes, false, strmangle.SetComplement(sellerProductPrimaryKeyColumns, sellerProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSellerProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSellerProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerShopID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerShopID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SellerShop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerShop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerShop != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SellerShop != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SellerProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SellerProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SellerProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSellerShopToManyAddOpSellerShopProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b, c, d, e SellerShopProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerShopProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerShopProductDBTypes, false, strmangle.SetComplement(sellerShopProductPrimaryKeyColumns, sellerShopProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SellerShopProduct{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSellerShopProducts(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SellerShopID) {
			t.Error("foreign key was wrong value", a.ID, first.SellerShopID)
		}
		if !queries.Equal(a.ID, second.SellerShopID) {
			t.Error("foreign key was wrong value", a.ID, second.SellerShopID)
		}

		if first.R.SellerShop != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SellerShop != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SellerShopProducts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SellerShopProducts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SellerShopProducts().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSellerShopToManySetOpSellerShopProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b, c, d, e SellerShopProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerShopProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerShopProductDBTypes, false, strmangle.SetComplement(sellerShopProductPrimaryKeyColumns, sellerShopProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSellerShopProducts(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSellerShopProducts(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerShopID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerShopID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SellerShopID) {
		t.Error("foreign key was wrong value", a.ID, d.SellerShopID)
	}
	if !queries.Equal(a.ID, e.SellerShopID) {
		t.Error("foreign key was wrong value", a.ID, e.SellerShopID)
	}

	if b.R.SellerShop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerShop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerShop != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SellerShop != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SellerShopProducts[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SellerShopProducts[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSellerShopToManyRemoveOpSellerShopProducts(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b, c, d, e SellerShopProduct

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SellerShopProduct{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sellerShopProductDBTypes, false, strmangle.SetComplement(sellerShopProductPrimaryKeyColumns, sellerShopProductColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSellerShopProducts(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSellerShopProducts(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SellerShopProducts().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SellerShopID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SellerShopID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SellerShop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SellerShop != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SellerShop != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SellerShop != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SellerShopProducts) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SellerShopProducts[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SellerShopProducts[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSellerShopToOneShopCategoryUsingShopCategory(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerShop
	var foreign ShopCategory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, shopCategoryDBTypes, false, shopCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ShopCategory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ShopCategoryID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ShopCategory().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerShopSlice{&local}
	if err = local.L.LoadShopCategory(ctx, tx, false, (*[]*SellerShop)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShopCategory == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ShopCategory = nil
	if err = local.L.LoadShopCategory(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ShopCategory == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerShopToOneUserUsingAdmin(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerShop
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.AdminID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Admin().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerShopSlice{&local}
	if err = local.L.LoadAdmin(ctx, tx, false, (*[]*SellerShop)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Admin == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Admin = nil
	if err = local.L.LoadAdmin(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Admin == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerShopToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SellerShop
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.UserID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SellerShopSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*SellerShop)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSellerShopToOneSetOpShopCategoryUsingShopCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b, c ShopCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shopCategoryDBTypes, false, strmangle.SetComplement(shopCategoryPrimaryKeyColumns, shopCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, shopCategoryDBTypes, false, strmangle.SetComplement(shopCategoryPrimaryKeyColumns, shopCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ShopCategory{&b, &c} {
		err = a.SetShopCategory(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ShopCategory != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerShops[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ShopCategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.ShopCategoryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ShopCategoryID))
		reflect.Indirect(reflect.ValueOf(&a.ShopCategoryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ShopCategoryID, x.ID) {
			t.Error("foreign key was wrong value", a.ShopCategoryID, x.ID)
		}
	}
}

func testSellerShopToOneRemoveOpShopCategoryUsingShopCategory(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b ShopCategory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, shopCategoryDBTypes, false, strmangle.SetComplement(shopCategoryPrimaryKeyColumns, shopCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetShopCategory(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveShopCategory(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ShopCategory().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ShopCategory != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ShopCategoryID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SellerShops) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSellerShopToOneSetOpUserUsingAdmin(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetAdmin(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Admin != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AdminSellerShops[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.AdminID, x.ID) {
			t.Error("foreign key was wrong value", a.AdminID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AdminID))
		reflect.Indirect(reflect.ValueOf(&a.AdminID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.AdminID, x.ID) {
			t.Error("foreign key was wrong value", a.AdminID, x.ID)
		}
	}
}

func testSellerShopToOneRemoveOpUserUsingAdmin(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAdmin(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAdmin(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Admin().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Admin != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.AdminID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.AdminSellerShops) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSellerShopToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SellerShops[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.UserID, x.ID) {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testSellerShopToOneRemoveOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SellerShop
	var b User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, sellerShopDBTypes, false, strmangle.SetComplement(sellerShopPrimaryKeyColumns, sellerShopColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetUser(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveUser(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.User().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.User != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.UserID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.SellerShops) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testSellerShopsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerShopsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SellerShopSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSellerShopsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SellerShops().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sellerShopDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Name`: `character varying`, `Slug`: `text`, `ContactNumber`: `character varying`, `Banner`: `text`, `ShopCategoryID`: `bigint`, `BusinessLocation`: `text`, `TaxID`: `text`, `Active`: `boolean`, `UserID`: `bigint`, `AdminID`: `bigint`}
	_                 = bytes.MinRead
)

func testSellerShopsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sellerShopPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sellerShopAllColumns) == len(sellerShopPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerShops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSellerShopsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sellerShopAllColumns) == len(sellerShopPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SellerShop{}
	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SellerShops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sellerShopDBTypes, true, sellerShopPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sellerShopAllColumns, sellerShopPrimaryKeyColumns) {
		fields = sellerShopAllColumns
	} else {
		fields = strmangle.SetComplement(
			sellerShopAllColumns,
			sellerShopPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SellerShopSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSellerShopsUpsert(t *testing.T) {
	t.Parallel()

	if len(sellerShopAllColumns) == len(sellerShopPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SellerShop{}
	if err = randomize.Struct(seed, &o, sellerShopDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerShop: %s", err)
	}

	count, err := SellerShops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sellerShopDBTypes, false, sellerShopPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SellerShop struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SellerShop: %s", err)
	}

	count, err = SellerShops().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
