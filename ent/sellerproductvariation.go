// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductvariation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// SellerProductVariation is the model entity for the SellerProductVariation schema.
type SellerProductVariation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProductPrice holds the value of the "product_price" field.
	ProductPrice decimal.Decimal `json:"product_price,omitempty"`
	// SellingPrice holds the value of the "selling_price" field.
	SellingPrice decimal.Decimal `json:"selling_price,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SellerProductVariationQuery when eager-loading is set.
	Edges                                    SellerProductVariationEdges `json:"edges"`
	seller_product_seller_product_variations *int
}

// SellerProductVariationEdges holds the relations/edges for other nodes in the graph.
type SellerProductVariationEdges struct {
	// SellerProduct holds the value of the seller_product edge.
	SellerProduct *SellerProduct `json:"seller_product,omitempty"`
	// SellerProductVariationValues holds the value of the seller_product_variation_values edge.
	SellerProductVariationValues []*SellerProductVariationValues `json:"seller_product_variation_values,omitempty"`
	// CartProducts holds the value of the cart_products edge.
	CartProducts []*CartProduct `json:"cart_products,omitempty"`
	// CheckoutProducts holds the value of the checkout_products edge.
	CheckoutProducts []*CheckoutProduct `json:"checkout_products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SellerProductOrErr returns the SellerProduct value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SellerProductVariationEdges) SellerProductOrErr() (*SellerProduct, error) {
	if e.loadedTypes[0] {
		if e.SellerProduct == nil {
			// The edge seller_product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sellerproduct.Label}
		}
		return e.SellerProduct, nil
	}
	return nil, &NotLoadedError{edge: "seller_product"}
}

// SellerProductVariationValuesOrErr returns the SellerProductVariationValues value or an error if the edge
// was not loaded in eager-loading.
func (e SellerProductVariationEdges) SellerProductVariationValuesOrErr() ([]*SellerProductVariationValues, error) {
	if e.loadedTypes[1] {
		return e.SellerProductVariationValues, nil
	}
	return nil, &NotLoadedError{edge: "seller_product_variation_values"}
}

// CartProductsOrErr returns the CartProducts value or an error if the edge
// was not loaded in eager-loading.
func (e SellerProductVariationEdges) CartProductsOrErr() ([]*CartProduct, error) {
	if e.loadedTypes[2] {
		return e.CartProducts, nil
	}
	return nil, &NotLoadedError{edge: "cart_products"}
}

// CheckoutProductsOrErr returns the CheckoutProducts value or an error if the edge
// was not loaded in eager-loading.
func (e SellerProductVariationEdges) CheckoutProductsOrErr() ([]*CheckoutProduct, error) {
	if e.loadedTypes[3] {
		return e.CheckoutProducts, nil
	}
	return nil, &NotLoadedError{edge: "checkout_products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SellerProductVariation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sellerproductvariation.FieldProductPrice, sellerproductvariation.FieldSellingPrice:
			values[i] = new(decimal.Decimal)
		case sellerproductvariation.FieldID, sellerproductvariation.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case sellerproductvariation.FieldImage:
			values[i] = new(sql.NullString)
		case sellerproductvariation.FieldCreatedAt, sellerproductvariation.FieldUpdatedAt, sellerproductvariation.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case sellerproductvariation.ForeignKeys[0]: // seller_product_seller_product_variations
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SellerProductVariation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SellerProductVariation fields.
func (spv *SellerProductVariation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sellerproductvariation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			spv.ID = int(value.Int64)
		case sellerproductvariation.FieldProductPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field product_price", values[i])
			} else if value != nil {
				spv.ProductPrice = *value
			}
		case sellerproductvariation.FieldSellingPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field selling_price", values[i])
			} else if value != nil {
				spv.SellingPrice = *value
			}
		case sellerproductvariation.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				spv.Quantity = int(value.Int64)
			}
		case sellerproductvariation.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				spv.Image = value.String
			}
		case sellerproductvariation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				spv.CreatedAt = value.Time
			}
		case sellerproductvariation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				spv.UpdatedAt = value.Time
			}
		case sellerproductvariation.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				spv.DeletedAt = new(time.Time)
				*spv.DeletedAt = value.Time
			}
		case sellerproductvariation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field seller_product_seller_product_variations", value)
			} else if value.Valid {
				spv.seller_product_seller_product_variations = new(int)
				*spv.seller_product_seller_product_variations = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySellerProduct queries the "seller_product" edge of the SellerProductVariation entity.
func (spv *SellerProductVariation) QuerySellerProduct() *SellerProductQuery {
	return (&SellerProductVariationClient{config: spv.config}).QuerySellerProduct(spv)
}

// QuerySellerProductVariationValues queries the "seller_product_variation_values" edge of the SellerProductVariation entity.
func (spv *SellerProductVariation) QuerySellerProductVariationValues() *SellerProductVariationValuesQuery {
	return (&SellerProductVariationClient{config: spv.config}).QuerySellerProductVariationValues(spv)
}

// QueryCartProducts queries the "cart_products" edge of the SellerProductVariation entity.
func (spv *SellerProductVariation) QueryCartProducts() *CartProductQuery {
	return (&SellerProductVariationClient{config: spv.config}).QueryCartProducts(spv)
}

// QueryCheckoutProducts queries the "checkout_products" edge of the SellerProductVariation entity.
func (spv *SellerProductVariation) QueryCheckoutProducts() *CheckoutProductQuery {
	return (&SellerProductVariationClient{config: spv.config}).QueryCheckoutProducts(spv)
}

// Update returns a builder for updating this SellerProductVariation.
// Note that you need to call SellerProductVariation.Unwrap() before calling this method if this SellerProductVariation
// was returned from a transaction, and the transaction was committed or rolled back.
func (spv *SellerProductVariation) Update() *SellerProductVariationUpdateOne {
	return (&SellerProductVariationClient{config: spv.config}).UpdateOne(spv)
}

// Unwrap unwraps the SellerProductVariation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (spv *SellerProductVariation) Unwrap() *SellerProductVariation {
	tx, ok := spv.config.driver.(*txDriver)
	if !ok {
		panic("ent: SellerProductVariation is not a transactional entity")
	}
	spv.config.driver = tx.drv
	return spv
}

// String implements the fmt.Stringer.
func (spv *SellerProductVariation) String() string {
	var builder strings.Builder
	builder.WriteString("SellerProductVariation(")
	builder.WriteString(fmt.Sprintf("id=%v", spv.ID))
	builder.WriteString(", product_price=")
	builder.WriteString(fmt.Sprintf("%v", spv.ProductPrice))
	builder.WriteString(", selling_price=")
	builder.WriteString(fmt.Sprintf("%v", spv.SellingPrice))
	builder.WriteString(", quantity=")
	builder.WriteString(fmt.Sprintf("%v", spv.Quantity))
	builder.WriteString(", image=")
	builder.WriteString(spv.Image)
	builder.WriteString(", created_at=")
	builder.WriteString(spv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(spv.UpdatedAt.Format(time.ANSIC))
	if v := spv.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SellerProductVariations is a parsable slice of SellerProductVariation.
type SellerProductVariations []*SellerProductVariation

func (spv SellerProductVariations) config(cfg config) {
	for _i := range spv {
		spv[_i].config = cfg
	}
}
