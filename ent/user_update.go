// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/cart"
	"bongo/ent/checkout"
	"bongo/ent/checkoutproduct"
	"bongo/ent/predicate"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerrequest"
	"bongo/ent/sellershop"
	"bongo/ent/user"
	"bongo/ent/userlocation"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetPhoneNumber sets the "phone_number" field.
func (uu *UserUpdate) SetPhoneNumber(s string) *UserUpdate {
	uu.mutation.SetPhoneNumber(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetAdmin sets the "admin" field.
func (uu *UserUpdate) SetAdmin(b bool) *UserUpdate {
	uu.mutation.SetAdmin(b)
	return uu
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAdmin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetAdmin(*b)
	}
	return uu
}

// SetStaff sets the "staff" field.
func (uu *UserUpdate) SetStaff(b bool) *UserUpdate {
	uu.mutation.SetStaff(b)
	return uu
}

// SetNillableStaff sets the "staff" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStaff(b *bool) *UserUpdate {
	if b != nil {
		uu.SetStaff(*b)
	}
	return uu
}

// SetSeller sets the "seller" field.
func (uu *UserUpdate) SetSeller(b bool) *UserUpdate {
	uu.mutation.SetSeller(b)
	return uu
}

// SetNillableSeller sets the "seller" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSeller(b *bool) *UserUpdate {
	if b != nil {
		uu.SetSeller(*b)
	}
	return uu
}

// SetActive sets the "active" field.
func (uu *UserUpdate) SetActive(b bool) *UserUpdate {
	uu.mutation.SetActive(b)
	return uu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetActive(*b)
	}
	return uu
}

// SetAdminUserName sets the "admin_user_name" field.
func (uu *UserUpdate) SetAdminUserName(s string) *UserUpdate {
	uu.mutation.SetAdminUserName(s)
	return uu
}

// SetAdminUserToken sets the "admin_user_token" field.
func (uu *UserUpdate) SetAdminUserToken(s string) *UserUpdate {
	uu.mutation.SetAdminUserToken(s)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// AddSellerRequestIDs adds the "seller_requests" edge to the SellerRequest entity by IDs.
func (uu *UserUpdate) AddSellerRequestIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSellerRequestIDs(ids...)
	return uu
}

// AddSellerRequests adds the "seller_requests" edges to the SellerRequest entity.
func (uu *UserUpdate) AddSellerRequests(s ...*SellerRequest) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSellerRequestIDs(ids...)
}

// AddSellerShopIDs adds the "seller_shops" edge to the SellerShop entity by IDs.
func (uu *UserUpdate) AddSellerShopIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSellerShopIDs(ids...)
	return uu
}

// AddSellerShops adds the "seller_shops" edges to the SellerShop entity.
func (uu *UserUpdate) AddSellerShops(s ...*SellerShop) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSellerShopIDs(ids...)
}

// AddSellerProductIDs adds the "seller_products" edge to the SellerProduct entity by IDs.
func (uu *UserUpdate) AddSellerProductIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSellerProductIDs(ids...)
	return uu
}

// AddSellerProducts adds the "seller_products" edges to the SellerProduct entity.
func (uu *UserUpdate) AddSellerProducts(s ...*SellerProduct) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSellerProductIDs(ids...)
}

// AddCartIDs adds the "carts" edge to the Cart entity by IDs.
func (uu *UserUpdate) AddCartIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCartIDs(ids...)
	return uu
}

// AddCarts adds the "carts" edges to the Cart entity.
func (uu *UserUpdate) AddCarts(c ...*Cart) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCartIDs(ids...)
}

// AddUserLocationIDs adds the "user_locations" edge to the UserLocation entity by IDs.
func (uu *UserUpdate) AddUserLocationIDs(ids ...int) *UserUpdate {
	uu.mutation.AddUserLocationIDs(ids...)
	return uu
}

// AddUserLocations adds the "user_locations" edges to the UserLocation entity.
func (uu *UserUpdate) AddUserLocations(u ...*UserLocation) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.AddUserLocationIDs(ids...)
}

// AddCheckoutIDs adds the "checkouts" edge to the Checkout entity by IDs.
func (uu *UserUpdate) AddCheckoutIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCheckoutIDs(ids...)
	return uu
}

// AddCheckouts adds the "checkouts" edges to the Checkout entity.
func (uu *UserUpdate) AddCheckouts(c ...*Checkout) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCheckoutIDs(ids...)
}

// AddCheckoutProductIDs adds the "checkout_products" edge to the CheckoutProduct entity by IDs.
func (uu *UserUpdate) AddCheckoutProductIDs(ids ...int) *UserUpdate {
	uu.mutation.AddCheckoutProductIDs(ids...)
	return uu
}

// AddCheckoutProducts adds the "checkout_products" edges to the CheckoutProduct entity.
func (uu *UserUpdate) AddCheckoutProducts(c ...*CheckoutProduct) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddCheckoutProductIDs(ids...)
}

// AddSellerCheckoutProductIDs adds the "seller_checkout_products" edge to the CheckoutProduct entity by IDs.
func (uu *UserUpdate) AddSellerCheckoutProductIDs(ids ...int) *UserUpdate {
	uu.mutation.AddSellerCheckoutProductIDs(ids...)
	return uu
}

// AddSellerCheckoutProducts adds the "seller_checkout_products" edges to the CheckoutProduct entity.
func (uu *UserUpdate) AddSellerCheckoutProducts(c ...*CheckoutProduct) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddSellerCheckoutProductIDs(ids...)
}

// AddApprovedShopIDs adds the "approved_shops" edge to the SellerShop entity by IDs.
func (uu *UserUpdate) AddApprovedShopIDs(ids ...int) *UserUpdate {
	uu.mutation.AddApprovedShopIDs(ids...)
	return uu
}

// AddApprovedShops adds the "approved_shops" edges to the SellerShop entity.
func (uu *UserUpdate) AddApprovedShops(s ...*SellerShop) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddApprovedShopIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearSellerRequests clears all "seller_requests" edges to the SellerRequest entity.
func (uu *UserUpdate) ClearSellerRequests() *UserUpdate {
	uu.mutation.ClearSellerRequests()
	return uu
}

// RemoveSellerRequestIDs removes the "seller_requests" edge to SellerRequest entities by IDs.
func (uu *UserUpdate) RemoveSellerRequestIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSellerRequestIDs(ids...)
	return uu
}

// RemoveSellerRequests removes "seller_requests" edges to SellerRequest entities.
func (uu *UserUpdate) RemoveSellerRequests(s ...*SellerRequest) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSellerRequestIDs(ids...)
}

// ClearSellerShops clears all "seller_shops" edges to the SellerShop entity.
func (uu *UserUpdate) ClearSellerShops() *UserUpdate {
	uu.mutation.ClearSellerShops()
	return uu
}

// RemoveSellerShopIDs removes the "seller_shops" edge to SellerShop entities by IDs.
func (uu *UserUpdate) RemoveSellerShopIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSellerShopIDs(ids...)
	return uu
}

// RemoveSellerShops removes "seller_shops" edges to SellerShop entities.
func (uu *UserUpdate) RemoveSellerShops(s ...*SellerShop) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSellerShopIDs(ids...)
}

// ClearSellerProducts clears all "seller_products" edges to the SellerProduct entity.
func (uu *UserUpdate) ClearSellerProducts() *UserUpdate {
	uu.mutation.ClearSellerProducts()
	return uu
}

// RemoveSellerProductIDs removes the "seller_products" edge to SellerProduct entities by IDs.
func (uu *UserUpdate) RemoveSellerProductIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSellerProductIDs(ids...)
	return uu
}

// RemoveSellerProducts removes "seller_products" edges to SellerProduct entities.
func (uu *UserUpdate) RemoveSellerProducts(s ...*SellerProduct) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSellerProductIDs(ids...)
}

// ClearCarts clears all "carts" edges to the Cart entity.
func (uu *UserUpdate) ClearCarts() *UserUpdate {
	uu.mutation.ClearCarts()
	return uu
}

// RemoveCartIDs removes the "carts" edge to Cart entities by IDs.
func (uu *UserUpdate) RemoveCartIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCartIDs(ids...)
	return uu
}

// RemoveCarts removes "carts" edges to Cart entities.
func (uu *UserUpdate) RemoveCarts(c ...*Cart) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCartIDs(ids...)
}

// ClearUserLocations clears all "user_locations" edges to the UserLocation entity.
func (uu *UserUpdate) ClearUserLocations() *UserUpdate {
	uu.mutation.ClearUserLocations()
	return uu
}

// RemoveUserLocationIDs removes the "user_locations" edge to UserLocation entities by IDs.
func (uu *UserUpdate) RemoveUserLocationIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveUserLocationIDs(ids...)
	return uu
}

// RemoveUserLocations removes "user_locations" edges to UserLocation entities.
func (uu *UserUpdate) RemoveUserLocations(u ...*UserLocation) *UserUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uu.RemoveUserLocationIDs(ids...)
}

// ClearCheckouts clears all "checkouts" edges to the Checkout entity.
func (uu *UserUpdate) ClearCheckouts() *UserUpdate {
	uu.mutation.ClearCheckouts()
	return uu
}

// RemoveCheckoutIDs removes the "checkouts" edge to Checkout entities by IDs.
func (uu *UserUpdate) RemoveCheckoutIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCheckoutIDs(ids...)
	return uu
}

// RemoveCheckouts removes "checkouts" edges to Checkout entities.
func (uu *UserUpdate) RemoveCheckouts(c ...*Checkout) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCheckoutIDs(ids...)
}

// ClearCheckoutProducts clears all "checkout_products" edges to the CheckoutProduct entity.
func (uu *UserUpdate) ClearCheckoutProducts() *UserUpdate {
	uu.mutation.ClearCheckoutProducts()
	return uu
}

// RemoveCheckoutProductIDs removes the "checkout_products" edge to CheckoutProduct entities by IDs.
func (uu *UserUpdate) RemoveCheckoutProductIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveCheckoutProductIDs(ids...)
	return uu
}

// RemoveCheckoutProducts removes "checkout_products" edges to CheckoutProduct entities.
func (uu *UserUpdate) RemoveCheckoutProducts(c ...*CheckoutProduct) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveCheckoutProductIDs(ids...)
}

// ClearSellerCheckoutProducts clears all "seller_checkout_products" edges to the CheckoutProduct entity.
func (uu *UserUpdate) ClearSellerCheckoutProducts() *UserUpdate {
	uu.mutation.ClearSellerCheckoutProducts()
	return uu
}

// RemoveSellerCheckoutProductIDs removes the "seller_checkout_products" edge to CheckoutProduct entities by IDs.
func (uu *UserUpdate) RemoveSellerCheckoutProductIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveSellerCheckoutProductIDs(ids...)
	return uu
}

// RemoveSellerCheckoutProducts removes "seller_checkout_products" edges to CheckoutProduct entities.
func (uu *UserUpdate) RemoveSellerCheckoutProducts(c ...*CheckoutProduct) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveSellerCheckoutProductIDs(ids...)
}

// ClearApprovedShops clears all "approved_shops" edges to the SellerShop entity.
func (uu *UserUpdate) ClearApprovedShops() *UserUpdate {
	uu.mutation.ClearApprovedShops()
	return uu
}

// RemoveApprovedShopIDs removes the "approved_shops" edge to SellerShop entities by IDs.
func (uu *UserUpdate) RemoveApprovedShopIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveApprovedShopIDs(ids...)
	return uu
}

// RemoveApprovedShops removes "approved_shops" edges to SellerShop entities.
func (uu *UserUpdate) RemoveApprovedShops(s ...*SellerShop) *UserUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveApprovedShopIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uu.defaults()
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf("ent: validator failed for field \"phone_number\": %w", err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uu.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhoneNumber,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.Admin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldAdmin,
		})
	}
	if value, ok := uu.mutation.Staff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldStaff,
		})
	}
	if value, ok := uu.mutation.Seller(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldSeller,
		})
	}
	if value, ok := uu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldActive,
		})
	}
	if value, ok := uu.mutation.AdminUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAdminUserName,
		})
	}
	if value, ok := uu.mutation.AdminUserToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAdminUserToken,
		})
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldDeletedAt,
		})
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldDeletedAt,
		})
	}
	if uu.mutation.SellerRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerRequestsTable,
			Columns: []string{user.SellerRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSellerRequestsIDs(); len(nodes) > 0 && !uu.mutation.SellerRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerRequestsTable,
			Columns: []string{user.SellerRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SellerRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerRequestsTable,
			Columns: []string{user.SellerRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SellerShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerShopsTable,
			Columns: []string{user.SellerShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSellerShopsIDs(); len(nodes) > 0 && !uu.mutation.SellerShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerShopsTable,
			Columns: []string{user.SellerShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SellerShopsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerShopsTable,
			Columns: []string{user.SellerShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SellerProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerProductsTable,
			Columns: []string{user.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSellerProductsIDs(); len(nodes) > 0 && !uu.mutation.SellerProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerProductsTable,
			Columns: []string{user.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SellerProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerProductsTable,
			Columns: []string{user.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CartsTable,
			Columns: []string{user.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCartsIDs(); len(nodes) > 0 && !uu.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CartsTable,
			Columns: []string{user.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CartsTable,
			Columns: []string{user.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLocationsTable,
			Columns: []string{user.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlocation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedUserLocationsIDs(); len(nodes) > 0 && !uu.mutation.UserLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLocationsTable,
			Columns: []string{user.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlocation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserLocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLocationsTable,
			Columns: []string{user.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlocation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCheckoutsIDs(); len(nodes) > 0 && !uu.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutProductsTable,
			Columns: []string{user.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedCheckoutProductsIDs(); len(nodes) > 0 && !uu.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutProductsTable,
			Columns: []string{user.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.CheckoutProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutProductsTable,
			Columns: []string{user.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SellerCheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerCheckoutProductsTable,
			Columns: []string{user.SellerCheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSellerCheckoutProductsIDs(); len(nodes) > 0 && !uu.mutation.SellerCheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerCheckoutProductsTable,
			Columns: []string{user.SellerCheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SellerCheckoutProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerCheckoutProductsTable,
			Columns: []string{user.SellerCheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ApprovedShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedShopsTable,
			Columns: []string{user.ApprovedShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedApprovedShopsIDs(); len(nodes) > 0 && !uu.mutation.ApprovedShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedShopsTable,
			Columns: []string{user.ApprovedShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ApprovedShopsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedShopsTable,
			Columns: []string{user.ApprovedShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetPhoneNumber sets the "phone_number" field.
func (uuo *UserUpdateOne) SetPhoneNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPhoneNumber(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetAdmin sets the "admin" field.
func (uuo *UserUpdateOne) SetAdmin(b bool) *UserUpdateOne {
	uuo.mutation.SetAdmin(b)
	return uuo
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAdmin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetAdmin(*b)
	}
	return uuo
}

// SetStaff sets the "staff" field.
func (uuo *UserUpdateOne) SetStaff(b bool) *UserUpdateOne {
	uuo.mutation.SetStaff(b)
	return uuo
}

// SetNillableStaff sets the "staff" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStaff(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetStaff(*b)
	}
	return uuo
}

// SetSeller sets the "seller" field.
func (uuo *UserUpdateOne) SetSeller(b bool) *UserUpdateOne {
	uuo.mutation.SetSeller(b)
	return uuo
}

// SetNillableSeller sets the "seller" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSeller(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetSeller(*b)
	}
	return uuo
}

// SetActive sets the "active" field.
func (uuo *UserUpdateOne) SetActive(b bool) *UserUpdateOne {
	uuo.mutation.SetActive(b)
	return uuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetActive(*b)
	}
	return uuo
}

// SetAdminUserName sets the "admin_user_name" field.
func (uuo *UserUpdateOne) SetAdminUserName(s string) *UserUpdateOne {
	uuo.mutation.SetAdminUserName(s)
	return uuo
}

// SetAdminUserToken sets the "admin_user_token" field.
func (uuo *UserUpdateOne) SetAdminUserToken(s string) *UserUpdateOne {
	uuo.mutation.SetAdminUserToken(s)
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// AddSellerRequestIDs adds the "seller_requests" edge to the SellerRequest entity by IDs.
func (uuo *UserUpdateOne) AddSellerRequestIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSellerRequestIDs(ids...)
	return uuo
}

// AddSellerRequests adds the "seller_requests" edges to the SellerRequest entity.
func (uuo *UserUpdateOne) AddSellerRequests(s ...*SellerRequest) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSellerRequestIDs(ids...)
}

// AddSellerShopIDs adds the "seller_shops" edge to the SellerShop entity by IDs.
func (uuo *UserUpdateOne) AddSellerShopIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSellerShopIDs(ids...)
	return uuo
}

// AddSellerShops adds the "seller_shops" edges to the SellerShop entity.
func (uuo *UserUpdateOne) AddSellerShops(s ...*SellerShop) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSellerShopIDs(ids...)
}

// AddSellerProductIDs adds the "seller_products" edge to the SellerProduct entity by IDs.
func (uuo *UserUpdateOne) AddSellerProductIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSellerProductIDs(ids...)
	return uuo
}

// AddSellerProducts adds the "seller_products" edges to the SellerProduct entity.
func (uuo *UserUpdateOne) AddSellerProducts(s ...*SellerProduct) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSellerProductIDs(ids...)
}

// AddCartIDs adds the "carts" edge to the Cart entity by IDs.
func (uuo *UserUpdateOne) AddCartIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCartIDs(ids...)
	return uuo
}

// AddCarts adds the "carts" edges to the Cart entity.
func (uuo *UserUpdateOne) AddCarts(c ...*Cart) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCartIDs(ids...)
}

// AddUserLocationIDs adds the "user_locations" edge to the UserLocation entity by IDs.
func (uuo *UserUpdateOne) AddUserLocationIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddUserLocationIDs(ids...)
	return uuo
}

// AddUserLocations adds the "user_locations" edges to the UserLocation entity.
func (uuo *UserUpdateOne) AddUserLocations(u ...*UserLocation) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.AddUserLocationIDs(ids...)
}

// AddCheckoutIDs adds the "checkouts" edge to the Checkout entity by IDs.
func (uuo *UserUpdateOne) AddCheckoutIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCheckoutIDs(ids...)
	return uuo
}

// AddCheckouts adds the "checkouts" edges to the Checkout entity.
func (uuo *UserUpdateOne) AddCheckouts(c ...*Checkout) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCheckoutIDs(ids...)
}

// AddCheckoutProductIDs adds the "checkout_products" edge to the CheckoutProduct entity by IDs.
func (uuo *UserUpdateOne) AddCheckoutProductIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddCheckoutProductIDs(ids...)
	return uuo
}

// AddCheckoutProducts adds the "checkout_products" edges to the CheckoutProduct entity.
func (uuo *UserUpdateOne) AddCheckoutProducts(c ...*CheckoutProduct) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddCheckoutProductIDs(ids...)
}

// AddSellerCheckoutProductIDs adds the "seller_checkout_products" edge to the CheckoutProduct entity by IDs.
func (uuo *UserUpdateOne) AddSellerCheckoutProductIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddSellerCheckoutProductIDs(ids...)
	return uuo
}

// AddSellerCheckoutProducts adds the "seller_checkout_products" edges to the CheckoutProduct entity.
func (uuo *UserUpdateOne) AddSellerCheckoutProducts(c ...*CheckoutProduct) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddSellerCheckoutProductIDs(ids...)
}

// AddApprovedShopIDs adds the "approved_shops" edge to the SellerShop entity by IDs.
func (uuo *UserUpdateOne) AddApprovedShopIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddApprovedShopIDs(ids...)
	return uuo
}

// AddApprovedShops adds the "approved_shops" edges to the SellerShop entity.
func (uuo *UserUpdateOne) AddApprovedShops(s ...*SellerShop) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddApprovedShopIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearSellerRequests clears all "seller_requests" edges to the SellerRequest entity.
func (uuo *UserUpdateOne) ClearSellerRequests() *UserUpdateOne {
	uuo.mutation.ClearSellerRequests()
	return uuo
}

// RemoveSellerRequestIDs removes the "seller_requests" edge to SellerRequest entities by IDs.
func (uuo *UserUpdateOne) RemoveSellerRequestIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSellerRequestIDs(ids...)
	return uuo
}

// RemoveSellerRequests removes "seller_requests" edges to SellerRequest entities.
func (uuo *UserUpdateOne) RemoveSellerRequests(s ...*SellerRequest) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSellerRequestIDs(ids...)
}

// ClearSellerShops clears all "seller_shops" edges to the SellerShop entity.
func (uuo *UserUpdateOne) ClearSellerShops() *UserUpdateOne {
	uuo.mutation.ClearSellerShops()
	return uuo
}

// RemoveSellerShopIDs removes the "seller_shops" edge to SellerShop entities by IDs.
func (uuo *UserUpdateOne) RemoveSellerShopIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSellerShopIDs(ids...)
	return uuo
}

// RemoveSellerShops removes "seller_shops" edges to SellerShop entities.
func (uuo *UserUpdateOne) RemoveSellerShops(s ...*SellerShop) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSellerShopIDs(ids...)
}

// ClearSellerProducts clears all "seller_products" edges to the SellerProduct entity.
func (uuo *UserUpdateOne) ClearSellerProducts() *UserUpdateOne {
	uuo.mutation.ClearSellerProducts()
	return uuo
}

// RemoveSellerProductIDs removes the "seller_products" edge to SellerProduct entities by IDs.
func (uuo *UserUpdateOne) RemoveSellerProductIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSellerProductIDs(ids...)
	return uuo
}

// RemoveSellerProducts removes "seller_products" edges to SellerProduct entities.
func (uuo *UserUpdateOne) RemoveSellerProducts(s ...*SellerProduct) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSellerProductIDs(ids...)
}

// ClearCarts clears all "carts" edges to the Cart entity.
func (uuo *UserUpdateOne) ClearCarts() *UserUpdateOne {
	uuo.mutation.ClearCarts()
	return uuo
}

// RemoveCartIDs removes the "carts" edge to Cart entities by IDs.
func (uuo *UserUpdateOne) RemoveCartIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCartIDs(ids...)
	return uuo
}

// RemoveCarts removes "carts" edges to Cart entities.
func (uuo *UserUpdateOne) RemoveCarts(c ...*Cart) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCartIDs(ids...)
}

// ClearUserLocations clears all "user_locations" edges to the UserLocation entity.
func (uuo *UserUpdateOne) ClearUserLocations() *UserUpdateOne {
	uuo.mutation.ClearUserLocations()
	return uuo
}

// RemoveUserLocationIDs removes the "user_locations" edge to UserLocation entities by IDs.
func (uuo *UserUpdateOne) RemoveUserLocationIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveUserLocationIDs(ids...)
	return uuo
}

// RemoveUserLocations removes "user_locations" edges to UserLocation entities.
func (uuo *UserUpdateOne) RemoveUserLocations(u ...*UserLocation) *UserUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uuo.RemoveUserLocationIDs(ids...)
}

// ClearCheckouts clears all "checkouts" edges to the Checkout entity.
func (uuo *UserUpdateOne) ClearCheckouts() *UserUpdateOne {
	uuo.mutation.ClearCheckouts()
	return uuo
}

// RemoveCheckoutIDs removes the "checkouts" edge to Checkout entities by IDs.
func (uuo *UserUpdateOne) RemoveCheckoutIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCheckoutIDs(ids...)
	return uuo
}

// RemoveCheckouts removes "checkouts" edges to Checkout entities.
func (uuo *UserUpdateOne) RemoveCheckouts(c ...*Checkout) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCheckoutIDs(ids...)
}

// ClearCheckoutProducts clears all "checkout_products" edges to the CheckoutProduct entity.
func (uuo *UserUpdateOne) ClearCheckoutProducts() *UserUpdateOne {
	uuo.mutation.ClearCheckoutProducts()
	return uuo
}

// RemoveCheckoutProductIDs removes the "checkout_products" edge to CheckoutProduct entities by IDs.
func (uuo *UserUpdateOne) RemoveCheckoutProductIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveCheckoutProductIDs(ids...)
	return uuo
}

// RemoveCheckoutProducts removes "checkout_products" edges to CheckoutProduct entities.
func (uuo *UserUpdateOne) RemoveCheckoutProducts(c ...*CheckoutProduct) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveCheckoutProductIDs(ids...)
}

// ClearSellerCheckoutProducts clears all "seller_checkout_products" edges to the CheckoutProduct entity.
func (uuo *UserUpdateOne) ClearSellerCheckoutProducts() *UserUpdateOne {
	uuo.mutation.ClearSellerCheckoutProducts()
	return uuo
}

// RemoveSellerCheckoutProductIDs removes the "seller_checkout_products" edge to CheckoutProduct entities by IDs.
func (uuo *UserUpdateOne) RemoveSellerCheckoutProductIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveSellerCheckoutProductIDs(ids...)
	return uuo
}

// RemoveSellerCheckoutProducts removes "seller_checkout_products" edges to CheckoutProduct entities.
func (uuo *UserUpdateOne) RemoveSellerCheckoutProducts(c ...*CheckoutProduct) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveSellerCheckoutProductIDs(ids...)
}

// ClearApprovedShops clears all "approved_shops" edges to the SellerShop entity.
func (uuo *UserUpdateOne) ClearApprovedShops() *UserUpdateOne {
	uuo.mutation.ClearApprovedShops()
	return uuo
}

// RemoveApprovedShopIDs removes the "approved_shops" edge to SellerShop entities by IDs.
func (uuo *UserUpdateOne) RemoveApprovedShopIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveApprovedShopIDs(ids...)
	return uuo
}

// RemoveApprovedShops removes "approved_shops" edges to SellerShop entities.
func (uuo *UserUpdateOne) RemoveApprovedShops(s ...*SellerShop) *UserUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveApprovedShopIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uuo.defaults()
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.PhoneNumber(); ok {
		if err := user.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf("ent: validator failed for field \"phone_number\": %w", err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uuo.mutation.PhoneNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhoneNumber,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.Admin(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldAdmin,
		})
	}
	if value, ok := uuo.mutation.Staff(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldStaff,
		})
	}
	if value, ok := uuo.mutation.Seller(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldSeller,
		})
	}
	if value, ok := uuo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldActive,
		})
	}
	if value, ok := uuo.mutation.AdminUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAdminUserName,
		})
	}
	if value, ok := uuo.mutation.AdminUserToken(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldAdminUserToken,
		})
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldDeletedAt,
		})
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldDeletedAt,
		})
	}
	if uuo.mutation.SellerRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerRequestsTable,
			Columns: []string{user.SellerRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSellerRequestsIDs(); len(nodes) > 0 && !uuo.mutation.SellerRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerRequestsTable,
			Columns: []string{user.SellerRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SellerRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerRequestsTable,
			Columns: []string{user.SellerRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SellerShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerShopsTable,
			Columns: []string{user.SellerShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSellerShopsIDs(); len(nodes) > 0 && !uuo.mutation.SellerShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerShopsTable,
			Columns: []string{user.SellerShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SellerShopsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerShopsTable,
			Columns: []string{user.SellerShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SellerProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerProductsTable,
			Columns: []string{user.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSellerProductsIDs(); len(nodes) > 0 && !uuo.mutation.SellerProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerProductsTable,
			Columns: []string{user.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SellerProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerProductsTable,
			Columns: []string{user.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CartsTable,
			Columns: []string{user.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCartsIDs(); len(nodes) > 0 && !uuo.mutation.CartsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CartsTable,
			Columns: []string{user.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CartsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CartsTable,
			Columns: []string{user.CartsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLocationsTable,
			Columns: []string{user.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlocation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedUserLocationsIDs(); len(nodes) > 0 && !uuo.mutation.UserLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLocationsTable,
			Columns: []string{user.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlocation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserLocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserLocationsTable,
			Columns: []string{user.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlocation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCheckoutsIDs(); len(nodes) > 0 && !uuo.mutation.CheckoutsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CheckoutsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutsTable,
			Columns: []string{user.CheckoutsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutProductsTable,
			Columns: []string{user.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedCheckoutProductsIDs(); len(nodes) > 0 && !uuo.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutProductsTable,
			Columns: []string{user.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.CheckoutProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CheckoutProductsTable,
			Columns: []string{user.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SellerCheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerCheckoutProductsTable,
			Columns: []string{user.SellerCheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSellerCheckoutProductsIDs(); len(nodes) > 0 && !uuo.mutation.SellerCheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerCheckoutProductsTable,
			Columns: []string{user.SellerCheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SellerCheckoutProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SellerCheckoutProductsTable,
			Columns: []string{user.SellerCheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ApprovedShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedShopsTable,
			Columns: []string{user.ApprovedShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedApprovedShopsIDs(); len(nodes) > 0 && !uuo.mutation.ApprovedShopsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedShopsTable,
			Columns: []string{user.ApprovedShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ApprovedShopsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ApprovedShopsTable,
			Columns: []string{user.ApprovedShopsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
