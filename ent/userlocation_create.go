// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/checkout"
	"bongo/ent/user"
	"bongo/ent/userlocation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserLocationCreate is the builder for creating a UserLocation entity.
type UserLocationCreate struct {
	config
	mutation *UserLocationMutation
	hooks    []Hook
}

// SetArea sets the "area" field.
func (ulc *UserLocationCreate) SetArea(s string) *UserLocationCreate {
	ulc.mutation.SetArea(s)
	return ulc
}

// SetStreet sets the "street" field.
func (ulc *UserLocationCreate) SetStreet(s string) *UserLocationCreate {
	ulc.mutation.SetStreet(s)
	return ulc
}

// SetHouse sets the "house" field.
func (ulc *UserLocationCreate) SetHouse(s string) *UserLocationCreate {
	ulc.mutation.SetHouse(s)
	return ulc
}

// SetPostOffice sets the "post_office" field.
func (ulc *UserLocationCreate) SetPostOffice(s string) *UserLocationCreate {
	ulc.mutation.SetPostOffice(s)
	return ulc
}

// SetPostCode sets the "post_code" field.
func (ulc *UserLocationCreate) SetPostCode(i int) *UserLocationCreate {
	ulc.mutation.SetPostCode(i)
	return ulc
}

// SetPoliceStation sets the "police_station" field.
func (ulc *UserLocationCreate) SetPoliceStation(s string) *UserLocationCreate {
	ulc.mutation.SetPoliceStation(s)
	return ulc
}

// SetCity sets the "city" field.
func (ulc *UserLocationCreate) SetCity(s string) *UserLocationCreate {
	ulc.mutation.SetCity(s)
	return ulc
}

// SetCreatedAt sets the "created_at" field.
func (ulc *UserLocationCreate) SetCreatedAt(t time.Time) *UserLocationCreate {
	ulc.mutation.SetCreatedAt(t)
	return ulc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ulc *UserLocationCreate) SetNillableCreatedAt(t *time.Time) *UserLocationCreate {
	if t != nil {
		ulc.SetCreatedAt(*t)
	}
	return ulc
}

// SetUpdatedAt sets the "updated_at" field.
func (ulc *UserLocationCreate) SetUpdatedAt(t time.Time) *UserLocationCreate {
	ulc.mutation.SetUpdatedAt(t)
	return ulc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ulc *UserLocationCreate) SetNillableUpdatedAt(t *time.Time) *UserLocationCreate {
	if t != nil {
		ulc.SetUpdatedAt(*t)
	}
	return ulc
}

// SetDeletedAt sets the "deleted_at" field.
func (ulc *UserLocationCreate) SetDeletedAt(t time.Time) *UserLocationCreate {
	ulc.mutation.SetDeletedAt(t)
	return ulc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ulc *UserLocationCreate) SetNillableDeletedAt(t *time.Time) *UserLocationCreate {
	if t != nil {
		ulc.SetDeletedAt(*t)
	}
	return ulc
}

// SetGetUserID sets the "get_user" edge to the User entity by ID.
func (ulc *UserLocationCreate) SetGetUserID(id int) *UserLocationCreate {
	ulc.mutation.SetGetUserID(id)
	return ulc
}

// SetNillableGetUserID sets the "get_user" edge to the User entity by ID if the given value is not nil.
func (ulc *UserLocationCreate) SetNillableGetUserID(id *int) *UserLocationCreate {
	if id != nil {
		ulc = ulc.SetGetUserID(*id)
	}
	return ulc
}

// SetGetUser sets the "get_user" edge to the User entity.
func (ulc *UserLocationCreate) SetGetUser(u *User) *UserLocationCreate {
	return ulc.SetGetUserID(u.ID)
}

// AddUserLocationIDs adds the "user_locations" edge to the Checkout entity by IDs.
func (ulc *UserLocationCreate) AddUserLocationIDs(ids ...int) *UserLocationCreate {
	ulc.mutation.AddUserLocationIDs(ids...)
	return ulc
}

// AddUserLocations adds the "user_locations" edges to the Checkout entity.
func (ulc *UserLocationCreate) AddUserLocations(c ...*Checkout) *UserLocationCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ulc.AddUserLocationIDs(ids...)
}

// Mutation returns the UserLocationMutation object of the builder.
func (ulc *UserLocationCreate) Mutation() *UserLocationMutation {
	return ulc.mutation
}

// Save creates the UserLocation in the database.
func (ulc *UserLocationCreate) Save(ctx context.Context) (*UserLocation, error) {
	var (
		err  error
		node *UserLocation
	)
	ulc.defaults()
	if len(ulc.hooks) == 0 {
		if err = ulc.check(); err != nil {
			return nil, err
		}
		node, err = ulc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLocationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ulc.check(); err != nil {
				return nil, err
			}
			ulc.mutation = mutation
			if node, err = ulc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ulc.hooks) - 1; i >= 0; i-- {
			if ulc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ulc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ulc *UserLocationCreate) SaveX(ctx context.Context) *UserLocation {
	v, err := ulc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ulc *UserLocationCreate) Exec(ctx context.Context) error {
	_, err := ulc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulc *UserLocationCreate) ExecX(ctx context.Context) {
	if err := ulc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulc *UserLocationCreate) defaults() {
	if _, ok := ulc.mutation.CreatedAt(); !ok {
		v := userlocation.DefaultCreatedAt()
		ulc.mutation.SetCreatedAt(v)
	}
	if _, ok := ulc.mutation.UpdatedAt(); !ok {
		v := userlocation.DefaultUpdatedAt()
		ulc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ulc *UserLocationCreate) check() error {
	if _, ok := ulc.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required field "UserLocation.area"`)}
	}
	if _, ok := ulc.mutation.Street(); !ok {
		return &ValidationError{Name: "street", err: errors.New(`ent: missing required field "UserLocation.street"`)}
	}
	if _, ok := ulc.mutation.House(); !ok {
		return &ValidationError{Name: "house", err: errors.New(`ent: missing required field "UserLocation.house"`)}
	}
	if _, ok := ulc.mutation.PostOffice(); !ok {
		return &ValidationError{Name: "post_office", err: errors.New(`ent: missing required field "UserLocation.post_office"`)}
	}
	if _, ok := ulc.mutation.PostCode(); !ok {
		return &ValidationError{Name: "post_code", err: errors.New(`ent: missing required field "UserLocation.post_code"`)}
	}
	if _, ok := ulc.mutation.PoliceStation(); !ok {
		return &ValidationError{Name: "police_station", err: errors.New(`ent: missing required field "UserLocation.police_station"`)}
	}
	if _, ok := ulc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "UserLocation.city"`)}
	}
	if _, ok := ulc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserLocation.created_at"`)}
	}
	if _, ok := ulc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserLocation.updated_at"`)}
	}
	return nil
}

func (ulc *UserLocationCreate) sqlSave(ctx context.Context) (*UserLocation, error) {
	_node, _spec := ulc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ulc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ulc *UserLocationCreate) createSpec() (*UserLocation, *sqlgraph.CreateSpec) {
	var (
		_node = &UserLocation{config: ulc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userlocation.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlocation.FieldID,
			},
		}
	)
	if value, ok := ulc.mutation.Area(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldArea,
		})
		_node.Area = value
	}
	if value, ok := ulc.mutation.Street(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldStreet,
		})
		_node.Street = value
	}
	if value, ok := ulc.mutation.House(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldHouse,
		})
		_node.House = value
	}
	if value, ok := ulc.mutation.PostOffice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldPostOffice,
		})
		_node.PostOffice = value
	}
	if value, ok := ulc.mutation.PostCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlocation.FieldPostCode,
		})
		_node.PostCode = value
	}
	if value, ok := ulc.mutation.PoliceStation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldPoliceStation,
		})
		_node.PoliceStation = value
	}
	if value, ok := ulc.mutation.City(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldCity,
		})
		_node.City = value
	}
	if value, ok := ulc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlocation.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ulc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlocation.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ulc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlocation.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := ulc.mutation.GetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlocation.GetUserTable,
			Columns: []string{userlocation.GetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_user_locations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ulc.mutation.UserLocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlocation.UserLocationsTable,
			Columns: []string{userlocation.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserLocationCreateBulk is the builder for creating many UserLocation entities in bulk.
type UserLocationCreateBulk struct {
	config
	builders []*UserLocationCreate
}

// Save creates the UserLocation entities in the database.
func (ulcb *UserLocationCreateBulk) Save(ctx context.Context) ([]*UserLocation, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ulcb.builders))
	nodes := make([]*UserLocation, len(ulcb.builders))
	mutators := make([]Mutator, len(ulcb.builders))
	for i := range ulcb.builders {
		func(i int, root context.Context) {
			builder := ulcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserLocationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ulcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ulcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ulcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ulcb *UserLocationCreateBulk) SaveX(ctx context.Context) []*UserLocation {
	v, err := ulcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ulcb *UserLocationCreateBulk) Exec(ctx context.Context) error {
	_, err := ulcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulcb *UserLocationCreateBulk) ExecX(ctx context.Context) {
	if err := ulcb.Exec(ctx); err != nil {
		panic(err)
	}
}
