// Code generated by entc, DO NOT EDIT.

package category

import (
	"time"
)

const (
	// Label holds the string label denoting the category type in the database.
	Label = "category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeShopCategory holds the string denoting the shop_category edge name in mutations.
	EdgeShopCategory = "shop_category"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeProductCategories holds the string denoting the product_categories edge name in mutations.
	EdgeProductCategories = "product_categories"
	// EdgeSellerProducts holds the string denoting the seller_products edge name in mutations.
	EdgeSellerProducts = "seller_products"
	// Table holds the table name of the category in the database.
	Table = "categories"
	// ShopCategoryTable is the table that holds the shop_category relation/edge.
	ShopCategoryTable = "categories"
	// ShopCategoryInverseTable is the table name for the ShopCategory entity.
	// It exists in this package in order to avoid circular dependency with the "shopcategory" package.
	ShopCategoryInverseTable = "shop_categories"
	// ShopCategoryColumn is the table column denoting the shop_category relation/edge.
	ShopCategoryColumn = "shop_category_categories"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "categories"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "category_children"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "categories"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "category_children"
	// ProductCategoriesTable is the table that holds the product_categories relation/edge.
	ProductCategoriesTable = "seller_product_categories"
	// ProductCategoriesInverseTable is the table name for the SellerProductCategory entity.
	// It exists in this package in order to avoid circular dependency with the "sellerproductcategory" package.
	ProductCategoriesInverseTable = "seller_product_categories"
	// ProductCategoriesColumn is the table column denoting the product_categories relation/edge.
	ProductCategoriesColumn = "category_product_categories"
	// SellerProductsTable is the table that holds the seller_products relation/edge. The primary key declared below.
	SellerProductsTable = "category_seller_products"
	// SellerProductsInverseTable is the table name for the SellerProduct entity.
	// It exists in this package in order to avoid circular dependency with the "sellerproduct" package.
	SellerProductsInverseTable = "seller_products"
)

// Columns holds all SQL columns for category fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSlug,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "categories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"category_children",
	"shop_category_categories",
}

var (
	// SellerProductsPrimaryKey and SellerProductsColumn2 are the table columns denoting the
	// primary key for the seller_products relation (M2M).
	SellerProductsPrimaryKey = []string{"category_id", "seller_product_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
