// Code generated by entc, DO NOT EDIT.

package sellershop

import (
	"time"
)

const (
	// Label holds the string label denoting the sellershop type in the database.
	Label = "seller_shop"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldContactNumber holds the string denoting the contact_number field in the database.
	FieldContactNumber = "contact_number"
	// FieldBanner holds the string denoting the banner field in the database.
	FieldBanner = "banner"
	// FieldShopCategoryID holds the string denoting the shop_category_id field in the database.
	FieldShopCategoryID = "shop_category_id"
	// FieldShopCategory holds the string denoting the shop_category field in the database.
	FieldShopCategory = "shop_category"
	// FieldBusinessLocation holds the string denoting the business_location field in the database.
	FieldBusinessLocation = "business_location"
	// FieldTaxID holds the string denoting the tax_id field in the database.
	FieldTaxID = "tax_id"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAdmin holds the string denoting the admin edge name in mutations.
	EdgeAdmin = "admin"
	// EdgeSellerProducts holds the string denoting the seller_products edge name in mutations.
	EdgeSellerProducts = "seller_products"
	// EdgeSellerShopProducts holds the string denoting the seller_shop_products edge name in mutations.
	EdgeSellerShopProducts = "seller_shop_products"
	// Table holds the table name of the sellershop in the database.
	Table = "seller_shops"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "seller_shops"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_seller_shops"
	// AdminTable is the table that holds the admin relation/edge.
	AdminTable = "seller_shops"
	// AdminInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AdminInverseTable = "users"
	// AdminColumn is the table column denoting the admin relation/edge.
	AdminColumn = "user_approved_shops"
	// SellerProductsTable is the table that holds the seller_products relation/edge.
	SellerProductsTable = "seller_products"
	// SellerProductsInverseTable is the table name for the SellerProduct entity.
	// It exists in this package in order to avoid circular dependency with the "sellerproduct" package.
	SellerProductsInverseTable = "seller_products"
	// SellerProductsColumn is the table column denoting the seller_products relation/edge.
	SellerProductsColumn = "seller_shop_seller_products"
	// SellerShopProductsTable is the table that holds the seller_shop_products relation/edge.
	SellerShopProductsTable = "seller_shop_products"
	// SellerShopProductsInverseTable is the table name for the SellerShopProduct entity.
	// It exists in this package in order to avoid circular dependency with the "sellershopproduct" package.
	SellerShopProductsInverseTable = "seller_shop_products"
	// SellerShopProductsColumn is the table column denoting the seller_shop_products relation/edge.
	SellerShopProductsColumn = "seller_shop_seller_shop_products"
)

// Columns holds all SQL columns for sellershop fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSlug,
	FieldContactNumber,
	FieldBanner,
	FieldShopCategoryID,
	FieldShopCategory,
	FieldBusinessLocation,
	FieldTaxID,
	FieldActive,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "seller_shops"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_seller_shops",
	"user_approved_shops",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ContactNumberValidator is a validator for the "contact_number" field. It is called by the builders before save.
	ContactNumberValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
