// Code generated by entc, DO NOT EDIT.

package sellershop

import (
	"bongo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlug), v))
	})
}

// ContactNumber applies equality check predicate on the "contact_number" field. It's identical to ContactNumberEQ.
func ContactNumber(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactNumber), v))
	})
}

// Banner applies equality check predicate on the "banner" field. It's identical to BannerEQ.
func Banner(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBanner), v))
	})
}

// BusinessLocation applies equality check predicate on the "business_location" field. It's identical to BusinessLocationEQ.
func BusinessLocation(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessLocation), v))
	})
}

// TaxID applies equality check predicate on the "tax_id" field. It's identical to TaxIDEQ.
func TaxID(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxID), v))
	})
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlug), v))
	})
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSlug), v))
	})
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSlug), v...))
	})
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSlug), v...))
	})
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSlug), v))
	})
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSlug), v))
	})
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSlug), v))
	})
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSlug), v))
	})
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSlug), v))
	})
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSlug), v))
	})
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSlug), v))
	})
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSlug), v))
	})
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSlug), v))
	})
}

// ContactNumberEQ applies the EQ predicate on the "contact_number" field.
func ContactNumberEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactNumber), v))
	})
}

// ContactNumberNEQ applies the NEQ predicate on the "contact_number" field.
func ContactNumberNEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactNumber), v))
	})
}

// ContactNumberIn applies the In predicate on the "contact_number" field.
func ContactNumberIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContactNumber), v...))
	})
}

// ContactNumberNotIn applies the NotIn predicate on the "contact_number" field.
func ContactNumberNotIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContactNumber), v...))
	})
}

// ContactNumberGT applies the GT predicate on the "contact_number" field.
func ContactNumberGT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactNumber), v))
	})
}

// ContactNumberGTE applies the GTE predicate on the "contact_number" field.
func ContactNumberGTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactNumber), v))
	})
}

// ContactNumberLT applies the LT predicate on the "contact_number" field.
func ContactNumberLT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactNumber), v))
	})
}

// ContactNumberLTE applies the LTE predicate on the "contact_number" field.
func ContactNumberLTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactNumber), v))
	})
}

// ContactNumberContains applies the Contains predicate on the "contact_number" field.
func ContactNumberContains(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactNumber), v))
	})
}

// ContactNumberHasPrefix applies the HasPrefix predicate on the "contact_number" field.
func ContactNumberHasPrefix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactNumber), v))
	})
}

// ContactNumberHasSuffix applies the HasSuffix predicate on the "contact_number" field.
func ContactNumberHasSuffix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactNumber), v))
	})
}

// ContactNumberEqualFold applies the EqualFold predicate on the "contact_number" field.
func ContactNumberEqualFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactNumber), v))
	})
}

// ContactNumberContainsFold applies the ContainsFold predicate on the "contact_number" field.
func ContactNumberContainsFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactNumber), v))
	})
}

// BannerEQ applies the EQ predicate on the "banner" field.
func BannerEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBanner), v))
	})
}

// BannerNEQ applies the NEQ predicate on the "banner" field.
func BannerNEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBanner), v))
	})
}

// BannerIn applies the In predicate on the "banner" field.
func BannerIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBanner), v...))
	})
}

// BannerNotIn applies the NotIn predicate on the "banner" field.
func BannerNotIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBanner), v...))
	})
}

// BannerGT applies the GT predicate on the "banner" field.
func BannerGT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBanner), v))
	})
}

// BannerGTE applies the GTE predicate on the "banner" field.
func BannerGTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBanner), v))
	})
}

// BannerLT applies the LT predicate on the "banner" field.
func BannerLT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBanner), v))
	})
}

// BannerLTE applies the LTE predicate on the "banner" field.
func BannerLTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBanner), v))
	})
}

// BannerContains applies the Contains predicate on the "banner" field.
func BannerContains(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBanner), v))
	})
}

// BannerHasPrefix applies the HasPrefix predicate on the "banner" field.
func BannerHasPrefix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBanner), v))
	})
}

// BannerHasSuffix applies the HasSuffix predicate on the "banner" field.
func BannerHasSuffix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBanner), v))
	})
}

// BannerEqualFold applies the EqualFold predicate on the "banner" field.
func BannerEqualFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBanner), v))
	})
}

// BannerContainsFold applies the ContainsFold predicate on the "banner" field.
func BannerContainsFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBanner), v))
	})
}

// BusinessLocationEQ applies the EQ predicate on the "business_location" field.
func BusinessLocationEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBusinessLocation), v))
	})
}

// BusinessLocationNEQ applies the NEQ predicate on the "business_location" field.
func BusinessLocationNEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBusinessLocation), v))
	})
}

// BusinessLocationIn applies the In predicate on the "business_location" field.
func BusinessLocationIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBusinessLocation), v...))
	})
}

// BusinessLocationNotIn applies the NotIn predicate on the "business_location" field.
func BusinessLocationNotIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBusinessLocation), v...))
	})
}

// BusinessLocationGT applies the GT predicate on the "business_location" field.
func BusinessLocationGT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBusinessLocation), v))
	})
}

// BusinessLocationGTE applies the GTE predicate on the "business_location" field.
func BusinessLocationGTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBusinessLocation), v))
	})
}

// BusinessLocationLT applies the LT predicate on the "business_location" field.
func BusinessLocationLT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBusinessLocation), v))
	})
}

// BusinessLocationLTE applies the LTE predicate on the "business_location" field.
func BusinessLocationLTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBusinessLocation), v))
	})
}

// BusinessLocationContains applies the Contains predicate on the "business_location" field.
func BusinessLocationContains(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBusinessLocation), v))
	})
}

// BusinessLocationHasPrefix applies the HasPrefix predicate on the "business_location" field.
func BusinessLocationHasPrefix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBusinessLocation), v))
	})
}

// BusinessLocationHasSuffix applies the HasSuffix predicate on the "business_location" field.
func BusinessLocationHasSuffix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBusinessLocation), v))
	})
}

// BusinessLocationEqualFold applies the EqualFold predicate on the "business_location" field.
func BusinessLocationEqualFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBusinessLocation), v))
	})
}

// BusinessLocationContainsFold applies the ContainsFold predicate on the "business_location" field.
func BusinessLocationContainsFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBusinessLocation), v))
	})
}

// TaxIDEQ applies the EQ predicate on the "tax_id" field.
func TaxIDEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxID), v))
	})
}

// TaxIDNEQ applies the NEQ predicate on the "tax_id" field.
func TaxIDNEQ(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxID), v))
	})
}

// TaxIDIn applies the In predicate on the "tax_id" field.
func TaxIDIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaxID), v...))
	})
}

// TaxIDNotIn applies the NotIn predicate on the "tax_id" field.
func TaxIDNotIn(vs ...string) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaxID), v...))
	})
}

// TaxIDGT applies the GT predicate on the "tax_id" field.
func TaxIDGT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxID), v))
	})
}

// TaxIDGTE applies the GTE predicate on the "tax_id" field.
func TaxIDGTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxID), v))
	})
}

// TaxIDLT applies the LT predicate on the "tax_id" field.
func TaxIDLT(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxID), v))
	})
}

// TaxIDLTE applies the LTE predicate on the "tax_id" field.
func TaxIDLTE(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxID), v))
	})
}

// TaxIDContains applies the Contains predicate on the "tax_id" field.
func TaxIDContains(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaxID), v))
	})
}

// TaxIDHasPrefix applies the HasPrefix predicate on the "tax_id" field.
func TaxIDHasPrefix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaxID), v))
	})
}

// TaxIDHasSuffix applies the HasSuffix predicate on the "tax_id" field.
func TaxIDHasSuffix(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaxID), v))
	})
}

// TaxIDEqualFold applies the EqualFold predicate on the "tax_id" field.
func TaxIDEqualFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaxID), v))
	})
}

// TaxIDContainsFold applies the ContainsFold predicate on the "tax_id" field.
func TaxIDContainsFold(v string) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaxID), v))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SellerShop {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerShop(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdmin applies the HasEdge predicate on the "admin" edge.
func HasAdmin() predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminWith applies the HasEdge predicate on the "admin" edge with a given conditions (other predicates).
func HasAdminWith(preds ...predicate.User) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGetShopCategory applies the HasEdge predicate on the "get_shop_category" edge.
func HasGetShopCategory() predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GetShopCategoryTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GetShopCategoryTable, GetShopCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGetShopCategoryWith applies the HasEdge predicate on the "get_shop_category" edge with a given conditions (other predicates).
func HasGetShopCategoryWith(preds ...predicate.ShopCategory) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GetShopCategoryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GetShopCategoryTable, GetShopCategoryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSellerProducts applies the HasEdge predicate on the "seller_products" edge.
func HasSellerProducts() predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerProductsTable, SellerProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSellerProductsWith applies the HasEdge predicate on the "seller_products" edge with a given conditions (other predicates).
func HasSellerProductsWith(preds ...predicate.SellerProduct) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerProductsTable, SellerProductsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SellerShop) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SellerShop) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SellerShop) predicate.SellerShop {
	return predicate.SellerShop(func(s *sql.Selector) {
		p(s.Not())
	})
}
