// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductimage"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SellerProductImage is the model entity for the SellerProductImage schema.
type SellerProductImage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Display holds the value of the "display" field.
	Display bool `json:"display,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SellerProductImageQuery when eager-loading is set.
	Edges                                SellerProductImageEdges `json:"edges"`
	seller_product_seller_product_images *int
}

// SellerProductImageEdges holds the relations/edges for other nodes in the graph.
type SellerProductImageEdges struct {
	// SellerProduct holds the value of the seller_product edge.
	SellerProduct *SellerProduct `json:"seller_product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SellerProductOrErr returns the SellerProduct value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SellerProductImageEdges) SellerProductOrErr() (*SellerProduct, error) {
	if e.loadedTypes[0] {
		if e.SellerProduct == nil {
			// The edge seller_product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sellerproduct.Label}
		}
		return e.SellerProduct, nil
	}
	return nil, &NotLoadedError{edge: "seller_product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SellerProductImage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sellerproductimage.FieldDisplay:
			values[i] = new(sql.NullBool)
		case sellerproductimage.FieldID:
			values[i] = new(sql.NullInt64)
		case sellerproductimage.FieldImage:
			values[i] = new(sql.NullString)
		case sellerproductimage.FieldCreatedAt, sellerproductimage.FieldUpdatedAt, sellerproductimage.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case sellerproductimage.ForeignKeys[0]: // seller_product_seller_product_images
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SellerProductImage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SellerProductImage fields.
func (spi *SellerProductImage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sellerproductimage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			spi.ID = int(value.Int64)
		case sellerproductimage.FieldDisplay:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field display", values[i])
			} else if value.Valid {
				spi.Display = value.Bool
			}
		case sellerproductimage.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				spi.Image = value.String
			}
		case sellerproductimage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				spi.CreatedAt = value.Time
			}
		case sellerproductimage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				spi.UpdatedAt = value.Time
			}
		case sellerproductimage.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				spi.DeletedAt = new(time.Time)
				*spi.DeletedAt = value.Time
			}
		case sellerproductimage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field seller_product_seller_product_images", value)
			} else if value.Valid {
				spi.seller_product_seller_product_images = new(int)
				*spi.seller_product_seller_product_images = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySellerProduct queries the "seller_product" edge of the SellerProductImage entity.
func (spi *SellerProductImage) QuerySellerProduct() *SellerProductQuery {
	return (&SellerProductImageClient{config: spi.config}).QuerySellerProduct(spi)
}

// Update returns a builder for updating this SellerProductImage.
// Note that you need to call SellerProductImage.Unwrap() before calling this method if this SellerProductImage
// was returned from a transaction, and the transaction was committed or rolled back.
func (spi *SellerProductImage) Update() *SellerProductImageUpdateOne {
	return (&SellerProductImageClient{config: spi.config}).UpdateOne(spi)
}

// Unwrap unwraps the SellerProductImage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (spi *SellerProductImage) Unwrap() *SellerProductImage {
	tx, ok := spi.config.driver.(*txDriver)
	if !ok {
		panic("ent: SellerProductImage is not a transactional entity")
	}
	spi.config.driver = tx.drv
	return spi
}

// String implements the fmt.Stringer.
func (spi *SellerProductImage) String() string {
	var builder strings.Builder
	builder.WriteString("SellerProductImage(")
	builder.WriteString(fmt.Sprintf("id=%v", spi.ID))
	builder.WriteString(", display=")
	builder.WriteString(fmt.Sprintf("%v", spi.Display))
	builder.WriteString(", image=")
	builder.WriteString(spi.Image)
	builder.WriteString(", created_at=")
	builder.WriteString(spi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(spi.UpdatedAt.Format(time.ANSIC))
	if v := spi.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SellerProductImages is a parsable slice of SellerProductImage.
type SellerProductImages []*SellerProductImage

func (spi SellerProductImages) config(cfg config) {
	for _i := range spi {
		spi[_i].config = cfg
	}
}
