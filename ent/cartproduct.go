// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/cart"
	"bongo/ent/cartproduct"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductvariation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// CartProduct is the model entity for the CartProduct schema.
type CartProduct struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CartProductQuery when eager-loading is set.
	Edges                                  CartProductEdges `json:"edges"`
	cart_cart_products                     *int
	seller_product_cart_products           *int
	seller_product_variation_cart_products *int
}

// CartProductEdges holds the relations/edges for other nodes in the graph.
type CartProductEdges struct {
	// SellerProduct holds the value of the seller_product edge.
	SellerProduct *SellerProduct `json:"seller_product,omitempty"`
	// Cart holds the value of the cart edge.
	Cart *Cart `json:"cart,omitempty"`
	// SellerProductVariation holds the value of the seller_product_variation edge.
	SellerProductVariation *SellerProductVariation `json:"seller_product_variation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// SellerProductOrErr returns the SellerProduct value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartProductEdges) SellerProductOrErr() (*SellerProduct, error) {
	if e.loadedTypes[0] {
		if e.SellerProduct == nil {
			// The edge seller_product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sellerproduct.Label}
		}
		return e.SellerProduct, nil
	}
	return nil, &NotLoadedError{edge: "seller_product"}
}

// CartOrErr returns the Cart value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartProductEdges) CartOrErr() (*Cart, error) {
	if e.loadedTypes[1] {
		if e.Cart == nil {
			// The edge cart was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cart.Label}
		}
		return e.Cart, nil
	}
	return nil, &NotLoadedError{edge: "cart"}
}

// SellerProductVariationOrErr returns the SellerProductVariation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CartProductEdges) SellerProductVariationOrErr() (*SellerProductVariation, error) {
	if e.loadedTypes[2] {
		if e.SellerProductVariation == nil {
			// The edge seller_product_variation was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sellerproductvariation.Label}
		}
		return e.SellerProductVariation, nil
	}
	return nil, &NotLoadedError{edge: "seller_product_variation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CartProduct) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cartproduct.FieldID, cartproduct.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case cartproduct.FieldCreatedAt, cartproduct.FieldUpdatedAt, cartproduct.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case cartproduct.ForeignKeys[0]: // cart_cart_products
			values[i] = new(sql.NullInt64)
		case cartproduct.ForeignKeys[1]: // seller_product_cart_products
			values[i] = new(sql.NullInt64)
		case cartproduct.ForeignKeys[2]: // seller_product_variation_cart_products
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CartProduct", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CartProduct fields.
func (cp *CartProduct) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cartproduct.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cp.ID = int(value.Int64)
		case cartproduct.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				cp.Quantity = int(value.Int64)
			}
		case cartproduct.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cp.CreatedAt = value.Time
			}
		case cartproduct.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cp.UpdatedAt = value.Time
			}
		case cartproduct.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cp.DeletedAt = new(time.Time)
				*cp.DeletedAt = value.Time
			}
		case cartproduct.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field cart_cart_products", value)
			} else if value.Valid {
				cp.cart_cart_products = new(int)
				*cp.cart_cart_products = int(value.Int64)
			}
		case cartproduct.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field seller_product_cart_products", value)
			} else if value.Valid {
				cp.seller_product_cart_products = new(int)
				*cp.seller_product_cart_products = int(value.Int64)
			}
		case cartproduct.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field seller_product_variation_cart_products", value)
			} else if value.Valid {
				cp.seller_product_variation_cart_products = new(int)
				*cp.seller_product_variation_cart_products = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySellerProduct queries the "seller_product" edge of the CartProduct entity.
func (cp *CartProduct) QuerySellerProduct() *SellerProductQuery {
	return (&CartProductClient{config: cp.config}).QuerySellerProduct(cp)
}

// QueryCart queries the "cart" edge of the CartProduct entity.
func (cp *CartProduct) QueryCart() *CartQuery {
	return (&CartProductClient{config: cp.config}).QueryCart(cp)
}

// QuerySellerProductVariation queries the "seller_product_variation" edge of the CartProduct entity.
func (cp *CartProduct) QuerySellerProductVariation() *SellerProductVariationQuery {
	return (&CartProductClient{config: cp.config}).QuerySellerProductVariation(cp)
}

// Update returns a builder for updating this CartProduct.
// Note that you need to call CartProduct.Unwrap() before calling this method if this CartProduct
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *CartProduct) Update() *CartProductUpdateOne {
	return (&CartProductClient{config: cp.config}).UpdateOne(cp)
}

// Unwrap unwraps the CartProduct entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *CartProduct) Unwrap() *CartProduct {
	tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: CartProduct is not a transactional entity")
	}
	cp.config.driver = tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *CartProduct) String() string {
	var builder strings.Builder
	builder.WriteString("CartProduct(")
	builder.WriteString(fmt.Sprintf("id=%v", cp.ID))
	builder.WriteString(", quantity=")
	builder.WriteString(fmt.Sprintf("%v", cp.Quantity))
	builder.WriteString(", created_at=")
	builder.WriteString(cp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(cp.UpdatedAt.Format(time.ANSIC))
	if v := cp.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// CartProducts is a parsable slice of CartProduct.
type CartProducts []*CartProduct

func (cp CartProducts) config(cfg config) {
	for _i := range cp {
		cp[_i].config = cfg
	}
}
