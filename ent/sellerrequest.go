// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/sellerrequest"
	"bongo/ent/shopcategory"
	"bongo/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SellerRequest is the model entity for the SellerRequest schema.
type SellerRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SellerName holds the value of the "seller_name" field.
	SellerName string `json:"seller_name,omitempty"`
	// ShopName holds the value of the "shop_name" field.
	ShopName string `json:"shop_name,omitempty"`
	// ContactNumber holds the value of the "contact_number" field.
	ContactNumber string `json:"contact_number,omitempty"`
	// ShopLocation holds the value of the "shop_location" field.
	ShopLocation string `json:"shop_location,omitempty"`
	// TaxID holds the value of the "tax_id" field.
	TaxID string `json:"tax_id,omitempty"`
	// Accepted holds the value of the "accepted" field.
	Accepted bool `json:"accepted,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SellerRequestQuery when eager-loading is set.
	Edges                         SellerRequestEdges `json:"edges"`
	shop_category_seller_requests *int
	user_seller_requests          *int
}

// SellerRequestEdges holds the relations/edges for other nodes in the graph.
type SellerRequestEdges struct {
	// ShopCategory holds the value of the shop_category edge.
	ShopCategory *ShopCategory `json:"shop_category,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ShopCategoryOrErr returns the ShopCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SellerRequestEdges) ShopCategoryOrErr() (*ShopCategory, error) {
	if e.loadedTypes[0] {
		if e.ShopCategory == nil {
			// The edge shop_category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: shopcategory.Label}
		}
		return e.ShopCategory, nil
	}
	return nil, &NotLoadedError{edge: "shop_category"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SellerRequestEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SellerRequest) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sellerrequest.FieldAccepted:
			values[i] = new(sql.NullBool)
		case sellerrequest.FieldID:
			values[i] = new(sql.NullInt64)
		case sellerrequest.FieldSellerName, sellerrequest.FieldShopName, sellerrequest.FieldContactNumber, sellerrequest.FieldShopLocation, sellerrequest.FieldTaxID:
			values[i] = new(sql.NullString)
		case sellerrequest.FieldCreatedAt, sellerrequest.FieldUpdatedAt, sellerrequest.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case sellerrequest.ForeignKeys[0]: // shop_category_seller_requests
			values[i] = new(sql.NullInt64)
		case sellerrequest.ForeignKeys[1]: // user_seller_requests
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SellerRequest", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SellerRequest fields.
func (sr *SellerRequest) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sellerrequest.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int(value.Int64)
		case sellerrequest.FieldSellerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field seller_name", values[i])
			} else if value.Valid {
				sr.SellerName = value.String
			}
		case sellerrequest.FieldShopName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shop_name", values[i])
			} else if value.Valid {
				sr.ShopName = value.String
			}
		case sellerrequest.FieldContactNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contact_number", values[i])
			} else if value.Valid {
				sr.ContactNumber = value.String
			}
		case sellerrequest.FieldShopLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shop_location", values[i])
			} else if value.Valid {
				sr.ShopLocation = value.String
			}
		case sellerrequest.FieldTaxID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_id", values[i])
			} else if value.Valid {
				sr.TaxID = value.String
			}
		case sellerrequest.FieldAccepted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field accepted", values[i])
			} else if value.Valid {
				sr.Accepted = value.Bool
			}
		case sellerrequest.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sr.CreatedAt = value.Time
			}
		case sellerrequest.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sr.UpdatedAt = value.Time
			}
		case sellerrequest.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sr.DeletedAt = new(time.Time)
				*sr.DeletedAt = value.Time
			}
		case sellerrequest.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field shop_category_seller_requests", value)
			} else if value.Valid {
				sr.shop_category_seller_requests = new(int)
				*sr.shop_category_seller_requests = int(value.Int64)
			}
		case sellerrequest.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_seller_requests", value)
			} else if value.Valid {
				sr.user_seller_requests = new(int)
				*sr.user_seller_requests = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryShopCategory queries the "shop_category" edge of the SellerRequest entity.
func (sr *SellerRequest) QueryShopCategory() *ShopCategoryQuery {
	return (&SellerRequestClient{config: sr.config}).QueryShopCategory(sr)
}

// QueryUser queries the "user" edge of the SellerRequest entity.
func (sr *SellerRequest) QueryUser() *UserQuery {
	return (&SellerRequestClient{config: sr.config}).QueryUser(sr)
}

// Update returns a builder for updating this SellerRequest.
// Note that you need to call SellerRequest.Unwrap() before calling this method if this SellerRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *SellerRequest) Update() *SellerRequestUpdateOne {
	return (&SellerRequestClient{config: sr.config}).UpdateOne(sr)
}

// Unwrap unwraps the SellerRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *SellerRequest) Unwrap() *SellerRequest {
	tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: SellerRequest is not a transactional entity")
	}
	sr.config.driver = tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *SellerRequest) String() string {
	var builder strings.Builder
	builder.WriteString("SellerRequest(")
	builder.WriteString(fmt.Sprintf("id=%v", sr.ID))
	builder.WriteString(", seller_name=")
	builder.WriteString(sr.SellerName)
	builder.WriteString(", shop_name=")
	builder.WriteString(sr.ShopName)
	builder.WriteString(", contact_number=")
	builder.WriteString(sr.ContactNumber)
	builder.WriteString(", shop_location=")
	builder.WriteString(sr.ShopLocation)
	builder.WriteString(", tax_id=")
	builder.WriteString(sr.TaxID)
	builder.WriteString(", accepted=")
	builder.WriteString(fmt.Sprintf("%v", sr.Accepted))
	builder.WriteString(", created_at=")
	builder.WriteString(sr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(sr.UpdatedAt.Format(time.ANSIC))
	if v := sr.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SellerRequests is a parsable slice of SellerRequest.
type SellerRequests []*SellerRequest

func (sr SellerRequests) config(cfg config) {
	for _i := range sr {
		sr[_i].config = cfg
	}
}
