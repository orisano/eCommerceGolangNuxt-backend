// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/predicate"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductimage"
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerProductImageQuery is the builder for querying SellerProductImage entities.
type SellerProductImageQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SellerProductImage
	// eager-loading edges.
	withSellerProduct *SellerProductQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SellerProductImageQuery builder.
func (spiq *SellerProductImageQuery) Where(ps ...predicate.SellerProductImage) *SellerProductImageQuery {
	spiq.predicates = append(spiq.predicates, ps...)
	return spiq
}

// Limit adds a limit step to the query.
func (spiq *SellerProductImageQuery) Limit(limit int) *SellerProductImageQuery {
	spiq.limit = &limit
	return spiq
}

// Offset adds an offset step to the query.
func (spiq *SellerProductImageQuery) Offset(offset int) *SellerProductImageQuery {
	spiq.offset = &offset
	return spiq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (spiq *SellerProductImageQuery) Unique(unique bool) *SellerProductImageQuery {
	spiq.unique = &unique
	return spiq
}

// Order adds an order step to the query.
func (spiq *SellerProductImageQuery) Order(o ...OrderFunc) *SellerProductImageQuery {
	spiq.order = append(spiq.order, o...)
	return spiq
}

// QuerySellerProduct chains the current query on the "seller_product" edge.
func (spiq *SellerProductImageQuery) QuerySellerProduct() *SellerProductQuery {
	query := &SellerProductQuery{config: spiq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spiq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproductimage.Table, sellerproductimage.FieldID, selector),
			sqlgraph.To(sellerproduct.Table, sellerproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerproductimage.SellerProductTable, sellerproductimage.SellerProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(spiq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SellerProductImage entity from the query.
// Returns a *NotFoundError when no SellerProductImage was found.
func (spiq *SellerProductImageQuery) First(ctx context.Context) (*SellerProductImage, error) {
	nodes, err := spiq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sellerproductimage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (spiq *SellerProductImageQuery) FirstX(ctx context.Context) *SellerProductImage {
	node, err := spiq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SellerProductImage ID from the query.
// Returns a *NotFoundError when no SellerProductImage ID was found.
func (spiq *SellerProductImageQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = spiq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sellerproductimage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (spiq *SellerProductImageQuery) FirstIDX(ctx context.Context) int {
	id, err := spiq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SellerProductImage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one SellerProductImage entity is not found.
// Returns a *NotFoundError when no SellerProductImage entities are found.
func (spiq *SellerProductImageQuery) Only(ctx context.Context) (*SellerProductImage, error) {
	nodes, err := spiq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sellerproductimage.Label}
	default:
		return nil, &NotSingularError{sellerproductimage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (spiq *SellerProductImageQuery) OnlyX(ctx context.Context) *SellerProductImage {
	node, err := spiq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SellerProductImage ID in the query.
// Returns a *NotSingularError when exactly one SellerProductImage ID is not found.
// Returns a *NotFoundError when no entities are found.
func (spiq *SellerProductImageQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = spiq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sellerproductimage.Label}
	default:
		err = &NotSingularError{sellerproductimage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (spiq *SellerProductImageQuery) OnlyIDX(ctx context.Context) int {
	id, err := spiq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SellerProductImages.
func (spiq *SellerProductImageQuery) All(ctx context.Context) ([]*SellerProductImage, error) {
	if err := spiq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return spiq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (spiq *SellerProductImageQuery) AllX(ctx context.Context) []*SellerProductImage {
	nodes, err := spiq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SellerProductImage IDs.
func (spiq *SellerProductImageQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := spiq.Select(sellerproductimage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (spiq *SellerProductImageQuery) IDsX(ctx context.Context) []int {
	ids, err := spiq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (spiq *SellerProductImageQuery) Count(ctx context.Context) (int, error) {
	if err := spiq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return spiq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (spiq *SellerProductImageQuery) CountX(ctx context.Context) int {
	count, err := spiq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (spiq *SellerProductImageQuery) Exist(ctx context.Context) (bool, error) {
	if err := spiq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return spiq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (spiq *SellerProductImageQuery) ExistX(ctx context.Context) bool {
	exist, err := spiq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SellerProductImageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (spiq *SellerProductImageQuery) Clone() *SellerProductImageQuery {
	if spiq == nil {
		return nil
	}
	return &SellerProductImageQuery{
		config:            spiq.config,
		limit:             spiq.limit,
		offset:            spiq.offset,
		order:             append([]OrderFunc{}, spiq.order...),
		predicates:        append([]predicate.SellerProductImage{}, spiq.predicates...),
		withSellerProduct: spiq.withSellerProduct.Clone(),
		// clone intermediate query.
		sql:  spiq.sql.Clone(),
		path: spiq.path,
	}
}

// WithSellerProduct tells the query-builder to eager-load the nodes that are connected to
// the "seller_product" edge. The optional arguments are used to configure the query builder of the edge.
func (spiq *SellerProductImageQuery) WithSellerProduct(opts ...func(*SellerProductQuery)) *SellerProductImageQuery {
	query := &SellerProductQuery{config: spiq.config}
	for _, opt := range opts {
		opt(query)
	}
	spiq.withSellerProduct = query
	return spiq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Display bool `json:"display,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SellerProductImage.Query().
//		GroupBy(sellerproductimage.FieldDisplay).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (spiq *SellerProductImageQuery) GroupBy(field string, fields ...string) *SellerProductImageGroupBy {
	group := &SellerProductImageGroupBy{config: spiq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := spiq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return spiq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Display bool `json:"display,omitempty"`
//	}
//
//	client.SellerProductImage.Query().
//		Select(sellerproductimage.FieldDisplay).
//		Scan(ctx, &v)
//
func (spiq *SellerProductImageQuery) Select(fields ...string) *SellerProductImageSelect {
	spiq.fields = append(spiq.fields, fields...)
	return &SellerProductImageSelect{SellerProductImageQuery: spiq}
}

func (spiq *SellerProductImageQuery) prepareQuery(ctx context.Context) error {
	for _, f := range spiq.fields {
		if !sellerproductimage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if spiq.path != nil {
		prev, err := spiq.path(ctx)
		if err != nil {
			return err
		}
		spiq.sql = prev
	}
	return nil
}

func (spiq *SellerProductImageQuery) sqlAll(ctx context.Context) ([]*SellerProductImage, error) {
	var (
		nodes       = []*SellerProductImage{}
		withFKs     = spiq.withFKs
		_spec       = spiq.querySpec()
		loadedTypes = [1]bool{
			spiq.withSellerProduct != nil,
		}
	)
	if spiq.withSellerProduct != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, sellerproductimage.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SellerProductImage{config: spiq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, spiq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := spiq.withSellerProduct; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*SellerProductImage)
		for i := range nodes {
			if nodes[i].seller_product_seller_product_images == nil {
				continue
			}
			fk := *nodes[i].seller_product_seller_product_images
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(sellerproduct.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "seller_product_seller_product_images" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.SellerProduct = n
			}
		}
	}

	return nodes, nil
}

func (spiq *SellerProductImageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := spiq.querySpec()
	_spec.Node.Columns = spiq.fields
	if len(spiq.fields) > 0 {
		_spec.Unique = spiq.unique != nil && *spiq.unique
	}
	return sqlgraph.CountNodes(ctx, spiq.driver, _spec)
}

func (spiq *SellerProductImageQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := spiq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (spiq *SellerProductImageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellerproductimage.Table,
			Columns: sellerproductimage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproductimage.FieldID,
			},
		},
		From:   spiq.sql,
		Unique: true,
	}
	if unique := spiq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := spiq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sellerproductimage.FieldID)
		for i := range fields {
			if fields[i] != sellerproductimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := spiq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := spiq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := spiq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := spiq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (spiq *SellerProductImageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(spiq.driver.Dialect())
	t1 := builder.Table(sellerproductimage.Table)
	columns := spiq.fields
	if len(columns) == 0 {
		columns = sellerproductimage.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if spiq.sql != nil {
		selector = spiq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if spiq.unique != nil && *spiq.unique {
		selector.Distinct()
	}
	for _, p := range spiq.predicates {
		p(selector)
	}
	for _, p := range spiq.order {
		p(selector)
	}
	if offset := spiq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := spiq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SellerProductImageGroupBy is the group-by builder for SellerProductImage entities.
type SellerProductImageGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (spigb *SellerProductImageGroupBy) Aggregate(fns ...AggregateFunc) *SellerProductImageGroupBy {
	spigb.fns = append(spigb.fns, fns...)
	return spigb
}

// Scan applies the group-by query and scans the result into the given value.
func (spigb *SellerProductImageGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := spigb.path(ctx)
	if err != nil {
		return err
	}
	spigb.sql = query
	return spigb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (spigb *SellerProductImageGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := spigb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (spigb *SellerProductImageGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(spigb.fields) > 1 {
		return nil, errors.New("ent: SellerProductImageGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := spigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (spigb *SellerProductImageGroupBy) StringsX(ctx context.Context) []string {
	v, err := spigb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spigb *SellerProductImageGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = spigb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductimage.Label}
	default:
		err = fmt.Errorf("ent: SellerProductImageGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (spigb *SellerProductImageGroupBy) StringX(ctx context.Context) string {
	v, err := spigb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (spigb *SellerProductImageGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(spigb.fields) > 1 {
		return nil, errors.New("ent: SellerProductImageGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := spigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (spigb *SellerProductImageGroupBy) IntsX(ctx context.Context) []int {
	v, err := spigb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spigb *SellerProductImageGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = spigb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductimage.Label}
	default:
		err = fmt.Errorf("ent: SellerProductImageGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (spigb *SellerProductImageGroupBy) IntX(ctx context.Context) int {
	v, err := spigb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (spigb *SellerProductImageGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(spigb.fields) > 1 {
		return nil, errors.New("ent: SellerProductImageGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := spigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (spigb *SellerProductImageGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := spigb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spigb *SellerProductImageGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = spigb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductimage.Label}
	default:
		err = fmt.Errorf("ent: SellerProductImageGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (spigb *SellerProductImageGroupBy) Float64X(ctx context.Context) float64 {
	v, err := spigb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (spigb *SellerProductImageGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(spigb.fields) > 1 {
		return nil, errors.New("ent: SellerProductImageGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := spigb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (spigb *SellerProductImageGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := spigb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spigb *SellerProductImageGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = spigb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductimage.Label}
	default:
		err = fmt.Errorf("ent: SellerProductImageGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (spigb *SellerProductImageGroupBy) BoolX(ctx context.Context) bool {
	v, err := spigb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (spigb *SellerProductImageGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range spigb.fields {
		if !sellerproductimage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := spigb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spigb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (spigb *SellerProductImageGroupBy) sqlQuery() *sql.Selector {
	selector := spigb.sql.Select()
	aggregation := make([]string, 0, len(spigb.fns))
	for _, fn := range spigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(spigb.fields)+len(spigb.fns))
		for _, f := range spigb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(spigb.fields...)...)
}

// SellerProductImageSelect is the builder for selecting fields of SellerProductImage entities.
type SellerProductImageSelect struct {
	*SellerProductImageQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (spis *SellerProductImageSelect) Scan(ctx context.Context, v interface{}) error {
	if err := spis.prepareQuery(ctx); err != nil {
		return err
	}
	spis.sql = spis.SellerProductImageQuery.sqlQuery(ctx)
	return spis.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (spis *SellerProductImageSelect) ScanX(ctx context.Context, v interface{}) {
	if err := spis.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (spis *SellerProductImageSelect) Strings(ctx context.Context) ([]string, error) {
	if len(spis.fields) > 1 {
		return nil, errors.New("ent: SellerProductImageSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := spis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (spis *SellerProductImageSelect) StringsX(ctx context.Context) []string {
	v, err := spis.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (spis *SellerProductImageSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = spis.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductimage.Label}
	default:
		err = fmt.Errorf("ent: SellerProductImageSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (spis *SellerProductImageSelect) StringX(ctx context.Context) string {
	v, err := spis.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (spis *SellerProductImageSelect) Ints(ctx context.Context) ([]int, error) {
	if len(spis.fields) > 1 {
		return nil, errors.New("ent: SellerProductImageSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := spis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (spis *SellerProductImageSelect) IntsX(ctx context.Context) []int {
	v, err := spis.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (spis *SellerProductImageSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = spis.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductimage.Label}
	default:
		err = fmt.Errorf("ent: SellerProductImageSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (spis *SellerProductImageSelect) IntX(ctx context.Context) int {
	v, err := spis.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (spis *SellerProductImageSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(spis.fields) > 1 {
		return nil, errors.New("ent: SellerProductImageSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := spis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (spis *SellerProductImageSelect) Float64sX(ctx context.Context) []float64 {
	v, err := spis.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (spis *SellerProductImageSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = spis.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductimage.Label}
	default:
		err = fmt.Errorf("ent: SellerProductImageSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (spis *SellerProductImageSelect) Float64X(ctx context.Context) float64 {
	v, err := spis.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (spis *SellerProductImageSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(spis.fields) > 1 {
		return nil, errors.New("ent: SellerProductImageSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := spis.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (spis *SellerProductImageSelect) BoolsX(ctx context.Context) []bool {
	v, err := spis.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (spis *SellerProductImageSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = spis.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductimage.Label}
	default:
		err = fmt.Errorf("ent: SellerProductImageSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (spis *SellerProductImageSelect) BoolX(ctx context.Context) bool {
	v, err := spis.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (spis *SellerProductImageSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := spis.sql.Query()
	if err := spis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
