// Code generated by entc, DO NOT EDIT.

package checkoutproduct

import (
	"time"
)

const (
	// Label holds the string label denoting the checkoutproduct type in the database.
	Label = "checkout_product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldSellingPrice holds the string denoting the selling_price field in the database.
	FieldSellingPrice = "selling_price"
	// FieldOfferPrice holds the string denoting the offer_price field in the database.
	FieldOfferPrice = "offer_price"
	// FieldReceived holds the string denoting the received field in the database.
	FieldReceived = "received"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeCheckout holds the string denoting the checkout edge name in mutations.
	EdgeCheckout = "checkout"
	// EdgeSeller holds the string denoting the seller edge name in mutations.
	EdgeSeller = "seller"
	// EdgeSellerProduct holds the string denoting the seller_product edge name in mutations.
	EdgeSellerProduct = "seller_product"
	// EdgeSellerProductVariation holds the string denoting the seller_product_variation edge name in mutations.
	EdgeSellerProductVariation = "seller_product_variation"
	// Table holds the table name of the checkoutproduct in the database.
	Table = "checkout_products"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "checkout_products"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_checkout_products"
	// CheckoutTable is the table that holds the checkout relation/edge.
	CheckoutTable = "checkout_products"
	// CheckoutInverseTable is the table name for the Checkout entity.
	// It exists in this package in order to avoid circular dependency with the "checkout" package.
	CheckoutInverseTable = "checkouts"
	// CheckoutColumn is the table column denoting the checkout relation/edge.
	CheckoutColumn = "checkout_checkout_products"
	// SellerTable is the table that holds the seller relation/edge.
	SellerTable = "checkout_products"
	// SellerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SellerInverseTable = "users"
	// SellerColumn is the table column denoting the seller relation/edge.
	SellerColumn = "user_seller_checkout_products"
	// SellerProductTable is the table that holds the seller_product relation/edge.
	SellerProductTable = "checkout_products"
	// SellerProductInverseTable is the table name for the SellerProduct entity.
	// It exists in this package in order to avoid circular dependency with the "sellerproduct" package.
	SellerProductInverseTable = "seller_products"
	// SellerProductColumn is the table column denoting the seller_product relation/edge.
	SellerProductColumn = "seller_product_checkout_products"
	// SellerProductVariationTable is the table that holds the seller_product_variation relation/edge.
	SellerProductVariationTable = "checkout_products"
	// SellerProductVariationInverseTable is the table name for the SellerProductVariation entity.
	// It exists in this package in order to avoid circular dependency with the "sellerproductvariation" package.
	SellerProductVariationInverseTable = "seller_product_variations"
	// SellerProductVariationColumn is the table column denoting the seller_product_variation relation/edge.
	SellerProductVariationColumn = "seller_product_variation_checkout_products"
)

// Columns holds all SQL columns for checkoutproduct fields.
var Columns = []string{
	FieldID,
	FieldQuantity,
	FieldSellingPrice,
	FieldOfferPrice,
	FieldReceived,
	FieldStatus,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "checkout_products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"checkout_checkout_products",
	"seller_product_checkout_products",
	"seller_product_variation_checkout_products",
	"user_checkout_products",
	"user_seller_checkout_products",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultOfferPrice holds the default value on creation for the "offer_price" field.
	DefaultOfferPrice int
	// DefaultReceived holds the default value on creation for the "received" field.
	DefaultReceived bool
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
