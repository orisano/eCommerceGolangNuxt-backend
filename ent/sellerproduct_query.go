// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/brand"
	"bongo/ent/cartproduct"
	"bongo/ent/category"
	"bongo/ent/checkoutproduct"
	"bongo/ent/predicate"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductimage"
	"bongo/ent/sellerproductvariation"
	"bongo/ent/sellershop"
	"bongo/ent/user"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerProductQuery is the builder for querying SellerProduct entities.
type SellerProductQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SellerProduct
	// eager-loading edges.
	withBrand                   *BrandQuery
	withUser                    *UserQuery
	withSellerProductImages     *SellerProductImageQuery
	withCategories              *CategoryQuery
	withShop                    *SellerShopQuery
	withCartProducts            *CartProductQuery
	withCheckoutProducts        *CheckoutProductQuery
	withSellerProductVariations *SellerProductVariationQuery
	withFKs                     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SellerProductQuery builder.
func (spq *SellerProductQuery) Where(ps ...predicate.SellerProduct) *SellerProductQuery {
	spq.predicates = append(spq.predicates, ps...)
	return spq
}

// Limit adds a limit step to the query.
func (spq *SellerProductQuery) Limit(limit int) *SellerProductQuery {
	spq.limit = &limit
	return spq
}

// Offset adds an offset step to the query.
func (spq *SellerProductQuery) Offset(offset int) *SellerProductQuery {
	spq.offset = &offset
	return spq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (spq *SellerProductQuery) Unique(unique bool) *SellerProductQuery {
	spq.unique = &unique
	return spq
}

// Order adds an order step to the query.
func (spq *SellerProductQuery) Order(o ...OrderFunc) *SellerProductQuery {
	spq.order = append(spq.order, o...)
	return spq
}

// QueryBrand chains the current query on the "brand" edge.
func (spq *SellerProductQuery) QueryBrand() *BrandQuery {
	query := &BrandQuery{config: spq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, selector),
			sqlgraph.To(brand.Table, brand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerproduct.BrandTable, sellerproduct.BrandColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (spq *SellerProductQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: spq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerproduct.UserTable, sellerproduct.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySellerProductImages chains the current query on the "seller_product_images" edge.
func (spq *SellerProductQuery) QuerySellerProductImages() *SellerProductImageQuery {
	query := &SellerProductImageQuery{config: spq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, selector),
			sqlgraph.To(sellerproductimage.Table, sellerproductimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellerproduct.SellerProductImagesTable, sellerproduct.SellerProductImagesColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCategories chains the current query on the "categories" edge.
func (spq *SellerProductQuery) QueryCategories() *CategoryQuery {
	query := &CategoryQuery{config: spq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, selector),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, sellerproduct.CategoriesTable, sellerproduct.CategoriesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryShop chains the current query on the "shop" edge.
func (spq *SellerProductQuery) QueryShop() *SellerShopQuery {
	query := &SellerShopQuery{config: spq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, selector),
			sqlgraph.To(sellershop.Table, sellershop.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerproduct.ShopTable, sellerproduct.ShopColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCartProducts chains the current query on the "cart_products" edge.
func (spq *SellerProductQuery) QueryCartProducts() *CartProductQuery {
	query := &CartProductQuery{config: spq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, selector),
			sqlgraph.To(cartproduct.Table, cartproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellerproduct.CartProductsTable, sellerproduct.CartProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCheckoutProducts chains the current query on the "checkout_products" edge.
func (spq *SellerProductQuery) QueryCheckoutProducts() *CheckoutProductQuery {
	query := &CheckoutProductQuery{config: spq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, selector),
			sqlgraph.To(checkoutproduct.Table, checkoutproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellerproduct.CheckoutProductsTable, sellerproduct.CheckoutProductsColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySellerProductVariations chains the current query on the "seller_product_variations" edge.
func (spq *SellerProductQuery) QuerySellerProductVariations() *SellerProductVariationQuery {
	query := &SellerProductVariationQuery{config: spq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, selector),
			sqlgraph.To(sellerproductvariation.Table, sellerproductvariation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellerproduct.SellerProductVariationsTable, sellerproduct.SellerProductVariationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(spq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SellerProduct entity from the query.
// Returns a *NotFoundError when no SellerProduct was found.
func (spq *SellerProductQuery) First(ctx context.Context) (*SellerProduct, error) {
	nodes, err := spq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sellerproduct.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (spq *SellerProductQuery) FirstX(ctx context.Context) *SellerProduct {
	node, err := spq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SellerProduct ID from the query.
// Returns a *NotFoundError when no SellerProduct ID was found.
func (spq *SellerProductQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = spq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sellerproduct.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (spq *SellerProductQuery) FirstIDX(ctx context.Context) int {
	id, err := spq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SellerProduct entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one SellerProduct entity is not found.
// Returns a *NotFoundError when no SellerProduct entities are found.
func (spq *SellerProductQuery) Only(ctx context.Context) (*SellerProduct, error) {
	nodes, err := spq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sellerproduct.Label}
	default:
		return nil, &NotSingularError{sellerproduct.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (spq *SellerProductQuery) OnlyX(ctx context.Context) *SellerProduct {
	node, err := spq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SellerProduct ID in the query.
// Returns a *NotSingularError when exactly one SellerProduct ID is not found.
// Returns a *NotFoundError when no entities are found.
func (spq *SellerProductQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = spq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sellerproduct.Label}
	default:
		err = &NotSingularError{sellerproduct.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (spq *SellerProductQuery) OnlyIDX(ctx context.Context) int {
	id, err := spq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SellerProducts.
func (spq *SellerProductQuery) All(ctx context.Context) ([]*SellerProduct, error) {
	if err := spq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return spq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (spq *SellerProductQuery) AllX(ctx context.Context) []*SellerProduct {
	nodes, err := spq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SellerProduct IDs.
func (spq *SellerProductQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := spq.Select(sellerproduct.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (spq *SellerProductQuery) IDsX(ctx context.Context) []int {
	ids, err := spq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (spq *SellerProductQuery) Count(ctx context.Context) (int, error) {
	if err := spq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return spq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (spq *SellerProductQuery) CountX(ctx context.Context) int {
	count, err := spq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (spq *SellerProductQuery) Exist(ctx context.Context) (bool, error) {
	if err := spq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return spq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (spq *SellerProductQuery) ExistX(ctx context.Context) bool {
	exist, err := spq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SellerProductQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (spq *SellerProductQuery) Clone() *SellerProductQuery {
	if spq == nil {
		return nil
	}
	return &SellerProductQuery{
		config:                      spq.config,
		limit:                       spq.limit,
		offset:                      spq.offset,
		order:                       append([]OrderFunc{}, spq.order...),
		predicates:                  append([]predicate.SellerProduct{}, spq.predicates...),
		withBrand:                   spq.withBrand.Clone(),
		withUser:                    spq.withUser.Clone(),
		withSellerProductImages:     spq.withSellerProductImages.Clone(),
		withCategories:              spq.withCategories.Clone(),
		withShop:                    spq.withShop.Clone(),
		withCartProducts:            spq.withCartProducts.Clone(),
		withCheckoutProducts:        spq.withCheckoutProducts.Clone(),
		withSellerProductVariations: spq.withSellerProductVariations.Clone(),
		// clone intermediate query.
		sql:  spq.sql.Clone(),
		path: spq.path,
	}
}

// WithBrand tells the query-builder to eager-load the nodes that are connected to
// the "brand" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SellerProductQuery) WithBrand(opts ...func(*BrandQuery)) *SellerProductQuery {
	query := &BrandQuery{config: spq.config}
	for _, opt := range opts {
		opt(query)
	}
	spq.withBrand = query
	return spq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SellerProductQuery) WithUser(opts ...func(*UserQuery)) *SellerProductQuery {
	query := &UserQuery{config: spq.config}
	for _, opt := range opts {
		opt(query)
	}
	spq.withUser = query
	return spq
}

// WithSellerProductImages tells the query-builder to eager-load the nodes that are connected to
// the "seller_product_images" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SellerProductQuery) WithSellerProductImages(opts ...func(*SellerProductImageQuery)) *SellerProductQuery {
	query := &SellerProductImageQuery{config: spq.config}
	for _, opt := range opts {
		opt(query)
	}
	spq.withSellerProductImages = query
	return spq
}

// WithCategories tells the query-builder to eager-load the nodes that are connected to
// the "categories" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SellerProductQuery) WithCategories(opts ...func(*CategoryQuery)) *SellerProductQuery {
	query := &CategoryQuery{config: spq.config}
	for _, opt := range opts {
		opt(query)
	}
	spq.withCategories = query
	return spq
}

// WithShop tells the query-builder to eager-load the nodes that are connected to
// the "shop" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SellerProductQuery) WithShop(opts ...func(*SellerShopQuery)) *SellerProductQuery {
	query := &SellerShopQuery{config: spq.config}
	for _, opt := range opts {
		opt(query)
	}
	spq.withShop = query
	return spq
}

// WithCartProducts tells the query-builder to eager-load the nodes that are connected to
// the "cart_products" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SellerProductQuery) WithCartProducts(opts ...func(*CartProductQuery)) *SellerProductQuery {
	query := &CartProductQuery{config: spq.config}
	for _, opt := range opts {
		opt(query)
	}
	spq.withCartProducts = query
	return spq
}

// WithCheckoutProducts tells the query-builder to eager-load the nodes that are connected to
// the "checkout_products" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SellerProductQuery) WithCheckoutProducts(opts ...func(*CheckoutProductQuery)) *SellerProductQuery {
	query := &CheckoutProductQuery{config: spq.config}
	for _, opt := range opts {
		opt(query)
	}
	spq.withCheckoutProducts = query
	return spq
}

// WithSellerProductVariations tells the query-builder to eager-load the nodes that are connected to
// the "seller_product_variations" edge. The optional arguments are used to configure the query builder of the edge.
func (spq *SellerProductQuery) WithSellerProductVariations(opts ...func(*SellerProductVariationQuery)) *SellerProductQuery {
	query := &SellerProductVariationQuery{config: spq.config}
	for _, opt := range opts {
		opt(query)
	}
	spq.withSellerProductVariations = query
	return spq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SellerProduct.Query().
//		GroupBy(sellerproduct.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (spq *SellerProductQuery) GroupBy(field string, fields ...string) *SellerProductGroupBy {
	group := &SellerProductGroupBy{config: spq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := spq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return spq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.SellerProduct.Query().
//		Select(sellerproduct.FieldName).
//		Scan(ctx, &v)
//
func (spq *SellerProductQuery) Select(fields ...string) *SellerProductSelect {
	spq.fields = append(spq.fields, fields...)
	return &SellerProductSelect{SellerProductQuery: spq}
}

func (spq *SellerProductQuery) prepareQuery(ctx context.Context) error {
	for _, f := range spq.fields {
		if !sellerproduct.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if spq.path != nil {
		prev, err := spq.path(ctx)
		if err != nil {
			return err
		}
		spq.sql = prev
	}
	return nil
}

func (spq *SellerProductQuery) sqlAll(ctx context.Context) ([]*SellerProduct, error) {
	var (
		nodes       = []*SellerProduct{}
		withFKs     = spq.withFKs
		_spec       = spq.querySpec()
		loadedTypes = [8]bool{
			spq.withBrand != nil,
			spq.withUser != nil,
			spq.withSellerProductImages != nil,
			spq.withCategories != nil,
			spq.withShop != nil,
			spq.withCartProducts != nil,
			spq.withCheckoutProducts != nil,
			spq.withSellerProductVariations != nil,
		}
	)
	if spq.withBrand != nil || spq.withUser != nil || spq.withShop != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, sellerproduct.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SellerProduct{config: spq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, spq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := spq.withBrand; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*SellerProduct)
		for i := range nodes {
			if nodes[i].brand_brand == nil {
				continue
			}
			fk := *nodes[i].brand_brand
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(brand.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "brand_brand" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Brand = n
			}
		}
	}

	if query := spq.withUser; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*SellerProduct)
		for i := range nodes {
			if nodes[i].user_seller_products == nil {
				continue
			}
			fk := *nodes[i].user_seller_products
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_seller_products" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User = n
			}
		}
	}

	if query := spq.withSellerProductImages; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*SellerProduct)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SellerProductImages = []*SellerProductImage{}
		}
		query.withFKs = true
		query.Where(predicate.SellerProductImage(func(s *sql.Selector) {
			s.Where(sql.InValues(sellerproduct.SellerProductImagesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.seller_product_seller_product_images
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "seller_product_seller_product_images" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "seller_product_seller_product_images" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.SellerProductImages = append(node.Edges.SellerProductImages, n)
		}
	}

	if query := spq.withCategories; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*SellerProduct, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Categories = []*Category{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*SellerProduct)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   sellerproduct.CategoriesTable,
				Columns: sellerproduct.CategoriesPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(sellerproduct.CategoriesPrimaryKey[1], fks...))
			},
			ScanValues: func() [2]interface{} {
				return [2]interface{}{new(sql.NullInt64), new(sql.NullInt64)}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				if _, ok := edges[inValue]; !ok {
					edgeids = append(edgeids, inValue)
				}
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, spq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "categories": %w`, err)
		}
		query.Where(category.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "categories" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Categories = append(nodes[i].Edges.Categories, n)
			}
		}
	}

	if query := spq.withShop; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*SellerProduct)
		for i := range nodes {
			if nodes[i].seller_shop_seller_products == nil {
				continue
			}
			fk := *nodes[i].seller_shop_seller_products
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(sellershop.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "seller_shop_seller_products" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Shop = n
			}
		}
	}

	if query := spq.withCartProducts; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*SellerProduct)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CartProducts = []*CartProduct{}
		}
		query.withFKs = true
		query.Where(predicate.CartProduct(func(s *sql.Selector) {
			s.Where(sql.InValues(sellerproduct.CartProductsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.seller_product_cart_products
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "seller_product_cart_products" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "seller_product_cart_products" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.CartProducts = append(node.Edges.CartProducts, n)
		}
	}

	if query := spq.withCheckoutProducts; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*SellerProduct)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.CheckoutProducts = []*CheckoutProduct{}
		}
		query.withFKs = true
		query.Where(predicate.CheckoutProduct(func(s *sql.Selector) {
			s.Where(sql.InValues(sellerproduct.CheckoutProductsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.seller_product_checkout_products
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "seller_product_checkout_products" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "seller_product_checkout_products" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.CheckoutProducts = append(node.Edges.CheckoutProducts, n)
		}
	}

	if query := spq.withSellerProductVariations; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*SellerProduct)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.SellerProductVariations = []*SellerProductVariation{}
		}
		query.withFKs = true
		query.Where(predicate.SellerProductVariation(func(s *sql.Selector) {
			s.Where(sql.InValues(sellerproduct.SellerProductVariationsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.seller_product_seller_product_variations
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "seller_product_seller_product_variations" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "seller_product_seller_product_variations" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.SellerProductVariations = append(node.Edges.SellerProductVariations, n)
		}
	}

	return nodes, nil
}

func (spq *SellerProductQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := spq.querySpec()
	return sqlgraph.CountNodes(ctx, spq.driver, _spec)
}

func (spq *SellerProductQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := spq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (spq *SellerProductQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellerproduct.Table,
			Columns: sellerproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproduct.FieldID,
			},
		},
		From:   spq.sql,
		Unique: true,
	}
	if unique := spq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := spq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sellerproduct.FieldID)
		for i := range fields {
			if fields[i] != sellerproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := spq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := spq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := spq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := spq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (spq *SellerProductQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(spq.driver.Dialect())
	t1 := builder.Table(sellerproduct.Table)
	columns := spq.fields
	if len(columns) == 0 {
		columns = sellerproduct.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if spq.sql != nil {
		selector = spq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range spq.predicates {
		p(selector)
	}
	for _, p := range spq.order {
		p(selector)
	}
	if offset := spq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := spq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SellerProductGroupBy is the group-by builder for SellerProduct entities.
type SellerProductGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (spgb *SellerProductGroupBy) Aggregate(fns ...AggregateFunc) *SellerProductGroupBy {
	spgb.fns = append(spgb.fns, fns...)
	return spgb
}

// Scan applies the group-by query and scans the result into the given value.
func (spgb *SellerProductGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := spgb.path(ctx)
	if err != nil {
		return err
	}
	spgb.sql = query
	return spgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (spgb *SellerProductGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := spgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (spgb *SellerProductGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(spgb.fields) > 1 {
		return nil, errors.New("ent: SellerProductGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := spgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (spgb *SellerProductGroupBy) StringsX(ctx context.Context) []string {
	v, err := spgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spgb *SellerProductGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = spgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerProductGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (spgb *SellerProductGroupBy) StringX(ctx context.Context) string {
	v, err := spgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (spgb *SellerProductGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(spgb.fields) > 1 {
		return nil, errors.New("ent: SellerProductGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := spgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (spgb *SellerProductGroupBy) IntsX(ctx context.Context) []int {
	v, err := spgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spgb *SellerProductGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = spgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerProductGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (spgb *SellerProductGroupBy) IntX(ctx context.Context) int {
	v, err := spgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (spgb *SellerProductGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(spgb.fields) > 1 {
		return nil, errors.New("ent: SellerProductGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := spgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (spgb *SellerProductGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := spgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spgb *SellerProductGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = spgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerProductGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (spgb *SellerProductGroupBy) Float64X(ctx context.Context) float64 {
	v, err := spgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (spgb *SellerProductGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(spgb.fields) > 1 {
		return nil, errors.New("ent: SellerProductGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := spgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (spgb *SellerProductGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := spgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spgb *SellerProductGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = spgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerProductGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (spgb *SellerProductGroupBy) BoolX(ctx context.Context) bool {
	v, err := spgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (spgb *SellerProductGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range spgb.fields {
		if !sellerproduct.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := spgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (spgb *SellerProductGroupBy) sqlQuery() *sql.Selector {
	selector := spgb.sql.Select()
	aggregation := make([]string, 0, len(spgb.fns))
	for _, fn := range spgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(spgb.fields)+len(spgb.fns))
		for _, f := range spgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(spgb.fields...)...)
}

// SellerProductSelect is the builder for selecting fields of SellerProduct entities.
type SellerProductSelect struct {
	*SellerProductQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (sps *SellerProductSelect) Scan(ctx context.Context, v interface{}) error {
	if err := sps.prepareQuery(ctx); err != nil {
		return err
	}
	sps.sql = sps.SellerProductQuery.sqlQuery(ctx)
	return sps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sps *SellerProductSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (sps *SellerProductSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sps.fields) > 1 {
		return nil, errors.New("ent: SellerProductSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sps *SellerProductSelect) StringsX(ctx context.Context) []string {
	v, err := sps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (sps *SellerProductSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerProductSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sps *SellerProductSelect) StringX(ctx context.Context) string {
	v, err := sps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (sps *SellerProductSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sps.fields) > 1 {
		return nil, errors.New("ent: SellerProductSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sps *SellerProductSelect) IntsX(ctx context.Context) []int {
	v, err := sps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (sps *SellerProductSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerProductSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sps *SellerProductSelect) IntX(ctx context.Context) int {
	v, err := sps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (sps *SellerProductSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sps.fields) > 1 {
		return nil, errors.New("ent: SellerProductSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sps *SellerProductSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (sps *SellerProductSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerProductSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sps *SellerProductSelect) Float64X(ctx context.Context) float64 {
	v, err := sps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (sps *SellerProductSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sps.fields) > 1 {
		return nil, errors.New("ent: SellerProductSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sps *SellerProductSelect) BoolsX(ctx context.Context) []bool {
	v, err := sps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (sps *SellerProductSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerProductSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sps *SellerProductSelect) BoolX(ctx context.Context) bool {
	v, err := sps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sps *SellerProductSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sps.sql.Query()
	if err := sps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
