// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/predicate"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellershop"
	"bongo/ent/sellershopproduct"
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerShopProductQuery is the builder for querying SellerShopProduct entities.
type SellerShopProductQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SellerShopProduct
	// eager-loading edges.
	withSellerShop    *SellerShopQuery
	withSellerProduct *SellerProductQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SellerShopProductQuery builder.
func (sspq *SellerShopProductQuery) Where(ps ...predicate.SellerShopProduct) *SellerShopProductQuery {
	sspq.predicates = append(sspq.predicates, ps...)
	return sspq
}

// Limit adds a limit step to the query.
func (sspq *SellerShopProductQuery) Limit(limit int) *SellerShopProductQuery {
	sspq.limit = &limit
	return sspq
}

// Offset adds an offset step to the query.
func (sspq *SellerShopProductQuery) Offset(offset int) *SellerShopProductQuery {
	sspq.offset = &offset
	return sspq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sspq *SellerShopProductQuery) Unique(unique bool) *SellerShopProductQuery {
	sspq.unique = &unique
	return sspq
}

// Order adds an order step to the query.
func (sspq *SellerShopProductQuery) Order(o ...OrderFunc) *SellerShopProductQuery {
	sspq.order = append(sspq.order, o...)
	return sspq
}

// QuerySellerShop chains the current query on the "seller_shop" edge.
func (sspq *SellerShopProductQuery) QuerySellerShop() *SellerShopQuery {
	query := &SellerShopQuery{config: sspq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sspq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sspq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sellershopproduct.Table, sellershopproduct.FieldID, selector),
			sqlgraph.To(sellershop.Table, sellershop.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellershopproduct.SellerShopTable, sellershopproduct.SellerShopColumn),
		)
		fromU = sqlgraph.SetNeighbors(sspq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySellerProduct chains the current query on the "seller_product" edge.
func (sspq *SellerShopProductQuery) QuerySellerProduct() *SellerProductQuery {
	query := &SellerProductQuery{config: sspq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sspq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sspq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(sellershopproduct.Table, sellershopproduct.FieldID, selector),
			sqlgraph.To(sellerproduct.Table, sellerproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellershopproduct.SellerProductTable, sellershopproduct.SellerProductColumn),
		)
		fromU = sqlgraph.SetNeighbors(sspq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SellerShopProduct entity from the query.
// Returns a *NotFoundError when no SellerShopProduct was found.
func (sspq *SellerShopProductQuery) First(ctx context.Context) (*SellerShopProduct, error) {
	nodes, err := sspq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sellershopproduct.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sspq *SellerShopProductQuery) FirstX(ctx context.Context) *SellerShopProduct {
	node, err := sspq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SellerShopProduct ID from the query.
// Returns a *NotFoundError when no SellerShopProduct ID was found.
func (sspq *SellerShopProductQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sspq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sellershopproduct.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sspq *SellerShopProductQuery) FirstIDX(ctx context.Context) int {
	id, err := sspq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SellerShopProduct entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one SellerShopProduct entity is not found.
// Returns a *NotFoundError when no SellerShopProduct entities are found.
func (sspq *SellerShopProductQuery) Only(ctx context.Context) (*SellerShopProduct, error) {
	nodes, err := sspq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sellershopproduct.Label}
	default:
		return nil, &NotSingularError{sellershopproduct.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sspq *SellerShopProductQuery) OnlyX(ctx context.Context) *SellerShopProduct {
	node, err := sspq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SellerShopProduct ID in the query.
// Returns a *NotSingularError when exactly one SellerShopProduct ID is not found.
// Returns a *NotFoundError when no entities are found.
func (sspq *SellerShopProductQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = sspq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sellershopproduct.Label}
	default:
		err = &NotSingularError{sellershopproduct.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sspq *SellerShopProductQuery) OnlyIDX(ctx context.Context) int {
	id, err := sspq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SellerShopProducts.
func (sspq *SellerShopProductQuery) All(ctx context.Context) ([]*SellerShopProduct, error) {
	if err := sspq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return sspq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (sspq *SellerShopProductQuery) AllX(ctx context.Context) []*SellerShopProduct {
	nodes, err := sspq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SellerShopProduct IDs.
func (sspq *SellerShopProductQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := sspq.Select(sellershopproduct.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sspq *SellerShopProductQuery) IDsX(ctx context.Context) []int {
	ids, err := sspq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sspq *SellerShopProductQuery) Count(ctx context.Context) (int, error) {
	if err := sspq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return sspq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (sspq *SellerShopProductQuery) CountX(ctx context.Context) int {
	count, err := sspq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sspq *SellerShopProductQuery) Exist(ctx context.Context) (bool, error) {
	if err := sspq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return sspq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (sspq *SellerShopProductQuery) ExistX(ctx context.Context) bool {
	exist, err := sspq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SellerShopProductQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sspq *SellerShopProductQuery) Clone() *SellerShopProductQuery {
	if sspq == nil {
		return nil
	}
	return &SellerShopProductQuery{
		config:            sspq.config,
		limit:             sspq.limit,
		offset:            sspq.offset,
		order:             append([]OrderFunc{}, sspq.order...),
		predicates:        append([]predicate.SellerShopProduct{}, sspq.predicates...),
		withSellerShop:    sspq.withSellerShop.Clone(),
		withSellerProduct: sspq.withSellerProduct.Clone(),
		// clone intermediate query.
		sql:  sspq.sql.Clone(),
		path: sspq.path,
	}
}

// WithSellerShop tells the query-builder to eager-load the nodes that are connected to
// the "seller_shop" edge. The optional arguments are used to configure the query builder of the edge.
func (sspq *SellerShopProductQuery) WithSellerShop(opts ...func(*SellerShopQuery)) *SellerShopProductQuery {
	query := &SellerShopQuery{config: sspq.config}
	for _, opt := range opts {
		opt(query)
	}
	sspq.withSellerShop = query
	return sspq
}

// WithSellerProduct tells the query-builder to eager-load the nodes that are connected to
// the "seller_product" edge. The optional arguments are used to configure the query builder of the edge.
func (sspq *SellerShopProductQuery) WithSellerProduct(opts ...func(*SellerProductQuery)) *SellerShopProductQuery {
	query := &SellerProductQuery{config: sspq.config}
	for _, opt := range opts {
		opt(query)
	}
	sspq.withSellerProduct = query
	return sspq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SellerShopProduct.Query().
//		GroupBy(sellershopproduct.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (sspq *SellerShopProductQuery) GroupBy(field string, fields ...string) *SellerShopProductGroupBy {
	group := &SellerShopProductGroupBy{config: sspq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := sspq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return sspq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.SellerShopProduct.Query().
//		Select(sellershopproduct.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (sspq *SellerShopProductQuery) Select(fields ...string) *SellerShopProductSelect {
	sspq.fields = append(sspq.fields, fields...)
	return &SellerShopProductSelect{SellerShopProductQuery: sspq}
}

func (sspq *SellerShopProductQuery) prepareQuery(ctx context.Context) error {
	for _, f := range sspq.fields {
		if !sellershopproduct.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sspq.path != nil {
		prev, err := sspq.path(ctx)
		if err != nil {
			return err
		}
		sspq.sql = prev
	}
	return nil
}

func (sspq *SellerShopProductQuery) sqlAll(ctx context.Context) ([]*SellerShopProduct, error) {
	var (
		nodes       = []*SellerShopProduct{}
		withFKs     = sspq.withFKs
		_spec       = sspq.querySpec()
		loadedTypes = [2]bool{
			sspq.withSellerShop != nil,
			sspq.withSellerProduct != nil,
		}
	)
	if sspq.withSellerShop != nil || sspq.withSellerProduct != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, sellershopproduct.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SellerShopProduct{config: sspq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, sspq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := sspq.withSellerShop; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*SellerShopProduct)
		for i := range nodes {
			if nodes[i].seller_shop_seller_shop_products == nil {
				continue
			}
			fk := *nodes[i].seller_shop_seller_shop_products
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(sellershop.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "seller_shop_seller_shop_products" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.SellerShop = n
			}
		}
	}

	if query := sspq.withSellerProduct; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*SellerShopProduct)
		for i := range nodes {
			if nodes[i].seller_product_seller_shop_products == nil {
				continue
			}
			fk := *nodes[i].seller_product_seller_shop_products
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(sellerproduct.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "seller_product_seller_shop_products" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.SellerProduct = n
			}
		}
	}

	return nodes, nil
}

func (sspq *SellerShopProductQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sspq.querySpec()
	return sqlgraph.CountNodes(ctx, sspq.driver, _spec)
}

func (sspq *SellerShopProductQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := sspq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (sspq *SellerShopProductQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellershopproduct.Table,
			Columns: sellershopproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellershopproduct.FieldID,
			},
		},
		From:   sspq.sql,
		Unique: true,
	}
	if unique := sspq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := sspq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sellershopproduct.FieldID)
		for i := range fields {
			if fields[i] != sellershopproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sspq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sspq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sspq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sspq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sspq *SellerShopProductQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sspq.driver.Dialect())
	t1 := builder.Table(sellershopproduct.Table)
	columns := sspq.fields
	if len(columns) == 0 {
		columns = sellershopproduct.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sspq.sql != nil {
		selector = sspq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range sspq.predicates {
		p(selector)
	}
	for _, p := range sspq.order {
		p(selector)
	}
	if offset := sspq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sspq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SellerShopProductGroupBy is the group-by builder for SellerShopProduct entities.
type SellerShopProductGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sspgb *SellerShopProductGroupBy) Aggregate(fns ...AggregateFunc) *SellerShopProductGroupBy {
	sspgb.fns = append(sspgb.fns, fns...)
	return sspgb
}

// Scan applies the group-by query and scans the result into the given value.
func (sspgb *SellerShopProductGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sspgb.path(ctx)
	if err != nil {
		return err
	}
	sspgb.sql = query
	return sspgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sspgb *SellerShopProductGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sspgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (sspgb *SellerShopProductGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sspgb.fields) > 1 {
		return nil, errors.New("ent: SellerShopProductGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sspgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sspgb *SellerShopProductGroupBy) StringsX(ctx context.Context) []string {
	v, err := sspgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sspgb *SellerShopProductGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sspgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellershopproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerShopProductGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sspgb *SellerShopProductGroupBy) StringX(ctx context.Context) string {
	v, err := sspgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (sspgb *SellerShopProductGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sspgb.fields) > 1 {
		return nil, errors.New("ent: SellerShopProductGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sspgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sspgb *SellerShopProductGroupBy) IntsX(ctx context.Context) []int {
	v, err := sspgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sspgb *SellerShopProductGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sspgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellershopproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerShopProductGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sspgb *SellerShopProductGroupBy) IntX(ctx context.Context) int {
	v, err := sspgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (sspgb *SellerShopProductGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sspgb.fields) > 1 {
		return nil, errors.New("ent: SellerShopProductGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sspgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sspgb *SellerShopProductGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sspgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sspgb *SellerShopProductGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sspgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellershopproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerShopProductGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sspgb *SellerShopProductGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sspgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (sspgb *SellerShopProductGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sspgb.fields) > 1 {
		return nil, errors.New("ent: SellerShopProductGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sspgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sspgb *SellerShopProductGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sspgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (sspgb *SellerShopProductGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sspgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellershopproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerShopProductGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sspgb *SellerShopProductGroupBy) BoolX(ctx context.Context) bool {
	v, err := sspgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sspgb *SellerShopProductGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range sspgb.fields {
		if !sellershopproduct.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := sspgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sspgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sspgb *SellerShopProductGroupBy) sqlQuery() *sql.Selector {
	selector := sspgb.sql.Select()
	aggregation := make([]string, 0, len(sspgb.fns))
	for _, fn := range sspgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(sspgb.fields)+len(sspgb.fns))
		for _, f := range sspgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(sspgb.fields...)...)
}

// SellerShopProductSelect is the builder for selecting fields of SellerShopProduct entities.
type SellerShopProductSelect struct {
	*SellerShopProductQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ssps *SellerShopProductSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ssps.prepareQuery(ctx); err != nil {
		return err
	}
	ssps.sql = ssps.SellerShopProductQuery.sqlQuery(ctx)
	return ssps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ssps *SellerShopProductSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ssps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ssps *SellerShopProductSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ssps.fields) > 1 {
		return nil, errors.New("ent: SellerShopProductSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ssps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ssps *SellerShopProductSelect) StringsX(ctx context.Context) []string {
	v, err := ssps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ssps *SellerShopProductSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ssps.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellershopproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerShopProductSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ssps *SellerShopProductSelect) StringX(ctx context.Context) string {
	v, err := ssps.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ssps *SellerShopProductSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ssps.fields) > 1 {
		return nil, errors.New("ent: SellerShopProductSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ssps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ssps *SellerShopProductSelect) IntsX(ctx context.Context) []int {
	v, err := ssps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ssps *SellerShopProductSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ssps.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellershopproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerShopProductSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ssps *SellerShopProductSelect) IntX(ctx context.Context) int {
	v, err := ssps.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ssps *SellerShopProductSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ssps.fields) > 1 {
		return nil, errors.New("ent: SellerShopProductSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ssps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ssps *SellerShopProductSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ssps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ssps *SellerShopProductSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ssps.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellershopproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerShopProductSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ssps *SellerShopProductSelect) Float64X(ctx context.Context) float64 {
	v, err := ssps.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ssps *SellerShopProductSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ssps.fields) > 1 {
		return nil, errors.New("ent: SellerShopProductSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ssps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ssps *SellerShopProductSelect) BoolsX(ctx context.Context) []bool {
	v, err := ssps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ssps *SellerShopProductSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ssps.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellershopproduct.Label}
	default:
		err = fmt.Errorf("ent: SellerShopProductSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ssps *SellerShopProductSelect) BoolX(ctx context.Context) bool {
	v, err := ssps.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ssps *SellerShopProductSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ssps.sql.Query()
	if err := ssps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
