// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/predicate"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductimage"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerProductImageUpdate is the builder for updating SellerProductImage entities.
type SellerProductImageUpdate struct {
	config
	hooks    []Hook
	mutation *SellerProductImageMutation
}

// Where appends a list predicates to the SellerProductImageUpdate builder.
func (spiu *SellerProductImageUpdate) Where(ps ...predicate.SellerProductImage) *SellerProductImageUpdate {
	spiu.mutation.Where(ps...)
	return spiu
}

// SetDisplay sets the "display" field.
func (spiu *SellerProductImageUpdate) SetDisplay(b bool) *SellerProductImageUpdate {
	spiu.mutation.SetDisplay(b)
	return spiu
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (spiu *SellerProductImageUpdate) SetNillableDisplay(b *bool) *SellerProductImageUpdate {
	if b != nil {
		spiu.SetDisplay(*b)
	}
	return spiu
}

// SetImage sets the "image" field.
func (spiu *SellerProductImageUpdate) SetImage(s string) *SellerProductImageUpdate {
	spiu.mutation.SetImage(s)
	return spiu
}

// SetUpdatedAt sets the "updated_at" field.
func (spiu *SellerProductImageUpdate) SetUpdatedAt(t time.Time) *SellerProductImageUpdate {
	spiu.mutation.SetUpdatedAt(t)
	return spiu
}

// SetDeletedAt sets the "deleted_at" field.
func (spiu *SellerProductImageUpdate) SetDeletedAt(t time.Time) *SellerProductImageUpdate {
	spiu.mutation.SetDeletedAt(t)
	return spiu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spiu *SellerProductImageUpdate) SetNillableDeletedAt(t *time.Time) *SellerProductImageUpdate {
	if t != nil {
		spiu.SetDeletedAt(*t)
	}
	return spiu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spiu *SellerProductImageUpdate) ClearDeletedAt() *SellerProductImageUpdate {
	spiu.mutation.ClearDeletedAt()
	return spiu
}

// SetSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID.
func (spiu *SellerProductImageUpdate) SetSellerProductID(id int) *SellerProductImageUpdate {
	spiu.mutation.SetSellerProductID(id)
	return spiu
}

// SetNillableSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID if the given value is not nil.
func (spiu *SellerProductImageUpdate) SetNillableSellerProductID(id *int) *SellerProductImageUpdate {
	if id != nil {
		spiu = spiu.SetSellerProductID(*id)
	}
	return spiu
}

// SetSellerProduct sets the "seller_product" edge to the SellerProduct entity.
func (spiu *SellerProductImageUpdate) SetSellerProduct(s *SellerProduct) *SellerProductImageUpdate {
	return spiu.SetSellerProductID(s.ID)
}

// Mutation returns the SellerProductImageMutation object of the builder.
func (spiu *SellerProductImageUpdate) Mutation() *SellerProductImageMutation {
	return spiu.mutation
}

// ClearSellerProduct clears the "seller_product" edge to the SellerProduct entity.
func (spiu *SellerProductImageUpdate) ClearSellerProduct() *SellerProductImageUpdate {
	spiu.mutation.ClearSellerProduct()
	return spiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spiu *SellerProductImageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	spiu.defaults()
	if len(spiu.hooks) == 0 {
		affected, err = spiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerProductImageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spiu.mutation = mutation
			affected, err = spiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spiu.hooks) - 1; i >= 0; i-- {
			if spiu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spiu *SellerProductImageUpdate) SaveX(ctx context.Context) int {
	affected, err := spiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spiu *SellerProductImageUpdate) Exec(ctx context.Context) error {
	_, err := spiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spiu *SellerProductImageUpdate) ExecX(ctx context.Context) {
	if err := spiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spiu *SellerProductImageUpdate) defaults() {
	if _, ok := spiu.mutation.UpdatedAt(); !ok {
		v := sellerproductimage.UpdateDefaultUpdatedAt()
		spiu.mutation.SetUpdatedAt(v)
	}
}

func (spiu *SellerProductImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellerproductimage.Table,
			Columns: sellerproductimage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproductimage.FieldID,
			},
		},
	}
	if ps := spiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spiu.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sellerproductimage.FieldDisplay,
		})
	}
	if value, ok := spiu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproductimage.FieldImage,
		})
	}
	if value, ok := spiu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductimage.FieldUpdatedAt,
		})
	}
	if value, ok := spiu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductimage.FieldDeletedAt,
		})
	}
	if spiu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproductimage.FieldDeletedAt,
		})
	}
	if spiu.mutation.SellerProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproductimage.SellerProductTable,
			Columns: []string{sellerproductimage.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spiu.mutation.SellerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproductimage.SellerProductTable,
			Columns: []string{sellerproductimage.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellerproductimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SellerProductImageUpdateOne is the builder for updating a single SellerProductImage entity.
type SellerProductImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SellerProductImageMutation
}

// SetDisplay sets the "display" field.
func (spiuo *SellerProductImageUpdateOne) SetDisplay(b bool) *SellerProductImageUpdateOne {
	spiuo.mutation.SetDisplay(b)
	return spiuo
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (spiuo *SellerProductImageUpdateOne) SetNillableDisplay(b *bool) *SellerProductImageUpdateOne {
	if b != nil {
		spiuo.SetDisplay(*b)
	}
	return spiuo
}

// SetImage sets the "image" field.
func (spiuo *SellerProductImageUpdateOne) SetImage(s string) *SellerProductImageUpdateOne {
	spiuo.mutation.SetImage(s)
	return spiuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spiuo *SellerProductImageUpdateOne) SetUpdatedAt(t time.Time) *SellerProductImageUpdateOne {
	spiuo.mutation.SetUpdatedAt(t)
	return spiuo
}

// SetDeletedAt sets the "deleted_at" field.
func (spiuo *SellerProductImageUpdateOne) SetDeletedAt(t time.Time) *SellerProductImageUpdateOne {
	spiuo.mutation.SetDeletedAt(t)
	return spiuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spiuo *SellerProductImageUpdateOne) SetNillableDeletedAt(t *time.Time) *SellerProductImageUpdateOne {
	if t != nil {
		spiuo.SetDeletedAt(*t)
	}
	return spiuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spiuo *SellerProductImageUpdateOne) ClearDeletedAt() *SellerProductImageUpdateOne {
	spiuo.mutation.ClearDeletedAt()
	return spiuo
}

// SetSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID.
func (spiuo *SellerProductImageUpdateOne) SetSellerProductID(id int) *SellerProductImageUpdateOne {
	spiuo.mutation.SetSellerProductID(id)
	return spiuo
}

// SetNillableSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID if the given value is not nil.
func (spiuo *SellerProductImageUpdateOne) SetNillableSellerProductID(id *int) *SellerProductImageUpdateOne {
	if id != nil {
		spiuo = spiuo.SetSellerProductID(*id)
	}
	return spiuo
}

// SetSellerProduct sets the "seller_product" edge to the SellerProduct entity.
func (spiuo *SellerProductImageUpdateOne) SetSellerProduct(s *SellerProduct) *SellerProductImageUpdateOne {
	return spiuo.SetSellerProductID(s.ID)
}

// Mutation returns the SellerProductImageMutation object of the builder.
func (spiuo *SellerProductImageUpdateOne) Mutation() *SellerProductImageMutation {
	return spiuo.mutation
}

// ClearSellerProduct clears the "seller_product" edge to the SellerProduct entity.
func (spiuo *SellerProductImageUpdateOne) ClearSellerProduct() *SellerProductImageUpdateOne {
	spiuo.mutation.ClearSellerProduct()
	return spiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spiuo *SellerProductImageUpdateOne) Select(field string, fields ...string) *SellerProductImageUpdateOne {
	spiuo.fields = append([]string{field}, fields...)
	return spiuo
}

// Save executes the query and returns the updated SellerProductImage entity.
func (spiuo *SellerProductImageUpdateOne) Save(ctx context.Context) (*SellerProductImage, error) {
	var (
		err  error
		node *SellerProductImage
	)
	spiuo.defaults()
	if len(spiuo.hooks) == 0 {
		node, err = spiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerProductImageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spiuo.mutation = mutation
			node, err = spiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spiuo.hooks) - 1; i >= 0; i-- {
			if spiuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spiuo *SellerProductImageUpdateOne) SaveX(ctx context.Context) *SellerProductImage {
	node, err := spiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spiuo *SellerProductImageUpdateOne) Exec(ctx context.Context) error {
	_, err := spiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spiuo *SellerProductImageUpdateOne) ExecX(ctx context.Context) {
	if err := spiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spiuo *SellerProductImageUpdateOne) defaults() {
	if _, ok := spiuo.mutation.UpdatedAt(); !ok {
		v := sellerproductimage.UpdateDefaultUpdatedAt()
		spiuo.mutation.SetUpdatedAt(v)
	}
}

func (spiuo *SellerProductImageUpdateOne) sqlSave(ctx context.Context) (_node *SellerProductImage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellerproductimage.Table,
			Columns: sellerproductimage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproductimage.FieldID,
			},
		},
	}
	id, ok := spiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SellerProductImage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sellerproductimage.FieldID)
		for _, f := range fields {
			if !sellerproductimage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sellerproductimage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spiuo.mutation.Display(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sellerproductimage.FieldDisplay,
		})
	}
	if value, ok := spiuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproductimage.FieldImage,
		})
	}
	if value, ok := spiuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductimage.FieldUpdatedAt,
		})
	}
	if value, ok := spiuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductimage.FieldDeletedAt,
		})
	}
	if spiuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproductimage.FieldDeletedAt,
		})
	}
	if spiuo.mutation.SellerProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproductimage.SellerProductTable,
			Columns: []string{sellerproductimage.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spiuo.mutation.SellerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproductimage.SellerProductTable,
			Columns: []string{sellerproductimage.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SellerProductImage{config: spiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellerproductimage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
