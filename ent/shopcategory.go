// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/shopcategory"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ShopCategory is the model entity for the ShopCategory schema.
type ShopCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShopCategoryQuery when eager-loading is set.
	Edges ShopCategoryEdges `json:"edges"`
}

// ShopCategoryEdges holds the relations/edges for other nodes in the graph.
type ShopCategoryEdges struct {
	// Categories holds the value of the categories edge.
	Categories []*Category `json:"categories,omitempty"`
	// SellerRequests holds the value of the seller_requests edge.
	SellerRequests []*SellerRequest `json:"seller_requests,omitempty"`
	// SellerShops holds the value of the seller_shops edge.
	SellerShops []*SellerShop `json:"seller_shops,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CategoriesOrErr returns the Categories value or an error if the edge
// was not loaded in eager-loading.
func (e ShopCategoryEdges) CategoriesOrErr() ([]*Category, error) {
	if e.loadedTypes[0] {
		return e.Categories, nil
	}
	return nil, &NotLoadedError{edge: "categories"}
}

// SellerRequestsOrErr returns the SellerRequests value or an error if the edge
// was not loaded in eager-loading.
func (e ShopCategoryEdges) SellerRequestsOrErr() ([]*SellerRequest, error) {
	if e.loadedTypes[1] {
		return e.SellerRequests, nil
	}
	return nil, &NotLoadedError{edge: "seller_requests"}
}

// SellerShopsOrErr returns the SellerShops value or an error if the edge
// was not loaded in eager-loading.
func (e ShopCategoryEdges) SellerShopsOrErr() ([]*SellerShop, error) {
	if e.loadedTypes[2] {
		return e.SellerShops, nil
	}
	return nil, &NotLoadedError{edge: "seller_shops"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ShopCategory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case shopcategory.FieldID:
			values[i] = new(sql.NullInt64)
		case shopcategory.FieldName, shopcategory.FieldSlug, shopcategory.FieldImage:
			values[i] = new(sql.NullString)
		case shopcategory.FieldCreatedAt, shopcategory.FieldUpdatedAt, shopcategory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ShopCategory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ShopCategory fields.
func (sc *ShopCategory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case shopcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sc.ID = int(value.Int64)
		case shopcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sc.Name = value.String
			}
		case shopcategory.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				sc.Slug = value.String
			}
		case shopcategory.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				sc.Image = value.String
			}
		case shopcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sc.CreatedAt = value.Time
			}
		case shopcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sc.UpdatedAt = value.Time
			}
		case shopcategory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sc.DeletedAt = new(time.Time)
				*sc.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// QueryCategories queries the "categories" edge of the ShopCategory entity.
func (sc *ShopCategory) QueryCategories() *CategoryQuery {
	return (&ShopCategoryClient{config: sc.config}).QueryCategories(sc)
}

// QuerySellerRequests queries the "seller_requests" edge of the ShopCategory entity.
func (sc *ShopCategory) QuerySellerRequests() *SellerRequestQuery {
	return (&ShopCategoryClient{config: sc.config}).QuerySellerRequests(sc)
}

// QuerySellerShops queries the "seller_shops" edge of the ShopCategory entity.
func (sc *ShopCategory) QuerySellerShops() *SellerShopQuery {
	return (&ShopCategoryClient{config: sc.config}).QuerySellerShops(sc)
}

// Update returns a builder for updating this ShopCategory.
// Note that you need to call ShopCategory.Unwrap() before calling this method if this ShopCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (sc *ShopCategory) Update() *ShopCategoryUpdateOne {
	return (&ShopCategoryClient{config: sc.config}).UpdateOne(sc)
}

// Unwrap unwraps the ShopCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sc *ShopCategory) Unwrap() *ShopCategory {
	tx, ok := sc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ShopCategory is not a transactional entity")
	}
	sc.config.driver = tx.drv
	return sc
}

// String implements the fmt.Stringer.
func (sc *ShopCategory) String() string {
	var builder strings.Builder
	builder.WriteString("ShopCategory(")
	builder.WriteString(fmt.Sprintf("id=%v", sc.ID))
	builder.WriteString(", name=")
	builder.WriteString(sc.Name)
	builder.WriteString(", slug=")
	builder.WriteString(sc.Slug)
	builder.WriteString(", image=")
	builder.WriteString(sc.Image)
	builder.WriteString(", created_at=")
	builder.WriteString(sc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(sc.UpdatedAt.Format(time.ANSIC))
	if v := sc.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// ShopCategories is a parsable slice of ShopCategory.
type ShopCategories []*ShopCategory

func (sc ShopCategories) config(cfg config) {
	for _i := range sc {
		sc[_i].config = cfg
	}
}
