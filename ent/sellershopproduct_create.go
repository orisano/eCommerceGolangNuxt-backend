// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/sellerproduct"
	"bongo/ent/sellershop"
	"bongo/ent/sellershopproduct"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerShopProductCreate is the builder for creating a SellerShopProduct entity.
type SellerShopProductCreate struct {
	config
	mutation *SellerShopProductMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sspc *SellerShopProductCreate) SetCreatedAt(t time.Time) *SellerShopProductCreate {
	sspc.mutation.SetCreatedAt(t)
	return sspc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sspc *SellerShopProductCreate) SetNillableCreatedAt(t *time.Time) *SellerShopProductCreate {
	if t != nil {
		sspc.SetCreatedAt(*t)
	}
	return sspc
}

// SetUpdatedAt sets the "updated_at" field.
func (sspc *SellerShopProductCreate) SetUpdatedAt(t time.Time) *SellerShopProductCreate {
	sspc.mutation.SetUpdatedAt(t)
	return sspc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sspc *SellerShopProductCreate) SetNillableUpdatedAt(t *time.Time) *SellerShopProductCreate {
	if t != nil {
		sspc.SetUpdatedAt(*t)
	}
	return sspc
}

// SetDeletedAt sets the "deleted_at" field.
func (sspc *SellerShopProductCreate) SetDeletedAt(t time.Time) *SellerShopProductCreate {
	sspc.mutation.SetDeletedAt(t)
	return sspc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sspc *SellerShopProductCreate) SetNillableDeletedAt(t *time.Time) *SellerShopProductCreate {
	if t != nil {
		sspc.SetDeletedAt(*t)
	}
	return sspc
}

// SetSellerShopID sets the "seller_shop" edge to the SellerShop entity by ID.
func (sspc *SellerShopProductCreate) SetSellerShopID(id int) *SellerShopProductCreate {
	sspc.mutation.SetSellerShopID(id)
	return sspc
}

// SetNillableSellerShopID sets the "seller_shop" edge to the SellerShop entity by ID if the given value is not nil.
func (sspc *SellerShopProductCreate) SetNillableSellerShopID(id *int) *SellerShopProductCreate {
	if id != nil {
		sspc = sspc.SetSellerShopID(*id)
	}
	return sspc
}

// SetSellerShop sets the "seller_shop" edge to the SellerShop entity.
func (sspc *SellerShopProductCreate) SetSellerShop(s *SellerShop) *SellerShopProductCreate {
	return sspc.SetSellerShopID(s.ID)
}

// SetSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID.
func (sspc *SellerShopProductCreate) SetSellerProductID(id int) *SellerShopProductCreate {
	sspc.mutation.SetSellerProductID(id)
	return sspc
}

// SetNillableSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID if the given value is not nil.
func (sspc *SellerShopProductCreate) SetNillableSellerProductID(id *int) *SellerShopProductCreate {
	if id != nil {
		sspc = sspc.SetSellerProductID(*id)
	}
	return sspc
}

// SetSellerProduct sets the "seller_product" edge to the SellerProduct entity.
func (sspc *SellerShopProductCreate) SetSellerProduct(s *SellerProduct) *SellerShopProductCreate {
	return sspc.SetSellerProductID(s.ID)
}

// Mutation returns the SellerShopProductMutation object of the builder.
func (sspc *SellerShopProductCreate) Mutation() *SellerShopProductMutation {
	return sspc.mutation
}

// Save creates the SellerShopProduct in the database.
func (sspc *SellerShopProductCreate) Save(ctx context.Context) (*SellerShopProduct, error) {
	var (
		err  error
		node *SellerShopProduct
	)
	sspc.defaults()
	if len(sspc.hooks) == 0 {
		if err = sspc.check(); err != nil {
			return nil, err
		}
		node, err = sspc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerShopProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sspc.check(); err != nil {
				return nil, err
			}
			sspc.mutation = mutation
			if node, err = sspc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sspc.hooks) - 1; i >= 0; i-- {
			if sspc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sspc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sspc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sspc *SellerShopProductCreate) SaveX(ctx context.Context) *SellerShopProduct {
	v, err := sspc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sspc *SellerShopProductCreate) Exec(ctx context.Context) error {
	_, err := sspc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sspc *SellerShopProductCreate) ExecX(ctx context.Context) {
	if err := sspc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sspc *SellerShopProductCreate) defaults() {
	if _, ok := sspc.mutation.CreatedAt(); !ok {
		v := sellershopproduct.DefaultCreatedAt()
		sspc.mutation.SetCreatedAt(v)
	}
	if _, ok := sspc.mutation.UpdatedAt(); !ok {
		v := sellershopproduct.DefaultUpdatedAt()
		sspc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sspc *SellerShopProductCreate) check() error {
	if _, ok := sspc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := sspc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (sspc *SellerShopProductCreate) sqlSave(ctx context.Context) (*SellerShopProduct, error) {
	_node, _spec := sspc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sspc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sspc *SellerShopProductCreate) createSpec() (*SellerShopProduct, *sqlgraph.CreateSpec) {
	var (
		_node = &SellerShopProduct{config: sspc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sellershopproduct.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellershopproduct.FieldID,
			},
		}
	)
	if value, ok := sspc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershopproduct.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sspc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershopproduct.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sspc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershopproduct.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := sspc.mutation.SellerShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershopproduct.SellerShopTable,
			Columns: []string{sellershopproduct.SellerShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.seller_shop_seller_shop_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sspc.mutation.SellerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershopproduct.SellerProductTable,
			Columns: []string{sellershopproduct.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.seller_product_seller_shop_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SellerShopProductCreateBulk is the builder for creating many SellerShopProduct entities in bulk.
type SellerShopProductCreateBulk struct {
	config
	builders []*SellerShopProductCreate
}

// Save creates the SellerShopProduct entities in the database.
func (sspcb *SellerShopProductCreateBulk) Save(ctx context.Context) ([]*SellerShopProduct, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sspcb.builders))
	nodes := make([]*SellerShopProduct, len(sspcb.builders))
	mutators := make([]Mutator, len(sspcb.builders))
	for i := range sspcb.builders {
		func(i int, root context.Context) {
			builder := sspcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SellerShopProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sspcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sspcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sspcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sspcb *SellerShopProductCreateBulk) SaveX(ctx context.Context) []*SellerShopProduct {
	v, err := sspcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sspcb *SellerShopProductCreateBulk) Exec(ctx context.Context) error {
	_, err := sspcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sspcb *SellerShopProductCreateBulk) ExecX(ctx context.Context) {
	if err := sspcb.Exec(ctx); err != nil {
		panic(err)
	}
}
