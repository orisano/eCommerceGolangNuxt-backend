// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/sellerrequest"
	"bongo/ent/shopcategory"
	"bongo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerRequestCreate is the builder for creating a SellerRequest entity.
type SellerRequestCreate struct {
	config
	mutation *SellerRequestMutation
	hooks    []Hook
}

// SetSellerName sets the "seller_name" field.
func (src *SellerRequestCreate) SetSellerName(s string) *SellerRequestCreate {
	src.mutation.SetSellerName(s)
	return src
}

// SetShopName sets the "shop_name" field.
func (src *SellerRequestCreate) SetShopName(s string) *SellerRequestCreate {
	src.mutation.SetShopName(s)
	return src
}

// SetContactNumber sets the "contact_number" field.
func (src *SellerRequestCreate) SetContactNumber(s string) *SellerRequestCreate {
	src.mutation.SetContactNumber(s)
	return src
}

// SetShopLocation sets the "shop_location" field.
func (src *SellerRequestCreate) SetShopLocation(s string) *SellerRequestCreate {
	src.mutation.SetShopLocation(s)
	return src
}

// SetTaxID sets the "tax_id" field.
func (src *SellerRequestCreate) SetTaxID(s string) *SellerRequestCreate {
	src.mutation.SetTaxID(s)
	return src
}

// SetAccepted sets the "accepted" field.
func (src *SellerRequestCreate) SetAccepted(b bool) *SellerRequestCreate {
	src.mutation.SetAccepted(b)
	return src
}

// SetNillableAccepted sets the "accepted" field if the given value is not nil.
func (src *SellerRequestCreate) SetNillableAccepted(b *bool) *SellerRequestCreate {
	if b != nil {
		src.SetAccepted(*b)
	}
	return src
}

// SetCreatedAt sets the "created_at" field.
func (src *SellerRequestCreate) SetCreatedAt(t time.Time) *SellerRequestCreate {
	src.mutation.SetCreatedAt(t)
	return src
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (src *SellerRequestCreate) SetNillableCreatedAt(t *time.Time) *SellerRequestCreate {
	if t != nil {
		src.SetCreatedAt(*t)
	}
	return src
}

// SetUpdatedAt sets the "updated_at" field.
func (src *SellerRequestCreate) SetUpdatedAt(t time.Time) *SellerRequestCreate {
	src.mutation.SetUpdatedAt(t)
	return src
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (src *SellerRequestCreate) SetNillableUpdatedAt(t *time.Time) *SellerRequestCreate {
	if t != nil {
		src.SetUpdatedAt(*t)
	}
	return src
}

// SetDeletedAt sets the "deleted_at" field.
func (src *SellerRequestCreate) SetDeletedAt(t time.Time) *SellerRequestCreate {
	src.mutation.SetDeletedAt(t)
	return src
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (src *SellerRequestCreate) SetNillableDeletedAt(t *time.Time) *SellerRequestCreate {
	if t != nil {
		src.SetDeletedAt(*t)
	}
	return src
}

// SetShopCategoryID sets the "shop_category" edge to the ShopCategory entity by ID.
func (src *SellerRequestCreate) SetShopCategoryID(id int) *SellerRequestCreate {
	src.mutation.SetShopCategoryID(id)
	return src
}

// SetNillableShopCategoryID sets the "shop_category" edge to the ShopCategory entity by ID if the given value is not nil.
func (src *SellerRequestCreate) SetNillableShopCategoryID(id *int) *SellerRequestCreate {
	if id != nil {
		src = src.SetShopCategoryID(*id)
	}
	return src
}

// SetShopCategory sets the "shop_category" edge to the ShopCategory entity.
func (src *SellerRequestCreate) SetShopCategory(s *ShopCategory) *SellerRequestCreate {
	return src.SetShopCategoryID(s.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (src *SellerRequestCreate) SetUserID(id int) *SellerRequestCreate {
	src.mutation.SetUserID(id)
	return src
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (src *SellerRequestCreate) SetNillableUserID(id *int) *SellerRequestCreate {
	if id != nil {
		src = src.SetUserID(*id)
	}
	return src
}

// SetUser sets the "user" edge to the User entity.
func (src *SellerRequestCreate) SetUser(u *User) *SellerRequestCreate {
	return src.SetUserID(u.ID)
}

// Mutation returns the SellerRequestMutation object of the builder.
func (src *SellerRequestCreate) Mutation() *SellerRequestMutation {
	return src.mutation
}

// Save creates the SellerRequest in the database.
func (src *SellerRequestCreate) Save(ctx context.Context) (*SellerRequest, error) {
	var (
		err  error
		node *SellerRequest
	)
	src.defaults()
	if len(src.hooks) == 0 {
		if err = src.check(); err != nil {
			return nil, err
		}
		node, err = src.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerRequestMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = src.check(); err != nil {
				return nil, err
			}
			src.mutation = mutation
			if node, err = src.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(src.hooks) - 1; i >= 0; i-- {
			if src.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = src.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, src.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (src *SellerRequestCreate) SaveX(ctx context.Context) *SellerRequest {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *SellerRequestCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *SellerRequestCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (src *SellerRequestCreate) defaults() {
	if _, ok := src.mutation.Accepted(); !ok {
		v := sellerrequest.DefaultAccepted
		src.mutation.SetAccepted(v)
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		v := sellerrequest.DefaultCreatedAt()
		src.mutation.SetCreatedAt(v)
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		v := sellerrequest.DefaultUpdatedAt()
		src.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *SellerRequestCreate) check() error {
	if _, ok := src.mutation.SellerName(); !ok {
		return &ValidationError{Name: "seller_name", err: errors.New(`ent: missing required field "seller_name"`)}
	}
	if _, ok := src.mutation.ShopName(); !ok {
		return &ValidationError{Name: "shop_name", err: errors.New(`ent: missing required field "shop_name"`)}
	}
	if _, ok := src.mutation.ContactNumber(); !ok {
		return &ValidationError{Name: "contact_number", err: errors.New(`ent: missing required field "contact_number"`)}
	}
	if v, ok := src.mutation.ContactNumber(); ok {
		if err := sellerrequest.ContactNumberValidator(v); err != nil {
			return &ValidationError{Name: "contact_number", err: fmt.Errorf(`ent: validator failed for field "contact_number": %w`, err)}
		}
	}
	if _, ok := src.mutation.ShopLocation(); !ok {
		return &ValidationError{Name: "shop_location", err: errors.New(`ent: missing required field "shop_location"`)}
	}
	if _, ok := src.mutation.TaxID(); !ok {
		return &ValidationError{Name: "tax_id", err: errors.New(`ent: missing required field "tax_id"`)}
	}
	if _, ok := src.mutation.Accepted(); !ok {
		return &ValidationError{Name: "accepted", err: errors.New(`ent: missing required field "accepted"`)}
	}
	if _, ok := src.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := src.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (src *SellerRequestCreate) sqlSave(ctx context.Context) (*SellerRequest, error) {
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (src *SellerRequestCreate) createSpec() (*SellerRequest, *sqlgraph.CreateSpec) {
	var (
		_node = &SellerRequest{config: src.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sellerrequest.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerrequest.FieldID,
			},
		}
	)
	if value, ok := src.mutation.SellerName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerrequest.FieldSellerName,
		})
		_node.SellerName = value
	}
	if value, ok := src.mutation.ShopName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerrequest.FieldShopName,
		})
		_node.ShopName = value
	}
	if value, ok := src.mutation.ContactNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerrequest.FieldContactNumber,
		})
		_node.ContactNumber = value
	}
	if value, ok := src.mutation.ShopLocation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerrequest.FieldShopLocation,
		})
		_node.ShopLocation = value
	}
	if value, ok := src.mutation.TaxID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerrequest.FieldTaxID,
		})
		_node.TaxID = value
	}
	if value, ok := src.mutation.Accepted(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sellerrequest.FieldAccepted,
		})
		_node.Accepted = value
	}
	if value, ok := src.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerrequest.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := src.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerrequest.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := src.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerrequest.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := src.mutation.ShopCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerrequest.ShopCategoryTable,
			Columns: []string{sellerrequest.ShopCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: shopcategory.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.shop_category_seller_requests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerrequest.UserTable,
			Columns: []string{sellerrequest.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_seller_requests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SellerRequestCreateBulk is the builder for creating many SellerRequest entities in bulk.
type SellerRequestCreateBulk struct {
	config
	builders []*SellerRequestCreate
}

// Save creates the SellerRequest entities in the database.
func (srcb *SellerRequestCreateBulk) Save(ctx context.Context) ([]*SellerRequest, error) {
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*SellerRequest, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SellerRequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *SellerRequestCreateBulk) SaveX(ctx context.Context) []*SellerRequest {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *SellerRequestCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *SellerRequestCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
