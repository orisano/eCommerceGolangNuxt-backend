// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/predicate"
	"bongo/ent/sellerproductcategory"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerProductCategoryUpdate is the builder for updating SellerProductCategory entities.
type SellerProductCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *SellerProductCategoryMutation
}

// Where appends a list predicates to the SellerProductCategoryUpdate builder.
func (spcu *SellerProductCategoryUpdate) Where(ps ...predicate.SellerProductCategory) *SellerProductCategoryUpdate {
	spcu.mutation.Where(ps...)
	return spcu
}

// SetUpdatedAt sets the "updated_at" field.
func (spcu *SellerProductCategoryUpdate) SetUpdatedAt(t time.Time) *SellerProductCategoryUpdate {
	spcu.mutation.SetUpdatedAt(t)
	return spcu
}

// SetDeletedAt sets the "deleted_at" field.
func (spcu *SellerProductCategoryUpdate) SetDeletedAt(t time.Time) *SellerProductCategoryUpdate {
	spcu.mutation.SetDeletedAt(t)
	return spcu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spcu *SellerProductCategoryUpdate) SetNillableDeletedAt(t *time.Time) *SellerProductCategoryUpdate {
	if t != nil {
		spcu.SetDeletedAt(*t)
	}
	return spcu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spcu *SellerProductCategoryUpdate) ClearDeletedAt() *SellerProductCategoryUpdate {
	spcu.mutation.ClearDeletedAt()
	return spcu
}

// Mutation returns the SellerProductCategoryMutation object of the builder.
func (spcu *SellerProductCategoryUpdate) Mutation() *SellerProductCategoryMutation {
	return spcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spcu *SellerProductCategoryUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	spcu.defaults()
	if len(spcu.hooks) == 0 {
		affected, err = spcu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerProductCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spcu.mutation = mutation
			affected, err = spcu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spcu.hooks) - 1; i >= 0; i-- {
			if spcu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spcu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spcu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spcu *SellerProductCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := spcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spcu *SellerProductCategoryUpdate) Exec(ctx context.Context) error {
	_, err := spcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcu *SellerProductCategoryUpdate) ExecX(ctx context.Context) {
	if err := spcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spcu *SellerProductCategoryUpdate) defaults() {
	if _, ok := spcu.mutation.UpdatedAt(); !ok {
		v := sellerproductcategory.UpdateDefaultUpdatedAt()
		spcu.mutation.SetUpdatedAt(v)
	}
}

func (spcu *SellerProductCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellerproductcategory.Table,
			Columns: sellerproductcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproductcategory.FieldID,
			},
		},
	}
	if ps := spcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spcu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductcategory.FieldUpdatedAt,
		})
	}
	if value, ok := spcu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductcategory.FieldDeletedAt,
		})
	}
	if spcu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproductcategory.FieldDeletedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellerproductcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SellerProductCategoryUpdateOne is the builder for updating a single SellerProductCategory entity.
type SellerProductCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SellerProductCategoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (spcuo *SellerProductCategoryUpdateOne) SetUpdatedAt(t time.Time) *SellerProductCategoryUpdateOne {
	spcuo.mutation.SetUpdatedAt(t)
	return spcuo
}

// SetDeletedAt sets the "deleted_at" field.
func (spcuo *SellerProductCategoryUpdateOne) SetDeletedAt(t time.Time) *SellerProductCategoryUpdateOne {
	spcuo.mutation.SetDeletedAt(t)
	return spcuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spcuo *SellerProductCategoryUpdateOne) SetNillableDeletedAt(t *time.Time) *SellerProductCategoryUpdateOne {
	if t != nil {
		spcuo.SetDeletedAt(*t)
	}
	return spcuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spcuo *SellerProductCategoryUpdateOne) ClearDeletedAt() *SellerProductCategoryUpdateOne {
	spcuo.mutation.ClearDeletedAt()
	return spcuo
}

// Mutation returns the SellerProductCategoryMutation object of the builder.
func (spcuo *SellerProductCategoryUpdateOne) Mutation() *SellerProductCategoryMutation {
	return spcuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spcuo *SellerProductCategoryUpdateOne) Select(field string, fields ...string) *SellerProductCategoryUpdateOne {
	spcuo.fields = append([]string{field}, fields...)
	return spcuo
}

// Save executes the query and returns the updated SellerProductCategory entity.
func (spcuo *SellerProductCategoryUpdateOne) Save(ctx context.Context) (*SellerProductCategory, error) {
	var (
		err  error
		node *SellerProductCategory
	)
	spcuo.defaults()
	if len(spcuo.hooks) == 0 {
		node, err = spcuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerProductCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spcuo.mutation = mutation
			node, err = spcuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spcuo.hooks) - 1; i >= 0; i-- {
			if spcuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spcuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spcuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spcuo *SellerProductCategoryUpdateOne) SaveX(ctx context.Context) *SellerProductCategory {
	node, err := spcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spcuo *SellerProductCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := spcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcuo *SellerProductCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := spcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spcuo *SellerProductCategoryUpdateOne) defaults() {
	if _, ok := spcuo.mutation.UpdatedAt(); !ok {
		v := sellerproductcategory.UpdateDefaultUpdatedAt()
		spcuo.mutation.SetUpdatedAt(v)
	}
}

func (spcuo *SellerProductCategoryUpdateOne) sqlSave(ctx context.Context) (_node *SellerProductCategory, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellerproductcategory.Table,
			Columns: sellerproductcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproductcategory.FieldID,
			},
		},
	}
	id, ok := spcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SellerProductCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sellerproductcategory.FieldID)
		for _, f := range fields {
			if !sellerproductcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sellerproductcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spcuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductcategory.FieldUpdatedAt,
		})
	}
	if value, ok := spcuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductcategory.FieldDeletedAt,
		})
	}
	if spcuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproductcategory.FieldDeletedAt,
		})
	}
	_node = &SellerProductCategory{config: spcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellerproductcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
