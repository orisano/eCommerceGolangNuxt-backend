// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/checkout"
	"bongo/ent/checkoutproduct"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductvariation"
	"bongo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// CheckoutProductCreate is the builder for creating a CheckoutProduct entity.
type CheckoutProductCreate struct {
	config
	mutation *CheckoutProductMutation
	hooks    []Hook
}

// SetQuantity sets the "quantity" field.
func (cpc *CheckoutProductCreate) SetQuantity(i int) *CheckoutProductCreate {
	cpc.mutation.SetQuantity(i)
	return cpc
}

// SetSellingPrice sets the "selling_price" field.
func (cpc *CheckoutProductCreate) SetSellingPrice(d decimal.Decimal) *CheckoutProductCreate {
	cpc.mutation.SetSellingPrice(d)
	return cpc
}

// SetOfferPrice sets the "offer_price" field.
func (cpc *CheckoutProductCreate) SetOfferPrice(i int) *CheckoutProductCreate {
	cpc.mutation.SetOfferPrice(i)
	return cpc
}

// SetReceived sets the "received" field.
func (cpc *CheckoutProductCreate) SetReceived(b bool) *CheckoutProductCreate {
	cpc.mutation.SetReceived(b)
	return cpc
}

// SetNillableReceived sets the "received" field if the given value is not nil.
func (cpc *CheckoutProductCreate) SetNillableReceived(b *bool) *CheckoutProductCreate {
	if b != nil {
		cpc.SetReceived(*b)
	}
	return cpc
}

// SetStatus sets the "status" field.
func (cpc *CheckoutProductCreate) SetStatus(i int) *CheckoutProductCreate {
	cpc.mutation.SetStatus(i)
	return cpc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cpc *CheckoutProductCreate) SetNillableStatus(i *int) *CheckoutProductCreate {
	if i != nil {
		cpc.SetStatus(*i)
	}
	return cpc
}

// SetCreatedAt sets the "created_at" field.
func (cpc *CheckoutProductCreate) SetCreatedAt(t time.Time) *CheckoutProductCreate {
	cpc.mutation.SetCreatedAt(t)
	return cpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cpc *CheckoutProductCreate) SetNillableCreatedAt(t *time.Time) *CheckoutProductCreate {
	if t != nil {
		cpc.SetCreatedAt(*t)
	}
	return cpc
}

// SetUpdatedAt sets the "updated_at" field.
func (cpc *CheckoutProductCreate) SetUpdatedAt(t time.Time) *CheckoutProductCreate {
	cpc.mutation.SetUpdatedAt(t)
	return cpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cpc *CheckoutProductCreate) SetNillableUpdatedAt(t *time.Time) *CheckoutProductCreate {
	if t != nil {
		cpc.SetUpdatedAt(*t)
	}
	return cpc
}

// SetDeletedAt sets the "deleted_at" field.
func (cpc *CheckoutProductCreate) SetDeletedAt(t time.Time) *CheckoutProductCreate {
	cpc.mutation.SetDeletedAt(t)
	return cpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cpc *CheckoutProductCreate) SetNillableDeletedAt(t *time.Time) *CheckoutProductCreate {
	if t != nil {
		cpc.SetDeletedAt(*t)
	}
	return cpc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cpc *CheckoutProductCreate) SetUserID(id int) *CheckoutProductCreate {
	cpc.mutation.SetUserID(id)
	return cpc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cpc *CheckoutProductCreate) SetNillableUserID(id *int) *CheckoutProductCreate {
	if id != nil {
		cpc = cpc.SetUserID(*id)
	}
	return cpc
}

// SetUser sets the "user" edge to the User entity.
func (cpc *CheckoutProductCreate) SetUser(u *User) *CheckoutProductCreate {
	return cpc.SetUserID(u.ID)
}

// SetCheckoutID sets the "checkout" edge to the Checkout entity by ID.
func (cpc *CheckoutProductCreate) SetCheckoutID(id int) *CheckoutProductCreate {
	cpc.mutation.SetCheckoutID(id)
	return cpc
}

// SetNillableCheckoutID sets the "checkout" edge to the Checkout entity by ID if the given value is not nil.
func (cpc *CheckoutProductCreate) SetNillableCheckoutID(id *int) *CheckoutProductCreate {
	if id != nil {
		cpc = cpc.SetCheckoutID(*id)
	}
	return cpc
}

// SetCheckout sets the "checkout" edge to the Checkout entity.
func (cpc *CheckoutProductCreate) SetCheckout(c *Checkout) *CheckoutProductCreate {
	return cpc.SetCheckoutID(c.ID)
}

// SetSellerID sets the "seller" edge to the User entity by ID.
func (cpc *CheckoutProductCreate) SetSellerID(id int) *CheckoutProductCreate {
	cpc.mutation.SetSellerID(id)
	return cpc
}

// SetNillableSellerID sets the "seller" edge to the User entity by ID if the given value is not nil.
func (cpc *CheckoutProductCreate) SetNillableSellerID(id *int) *CheckoutProductCreate {
	if id != nil {
		cpc = cpc.SetSellerID(*id)
	}
	return cpc
}

// SetSeller sets the "seller" edge to the User entity.
func (cpc *CheckoutProductCreate) SetSeller(u *User) *CheckoutProductCreate {
	return cpc.SetSellerID(u.ID)
}

// SetSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID.
func (cpc *CheckoutProductCreate) SetSellerProductID(id int) *CheckoutProductCreate {
	cpc.mutation.SetSellerProductID(id)
	return cpc
}

// SetNillableSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID if the given value is not nil.
func (cpc *CheckoutProductCreate) SetNillableSellerProductID(id *int) *CheckoutProductCreate {
	if id != nil {
		cpc = cpc.SetSellerProductID(*id)
	}
	return cpc
}

// SetSellerProduct sets the "seller_product" edge to the SellerProduct entity.
func (cpc *CheckoutProductCreate) SetSellerProduct(s *SellerProduct) *CheckoutProductCreate {
	return cpc.SetSellerProductID(s.ID)
}

// SetSellerProductVariationID sets the "seller_product_variation" edge to the SellerProductVariation entity by ID.
func (cpc *CheckoutProductCreate) SetSellerProductVariationID(id int) *CheckoutProductCreate {
	cpc.mutation.SetSellerProductVariationID(id)
	return cpc
}

// SetNillableSellerProductVariationID sets the "seller_product_variation" edge to the SellerProductVariation entity by ID if the given value is not nil.
func (cpc *CheckoutProductCreate) SetNillableSellerProductVariationID(id *int) *CheckoutProductCreate {
	if id != nil {
		cpc = cpc.SetSellerProductVariationID(*id)
	}
	return cpc
}

// SetSellerProductVariation sets the "seller_product_variation" edge to the SellerProductVariation entity.
func (cpc *CheckoutProductCreate) SetSellerProductVariation(s *SellerProductVariation) *CheckoutProductCreate {
	return cpc.SetSellerProductVariationID(s.ID)
}

// Mutation returns the CheckoutProductMutation object of the builder.
func (cpc *CheckoutProductCreate) Mutation() *CheckoutProductMutation {
	return cpc.mutation
}

// Save creates the CheckoutProduct in the database.
func (cpc *CheckoutProductCreate) Save(ctx context.Context) (*CheckoutProduct, error) {
	var (
		err  error
		node *CheckoutProduct
	)
	cpc.defaults()
	if len(cpc.hooks) == 0 {
		if err = cpc.check(); err != nil {
			return nil, err
		}
		node, err = cpc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckoutProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cpc.check(); err != nil {
				return nil, err
			}
			cpc.mutation = mutation
			if node, err = cpc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cpc.hooks) - 1; i >= 0; i-- {
			if cpc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *CheckoutProductCreate) SaveX(ctx context.Context) *CheckoutProduct {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *CheckoutProductCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *CheckoutProductCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *CheckoutProductCreate) defaults() {
	if _, ok := cpc.mutation.Received(); !ok {
		v := checkoutproduct.DefaultReceived
		cpc.mutation.SetReceived(v)
	}
	if _, ok := cpc.mutation.Status(); !ok {
		v := checkoutproduct.DefaultStatus
		cpc.mutation.SetStatus(v)
	}
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		v := checkoutproduct.DefaultCreatedAt()
		cpc.mutation.SetCreatedAt(v)
	}
	if _, ok := cpc.mutation.UpdatedAt(); !ok {
		v := checkoutproduct.DefaultUpdatedAt()
		cpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *CheckoutProductCreate) check() error {
	if _, ok := cpc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "quantity"`)}
	}
	if _, ok := cpc.mutation.SellingPrice(); !ok {
		return &ValidationError{Name: "selling_price", err: errors.New(`ent: missing required field "selling_price"`)}
	}
	if _, ok := cpc.mutation.OfferPrice(); !ok {
		return &ValidationError{Name: "offer_price", err: errors.New(`ent: missing required field "offer_price"`)}
	}
	if _, ok := cpc.mutation.Received(); !ok {
		return &ValidationError{Name: "received", err: errors.New(`ent: missing required field "received"`)}
	}
	if _, ok := cpc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "status"`)}
	}
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := cpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (cpc *CheckoutProductCreate) sqlSave(ctx context.Context) (*CheckoutProduct, error) {
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cpc *CheckoutProductCreate) createSpec() (*CheckoutProduct, *sqlgraph.CreateSpec) {
	var (
		_node = &CheckoutProduct{config: cpc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: checkoutproduct.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkoutproduct.FieldID,
			},
		}
	)
	if value, ok := cpc.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: checkoutproduct.FieldQuantity,
		})
		_node.Quantity = value
	}
	if value, ok := cpc.mutation.SellingPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: checkoutproduct.FieldSellingPrice,
		})
		_node.SellingPrice = value
	}
	if value, ok := cpc.mutation.OfferPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: checkoutproduct.FieldOfferPrice,
		})
		_node.OfferPrice = value
	}
	if value, ok := cpc.mutation.Received(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: checkoutproduct.FieldReceived,
		})
		_node.Received = value
	}
	if value, ok := cpc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: checkoutproduct.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := cpc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkoutproduct.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cpc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkoutproduct.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cpc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkoutproduct.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := cpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutproduct.UserTable,
			Columns: []string{checkoutproduct.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_checkout_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.CheckoutIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutproduct.CheckoutTable,
			Columns: []string{checkoutproduct.CheckoutColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.checkout_checkout_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.SellerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutproduct.SellerTable,
			Columns: []string{checkoutproduct.SellerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_seller_checkout_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.SellerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutproduct.SellerProductTable,
			Columns: []string{checkoutproduct.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.seller_product_checkout_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.SellerProductVariationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkoutproduct.SellerProductVariationTable,
			Columns: []string{checkoutproduct.SellerProductVariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.seller_product_variation_checkout_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CheckoutProductCreateBulk is the builder for creating many CheckoutProduct entities in bulk.
type CheckoutProductCreateBulk struct {
	config
	builders []*CheckoutProductCreate
}

// Save creates the CheckoutProduct entities in the database.
func (cpcb *CheckoutProductCreateBulk) Save(ctx context.Context) ([]*CheckoutProduct, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*CheckoutProduct, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CheckoutProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *CheckoutProductCreateBulk) SaveX(ctx context.Context) []*CheckoutProduct {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *CheckoutProductCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *CheckoutProductCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
