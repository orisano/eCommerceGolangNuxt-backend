// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/sellerproduct"
	"bongo/ent/sellershop"
	"bongo/ent/sellershopproduct"
	"bongo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerShopCreate is the builder for creating a SellerShop entity.
type SellerShopCreate struct {
	config
	mutation *SellerShopMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ssc *SellerShopCreate) SetName(s string) *SellerShopCreate {
	ssc.mutation.SetName(s)
	return ssc
}

// SetSlug sets the "slug" field.
func (ssc *SellerShopCreate) SetSlug(s string) *SellerShopCreate {
	ssc.mutation.SetSlug(s)
	return ssc
}

// SetContactNumber sets the "contact_number" field.
func (ssc *SellerShopCreate) SetContactNumber(s string) *SellerShopCreate {
	ssc.mutation.SetContactNumber(s)
	return ssc
}

// SetBanner sets the "banner" field.
func (ssc *SellerShopCreate) SetBanner(s string) *SellerShopCreate {
	ssc.mutation.SetBanner(s)
	return ssc
}

// SetShopCategoryID sets the "shop_category_id" field.
func (ssc *SellerShopCreate) SetShopCategoryID(s string) *SellerShopCreate {
	ssc.mutation.SetShopCategoryID(s)
	return ssc
}

// SetShopCategory sets the "shop_category" field.
func (ssc *SellerShopCreate) SetShopCategory(s string) *SellerShopCreate {
	ssc.mutation.SetShopCategory(s)
	return ssc
}

// SetBusinessLocation sets the "business_location" field.
func (ssc *SellerShopCreate) SetBusinessLocation(s string) *SellerShopCreate {
	ssc.mutation.SetBusinessLocation(s)
	return ssc
}

// SetTaxID sets the "tax_id" field.
func (ssc *SellerShopCreate) SetTaxID(s string) *SellerShopCreate {
	ssc.mutation.SetTaxID(s)
	return ssc
}

// SetActive sets the "active" field.
func (ssc *SellerShopCreate) SetActive(b bool) *SellerShopCreate {
	ssc.mutation.SetActive(b)
	return ssc
}

// SetCreatedAt sets the "created_at" field.
func (ssc *SellerShopCreate) SetCreatedAt(t time.Time) *SellerShopCreate {
	ssc.mutation.SetCreatedAt(t)
	return ssc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ssc *SellerShopCreate) SetNillableCreatedAt(t *time.Time) *SellerShopCreate {
	if t != nil {
		ssc.SetCreatedAt(*t)
	}
	return ssc
}

// SetUpdatedAt sets the "updated_at" field.
func (ssc *SellerShopCreate) SetUpdatedAt(t time.Time) *SellerShopCreate {
	ssc.mutation.SetUpdatedAt(t)
	return ssc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ssc *SellerShopCreate) SetNillableUpdatedAt(t *time.Time) *SellerShopCreate {
	if t != nil {
		ssc.SetUpdatedAt(*t)
	}
	return ssc
}

// SetDeletedAt sets the "deleted_at" field.
func (ssc *SellerShopCreate) SetDeletedAt(t time.Time) *SellerShopCreate {
	ssc.mutation.SetDeletedAt(t)
	return ssc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ssc *SellerShopCreate) SetNillableDeletedAt(t *time.Time) *SellerShopCreate {
	if t != nil {
		ssc.SetDeletedAt(*t)
	}
	return ssc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ssc *SellerShopCreate) SetUserID(id int) *SellerShopCreate {
	ssc.mutation.SetUserID(id)
	return ssc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ssc *SellerShopCreate) SetNillableUserID(id *int) *SellerShopCreate {
	if id != nil {
		ssc = ssc.SetUserID(*id)
	}
	return ssc
}

// SetUser sets the "user" edge to the User entity.
func (ssc *SellerShopCreate) SetUser(u *User) *SellerShopCreate {
	return ssc.SetUserID(u.ID)
}

// SetAdminID sets the "admin" edge to the User entity by ID.
func (ssc *SellerShopCreate) SetAdminID(id int) *SellerShopCreate {
	ssc.mutation.SetAdminID(id)
	return ssc
}

// SetNillableAdminID sets the "admin" edge to the User entity by ID if the given value is not nil.
func (ssc *SellerShopCreate) SetNillableAdminID(id *int) *SellerShopCreate {
	if id != nil {
		ssc = ssc.SetAdminID(*id)
	}
	return ssc
}

// SetAdmin sets the "admin" edge to the User entity.
func (ssc *SellerShopCreate) SetAdmin(u *User) *SellerShopCreate {
	return ssc.SetAdminID(u.ID)
}

// AddSellerProductIDs adds the "seller_products" edge to the SellerProduct entity by IDs.
func (ssc *SellerShopCreate) AddSellerProductIDs(ids ...int) *SellerShopCreate {
	ssc.mutation.AddSellerProductIDs(ids...)
	return ssc
}

// AddSellerProducts adds the "seller_products" edges to the SellerProduct entity.
func (ssc *SellerShopCreate) AddSellerProducts(s ...*SellerProduct) *SellerShopCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssc.AddSellerProductIDs(ids...)
}

// AddSellerShopProductIDs adds the "seller_shop_products" edge to the SellerShopProduct entity by IDs.
func (ssc *SellerShopCreate) AddSellerShopProductIDs(ids ...int) *SellerShopCreate {
	ssc.mutation.AddSellerShopProductIDs(ids...)
	return ssc
}

// AddSellerShopProducts adds the "seller_shop_products" edges to the SellerShopProduct entity.
func (ssc *SellerShopCreate) AddSellerShopProducts(s ...*SellerShopProduct) *SellerShopCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssc.AddSellerShopProductIDs(ids...)
}

// Mutation returns the SellerShopMutation object of the builder.
func (ssc *SellerShopCreate) Mutation() *SellerShopMutation {
	return ssc.mutation
}

// Save creates the SellerShop in the database.
func (ssc *SellerShopCreate) Save(ctx context.Context) (*SellerShop, error) {
	var (
		err  error
		node *SellerShop
	)
	ssc.defaults()
	if len(ssc.hooks) == 0 {
		if err = ssc.check(); err != nil {
			return nil, err
		}
		node, err = ssc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerShopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ssc.check(); err != nil {
				return nil, err
			}
			ssc.mutation = mutation
			if node, err = ssc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ssc.hooks) - 1; i >= 0; i-- {
			if ssc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SellerShopCreate) SaveX(ctx context.Context) *SellerShop {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SellerShopCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SellerShopCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssc *SellerShopCreate) defaults() {
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		v := sellershop.DefaultCreatedAt()
		ssc.mutation.SetCreatedAt(v)
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		v := sellershop.DefaultUpdatedAt()
		ssc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SellerShopCreate) check() error {
	if _, ok := ssc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if _, ok := ssc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "slug"`)}
	}
	if _, ok := ssc.mutation.ContactNumber(); !ok {
		return &ValidationError{Name: "contact_number", err: errors.New(`ent: missing required field "contact_number"`)}
	}
	if v, ok := ssc.mutation.ContactNumber(); ok {
		if err := sellershop.ContactNumberValidator(v); err != nil {
			return &ValidationError{Name: "contact_number", err: fmt.Errorf(`ent: validator failed for field "contact_number": %w`, err)}
		}
	}
	if _, ok := ssc.mutation.Banner(); !ok {
		return &ValidationError{Name: "banner", err: errors.New(`ent: missing required field "banner"`)}
	}
	if _, ok := ssc.mutation.ShopCategoryID(); !ok {
		return &ValidationError{Name: "shop_category_id", err: errors.New(`ent: missing required field "shop_category_id"`)}
	}
	if _, ok := ssc.mutation.ShopCategory(); !ok {
		return &ValidationError{Name: "shop_category", err: errors.New(`ent: missing required field "shop_category"`)}
	}
	if _, ok := ssc.mutation.BusinessLocation(); !ok {
		return &ValidationError{Name: "business_location", err: errors.New(`ent: missing required field "business_location"`)}
	}
	if _, ok := ssc.mutation.TaxID(); !ok {
		return &ValidationError{Name: "tax_id", err: errors.New(`ent: missing required field "tax_id"`)}
	}
	if _, ok := ssc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "active"`)}
	}
	if _, ok := ssc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	if _, ok := ssc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "updated_at"`)}
	}
	return nil
}

func (ssc *SellerShopCreate) sqlSave(ctx context.Context) (*SellerShop, error) {
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ssc *SellerShopCreate) createSpec() (*SellerShop, *sqlgraph.CreateSpec) {
	var (
		_node = &SellerShop{config: ssc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sellershop.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellershop.FieldID,
			},
		}
	)
	if value, ok := ssc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ssc.mutation.Slug(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldSlug,
		})
		_node.Slug = value
	}
	if value, ok := ssc.mutation.ContactNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldContactNumber,
		})
		_node.ContactNumber = value
	}
	if value, ok := ssc.mutation.Banner(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldBanner,
		})
		_node.Banner = value
	}
	if value, ok := ssc.mutation.ShopCategoryID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldShopCategoryID,
		})
		_node.ShopCategoryID = value
	}
	if value, ok := ssc.mutation.ShopCategory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldShopCategory,
		})
		_node.ShopCategory = value
	}
	if value, ok := ssc.mutation.BusinessLocation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldBusinessLocation,
		})
		_node.BusinessLocation = value
	}
	if value, ok := ssc.mutation.TaxID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldTaxID,
		})
		_node.TaxID = value
	}
	if value, ok := ssc.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sellershop.FieldActive,
		})
		_node.Active = value
	}
	if value, ok := ssc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershop.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ssc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershop.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ssc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershop.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := ssc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershop.UserTable,
			Columns: []string{sellershop.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_seller_shops = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershop.AdminTable,
			Columns: []string{sellershop.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_approved_shops = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.SellerProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerProductsTable,
			Columns: []string{sellershop.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ssc.mutation.SellerShopProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerShopProductsTable,
			Columns: []string{sellershop.SellerShopProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershopproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SellerShopCreateBulk is the builder for creating many SellerShop entities in bulk.
type SellerShopCreateBulk struct {
	config
	builders []*SellerShopCreate
}

// Save creates the SellerShop entities in the database.
func (sscb *SellerShopCreateBulk) Save(ctx context.Context) ([]*SellerShop, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SellerShop, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SellerShopMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SellerShopCreateBulk) SaveX(ctx context.Context) []*SellerShop {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SellerShopCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SellerShopCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}
