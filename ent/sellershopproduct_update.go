// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/predicate"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellershop"
	"bongo/ent/sellershopproduct"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerShopProductUpdate is the builder for updating SellerShopProduct entities.
type SellerShopProductUpdate struct {
	config
	hooks    []Hook
	mutation *SellerShopProductMutation
}

// Where appends a list predicates to the SellerShopProductUpdate builder.
func (sspu *SellerShopProductUpdate) Where(ps ...predicate.SellerShopProduct) *SellerShopProductUpdate {
	sspu.mutation.Where(ps...)
	return sspu
}

// SetUpdatedAt sets the "updated_at" field.
func (sspu *SellerShopProductUpdate) SetUpdatedAt(t time.Time) *SellerShopProductUpdate {
	sspu.mutation.SetUpdatedAt(t)
	return sspu
}

// SetDeletedAt sets the "deleted_at" field.
func (sspu *SellerShopProductUpdate) SetDeletedAt(t time.Time) *SellerShopProductUpdate {
	sspu.mutation.SetDeletedAt(t)
	return sspu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sspu *SellerShopProductUpdate) SetNillableDeletedAt(t *time.Time) *SellerShopProductUpdate {
	if t != nil {
		sspu.SetDeletedAt(*t)
	}
	return sspu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sspu *SellerShopProductUpdate) ClearDeletedAt() *SellerShopProductUpdate {
	sspu.mutation.ClearDeletedAt()
	return sspu
}

// SetSellerShopID sets the "seller_shop" edge to the SellerShop entity by ID.
func (sspu *SellerShopProductUpdate) SetSellerShopID(id int) *SellerShopProductUpdate {
	sspu.mutation.SetSellerShopID(id)
	return sspu
}

// SetNillableSellerShopID sets the "seller_shop" edge to the SellerShop entity by ID if the given value is not nil.
func (sspu *SellerShopProductUpdate) SetNillableSellerShopID(id *int) *SellerShopProductUpdate {
	if id != nil {
		sspu = sspu.SetSellerShopID(*id)
	}
	return sspu
}

// SetSellerShop sets the "seller_shop" edge to the SellerShop entity.
func (sspu *SellerShopProductUpdate) SetSellerShop(s *SellerShop) *SellerShopProductUpdate {
	return sspu.SetSellerShopID(s.ID)
}

// SetSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID.
func (sspu *SellerShopProductUpdate) SetSellerProductID(id int) *SellerShopProductUpdate {
	sspu.mutation.SetSellerProductID(id)
	return sspu
}

// SetNillableSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID if the given value is not nil.
func (sspu *SellerShopProductUpdate) SetNillableSellerProductID(id *int) *SellerShopProductUpdate {
	if id != nil {
		sspu = sspu.SetSellerProductID(*id)
	}
	return sspu
}

// SetSellerProduct sets the "seller_product" edge to the SellerProduct entity.
func (sspu *SellerShopProductUpdate) SetSellerProduct(s *SellerProduct) *SellerShopProductUpdate {
	return sspu.SetSellerProductID(s.ID)
}

// Mutation returns the SellerShopProductMutation object of the builder.
func (sspu *SellerShopProductUpdate) Mutation() *SellerShopProductMutation {
	return sspu.mutation
}

// ClearSellerShop clears the "seller_shop" edge to the SellerShop entity.
func (sspu *SellerShopProductUpdate) ClearSellerShop() *SellerShopProductUpdate {
	sspu.mutation.ClearSellerShop()
	return sspu
}

// ClearSellerProduct clears the "seller_product" edge to the SellerProduct entity.
func (sspu *SellerShopProductUpdate) ClearSellerProduct() *SellerShopProductUpdate {
	sspu.mutation.ClearSellerProduct()
	return sspu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sspu *SellerShopProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	sspu.defaults()
	if len(sspu.hooks) == 0 {
		affected, err = sspu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerShopProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sspu.mutation = mutation
			affected, err = sspu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sspu.hooks) - 1; i >= 0; i-- {
			if sspu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sspu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sspu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sspu *SellerShopProductUpdate) SaveX(ctx context.Context) int {
	affected, err := sspu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sspu *SellerShopProductUpdate) Exec(ctx context.Context) error {
	_, err := sspu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sspu *SellerShopProductUpdate) ExecX(ctx context.Context) {
	if err := sspu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sspu *SellerShopProductUpdate) defaults() {
	if _, ok := sspu.mutation.UpdatedAt(); !ok {
		v := sellershopproduct.UpdateDefaultUpdatedAt()
		sspu.mutation.SetUpdatedAt(v)
	}
}

func (sspu *SellerShopProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellershopproduct.Table,
			Columns: sellershopproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellershopproduct.FieldID,
			},
		},
	}
	if ps := sspu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sspu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershopproduct.FieldUpdatedAt,
		})
	}
	if value, ok := sspu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershopproduct.FieldDeletedAt,
		})
	}
	if sspu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellershopproduct.FieldDeletedAt,
		})
	}
	if sspu.mutation.SellerShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershopproduct.SellerShopTable,
			Columns: []string{sellershopproduct.SellerShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sspu.mutation.SellerShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershopproduct.SellerShopTable,
			Columns: []string{sellershopproduct.SellerShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sspu.mutation.SellerProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershopproduct.SellerProductTable,
			Columns: []string{sellershopproduct.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sspu.mutation.SellerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershopproduct.SellerProductTable,
			Columns: []string{sellershopproduct.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sspu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellershopproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SellerShopProductUpdateOne is the builder for updating a single SellerShopProduct entity.
type SellerShopProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SellerShopProductMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (sspuo *SellerShopProductUpdateOne) SetUpdatedAt(t time.Time) *SellerShopProductUpdateOne {
	sspuo.mutation.SetUpdatedAt(t)
	return sspuo
}

// SetDeletedAt sets the "deleted_at" field.
func (sspuo *SellerShopProductUpdateOne) SetDeletedAt(t time.Time) *SellerShopProductUpdateOne {
	sspuo.mutation.SetDeletedAt(t)
	return sspuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sspuo *SellerShopProductUpdateOne) SetNillableDeletedAt(t *time.Time) *SellerShopProductUpdateOne {
	if t != nil {
		sspuo.SetDeletedAt(*t)
	}
	return sspuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sspuo *SellerShopProductUpdateOne) ClearDeletedAt() *SellerShopProductUpdateOne {
	sspuo.mutation.ClearDeletedAt()
	return sspuo
}

// SetSellerShopID sets the "seller_shop" edge to the SellerShop entity by ID.
func (sspuo *SellerShopProductUpdateOne) SetSellerShopID(id int) *SellerShopProductUpdateOne {
	sspuo.mutation.SetSellerShopID(id)
	return sspuo
}

// SetNillableSellerShopID sets the "seller_shop" edge to the SellerShop entity by ID if the given value is not nil.
func (sspuo *SellerShopProductUpdateOne) SetNillableSellerShopID(id *int) *SellerShopProductUpdateOne {
	if id != nil {
		sspuo = sspuo.SetSellerShopID(*id)
	}
	return sspuo
}

// SetSellerShop sets the "seller_shop" edge to the SellerShop entity.
func (sspuo *SellerShopProductUpdateOne) SetSellerShop(s *SellerShop) *SellerShopProductUpdateOne {
	return sspuo.SetSellerShopID(s.ID)
}

// SetSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID.
func (sspuo *SellerShopProductUpdateOne) SetSellerProductID(id int) *SellerShopProductUpdateOne {
	sspuo.mutation.SetSellerProductID(id)
	return sspuo
}

// SetNillableSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID if the given value is not nil.
func (sspuo *SellerShopProductUpdateOne) SetNillableSellerProductID(id *int) *SellerShopProductUpdateOne {
	if id != nil {
		sspuo = sspuo.SetSellerProductID(*id)
	}
	return sspuo
}

// SetSellerProduct sets the "seller_product" edge to the SellerProduct entity.
func (sspuo *SellerShopProductUpdateOne) SetSellerProduct(s *SellerProduct) *SellerShopProductUpdateOne {
	return sspuo.SetSellerProductID(s.ID)
}

// Mutation returns the SellerShopProductMutation object of the builder.
func (sspuo *SellerShopProductUpdateOne) Mutation() *SellerShopProductMutation {
	return sspuo.mutation
}

// ClearSellerShop clears the "seller_shop" edge to the SellerShop entity.
func (sspuo *SellerShopProductUpdateOne) ClearSellerShop() *SellerShopProductUpdateOne {
	sspuo.mutation.ClearSellerShop()
	return sspuo
}

// ClearSellerProduct clears the "seller_product" edge to the SellerProduct entity.
func (sspuo *SellerShopProductUpdateOne) ClearSellerProduct() *SellerShopProductUpdateOne {
	sspuo.mutation.ClearSellerProduct()
	return sspuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sspuo *SellerShopProductUpdateOne) Select(field string, fields ...string) *SellerShopProductUpdateOne {
	sspuo.fields = append([]string{field}, fields...)
	return sspuo
}

// Save executes the query and returns the updated SellerShopProduct entity.
func (sspuo *SellerShopProductUpdateOne) Save(ctx context.Context) (*SellerShopProduct, error) {
	var (
		err  error
		node *SellerShopProduct
	)
	sspuo.defaults()
	if len(sspuo.hooks) == 0 {
		node, err = sspuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerShopProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sspuo.mutation = mutation
			node, err = sspuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sspuo.hooks) - 1; i >= 0; i-- {
			if sspuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sspuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sspuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sspuo *SellerShopProductUpdateOne) SaveX(ctx context.Context) *SellerShopProduct {
	node, err := sspuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sspuo *SellerShopProductUpdateOne) Exec(ctx context.Context) error {
	_, err := sspuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sspuo *SellerShopProductUpdateOne) ExecX(ctx context.Context) {
	if err := sspuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sspuo *SellerShopProductUpdateOne) defaults() {
	if _, ok := sspuo.mutation.UpdatedAt(); !ok {
		v := sellershopproduct.UpdateDefaultUpdatedAt()
		sspuo.mutation.SetUpdatedAt(v)
	}
}

func (sspuo *SellerShopProductUpdateOne) sqlSave(ctx context.Context) (_node *SellerShopProduct, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellershopproduct.Table,
			Columns: sellershopproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellershopproduct.FieldID,
			},
		},
	}
	id, ok := sspuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SellerShopProduct.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := sspuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sellershopproduct.FieldID)
		for _, f := range fields {
			if !sellershopproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sellershopproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sspuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sspuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershopproduct.FieldUpdatedAt,
		})
	}
	if value, ok := sspuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershopproduct.FieldDeletedAt,
		})
	}
	if sspuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellershopproduct.FieldDeletedAt,
		})
	}
	if sspuo.mutation.SellerShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershopproduct.SellerShopTable,
			Columns: []string{sellershopproduct.SellerShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sspuo.mutation.SellerShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershopproduct.SellerShopTable,
			Columns: []string{sellershopproduct.SellerShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sspuo.mutation.SellerProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershopproduct.SellerProductTable,
			Columns: []string{sellershopproduct.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sspuo.mutation.SellerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershopproduct.SellerProductTable,
			Columns: []string{sellershopproduct.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SellerShopProduct{config: sspuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sspuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellershopproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
