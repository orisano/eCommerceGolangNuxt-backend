// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/sellerproduct"
	"bongo/ent/sellershop"
	"bongo/ent/sellershopproduct"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SellerShopProduct is the model entity for the SellerShopProduct schema.
type SellerShopProduct struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SellerShopProductQuery when eager-loading is set.
	Edges                               SellerShopProductEdges `json:"edges"`
	seller_product_seller_shop_products *int
	seller_shop_seller_shop_products    *int
}

// SellerShopProductEdges holds the relations/edges for other nodes in the graph.
type SellerShopProductEdges struct {
	// SellerShop holds the value of the seller_shop edge.
	SellerShop *SellerShop `json:"seller_shop,omitempty"`
	// SellerProduct holds the value of the seller_product edge.
	SellerProduct *SellerProduct `json:"seller_product,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SellerShopOrErr returns the SellerShop value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SellerShopProductEdges) SellerShopOrErr() (*SellerShop, error) {
	if e.loadedTypes[0] {
		if e.SellerShop == nil {
			// The edge seller_shop was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sellershop.Label}
		}
		return e.SellerShop, nil
	}
	return nil, &NotLoadedError{edge: "seller_shop"}
}

// SellerProductOrErr returns the SellerProduct value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SellerShopProductEdges) SellerProductOrErr() (*SellerProduct, error) {
	if e.loadedTypes[1] {
		if e.SellerProduct == nil {
			// The edge seller_product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sellerproduct.Label}
		}
		return e.SellerProduct, nil
	}
	return nil, &NotLoadedError{edge: "seller_product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SellerShopProduct) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sellershopproduct.FieldID:
			values[i] = new(sql.NullInt64)
		case sellershopproduct.FieldCreatedAt, sellershopproduct.FieldUpdatedAt, sellershopproduct.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case sellershopproduct.ForeignKeys[0]: // seller_product_seller_shop_products
			values[i] = new(sql.NullInt64)
		case sellershopproduct.ForeignKeys[1]: // seller_shop_seller_shop_products
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SellerShopProduct", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SellerShopProduct fields.
func (ssp *SellerShopProduct) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sellershopproduct.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ssp.ID = int(value.Int64)
		case sellershopproduct.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ssp.CreatedAt = value.Time
			}
		case sellershopproduct.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ssp.UpdatedAt = value.Time
			}
		case sellershopproduct.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ssp.DeletedAt = new(time.Time)
				*ssp.DeletedAt = value.Time
			}
		case sellershopproduct.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field seller_product_seller_shop_products", value)
			} else if value.Valid {
				ssp.seller_product_seller_shop_products = new(int)
				*ssp.seller_product_seller_shop_products = int(value.Int64)
			}
		case sellershopproduct.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field seller_shop_seller_shop_products", value)
			} else if value.Valid {
				ssp.seller_shop_seller_shop_products = new(int)
				*ssp.seller_shop_seller_shop_products = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySellerShop queries the "seller_shop" edge of the SellerShopProduct entity.
func (ssp *SellerShopProduct) QuerySellerShop() *SellerShopQuery {
	return (&SellerShopProductClient{config: ssp.config}).QuerySellerShop(ssp)
}

// QuerySellerProduct queries the "seller_product" edge of the SellerShopProduct entity.
func (ssp *SellerShopProduct) QuerySellerProduct() *SellerProductQuery {
	return (&SellerShopProductClient{config: ssp.config}).QuerySellerProduct(ssp)
}

// Update returns a builder for updating this SellerShopProduct.
// Note that you need to call SellerShopProduct.Unwrap() before calling this method if this SellerShopProduct
// was returned from a transaction, and the transaction was committed or rolled back.
func (ssp *SellerShopProduct) Update() *SellerShopProductUpdateOne {
	return (&SellerShopProductClient{config: ssp.config}).UpdateOne(ssp)
}

// Unwrap unwraps the SellerShopProduct entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ssp *SellerShopProduct) Unwrap() *SellerShopProduct {
	tx, ok := ssp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SellerShopProduct is not a transactional entity")
	}
	ssp.config.driver = tx.drv
	return ssp
}

// String implements the fmt.Stringer.
func (ssp *SellerShopProduct) String() string {
	var builder strings.Builder
	builder.WriteString("SellerShopProduct(")
	builder.WriteString(fmt.Sprintf("id=%v", ssp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(ssp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ssp.UpdatedAt.Format(time.ANSIC))
	if v := ssp.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SellerShopProducts is a parsable slice of SellerShopProduct.
type SellerShopProducts []*SellerShopProduct

func (ssp SellerShopProducts) config(cfg config) {
	for _i := range ssp {
		ssp[_i].config = cfg
	}
}
