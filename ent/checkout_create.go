// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/cart"
	"bongo/ent/checkout"
	"bongo/ent/checkoutproduct"
	"bongo/ent/user"
	"bongo/ent/userlocation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// CheckoutCreate is the builder for creating a Checkout entity.
type CheckoutCreate struct {
	config
	mutation *CheckoutMutation
	hooks    []Hook
}

// SetTotalPrice sets the "total_price" field.
func (cc *CheckoutCreate) SetTotalPrice(d decimal.Decimal) *CheckoutCreate {
	cc.mutation.SetTotalPrice(d)
	return cc
}

// SetCompleted sets the "completed" field.
func (cc *CheckoutCreate) SetCompleted(b bool) *CheckoutCreate {
	cc.mutation.SetCompleted(b)
	return cc
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (cc *CheckoutCreate) SetNillableCompleted(b *bool) *CheckoutCreate {
	if b != nil {
		cc.SetCompleted(*b)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *CheckoutCreate) SetCreatedAt(t time.Time) *CheckoutCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CheckoutCreate) SetNillableCreatedAt(t *time.Time) *CheckoutCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CheckoutCreate) SetUpdatedAt(t time.Time) *CheckoutCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CheckoutCreate) SetNillableUpdatedAt(t *time.Time) *CheckoutCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetDeletedAt sets the "deleted_at" field.
func (cc *CheckoutCreate) SetDeletedAt(t time.Time) *CheckoutCreate {
	cc.mutation.SetDeletedAt(t)
	return cc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cc *CheckoutCreate) SetNillableDeletedAt(t *time.Time) *CheckoutCreate {
	if t != nil {
		cc.SetDeletedAt(*t)
	}
	return cc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cc *CheckoutCreate) SetUserID(id int) *CheckoutCreate {
	cc.mutation.SetUserID(id)
	return cc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cc *CheckoutCreate) SetNillableUserID(id *int) *CheckoutCreate {
	if id != nil {
		cc = cc.SetUserID(*id)
	}
	return cc
}

// SetUser sets the "user" edge to the User entity.
func (cc *CheckoutCreate) SetUser(u *User) *CheckoutCreate {
	return cc.SetUserID(u.ID)
}

// SetLocationID sets the "location" edge to the UserLocation entity by ID.
func (cc *CheckoutCreate) SetLocationID(id int) *CheckoutCreate {
	cc.mutation.SetLocationID(id)
	return cc
}

// SetNillableLocationID sets the "location" edge to the UserLocation entity by ID if the given value is not nil.
func (cc *CheckoutCreate) SetNillableLocationID(id *int) *CheckoutCreate {
	if id != nil {
		cc = cc.SetLocationID(*id)
	}
	return cc
}

// SetLocation sets the "location" edge to the UserLocation entity.
func (cc *CheckoutCreate) SetLocation(u *UserLocation) *CheckoutCreate {
	return cc.SetLocationID(u.ID)
}

// SetCartID sets the "cart" edge to the Cart entity by ID.
func (cc *CheckoutCreate) SetCartID(id int) *CheckoutCreate {
	cc.mutation.SetCartID(id)
	return cc
}

// SetNillableCartID sets the "cart" edge to the Cart entity by ID if the given value is not nil.
func (cc *CheckoutCreate) SetNillableCartID(id *int) *CheckoutCreate {
	if id != nil {
		cc = cc.SetCartID(*id)
	}
	return cc
}

// SetCart sets the "cart" edge to the Cart entity.
func (cc *CheckoutCreate) SetCart(c *Cart) *CheckoutCreate {
	return cc.SetCartID(c.ID)
}

// AddCheckoutProductIDs adds the "checkout_products" edge to the CheckoutProduct entity by IDs.
func (cc *CheckoutCreate) AddCheckoutProductIDs(ids ...int) *CheckoutCreate {
	cc.mutation.AddCheckoutProductIDs(ids...)
	return cc
}

// AddCheckoutProducts adds the "checkout_products" edges to the CheckoutProduct entity.
func (cc *CheckoutCreate) AddCheckoutProducts(c ...*CheckoutProduct) *CheckoutCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddCheckoutProductIDs(ids...)
}

// Mutation returns the CheckoutMutation object of the builder.
func (cc *CheckoutCreate) Mutation() *CheckoutMutation {
	return cc.mutation
}

// Save creates the Checkout in the database.
func (cc *CheckoutCreate) Save(ctx context.Context) (*Checkout, error) {
	var (
		err  error
		node *Checkout
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CheckoutMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CheckoutCreate) SaveX(ctx context.Context) *Checkout {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CheckoutCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CheckoutCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CheckoutCreate) defaults() {
	if _, ok := cc.mutation.Completed(); !ok {
		v := checkout.DefaultCompleted
		cc.mutation.SetCompleted(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := checkout.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := checkout.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CheckoutCreate) check() error {
	if _, ok := cc.mutation.TotalPrice(); !ok {
		return &ValidationError{Name: "total_price", err: errors.New(`ent: missing required field "Checkout.total_price"`)}
	}
	if _, ok := cc.mutation.Completed(); !ok {
		return &ValidationError{Name: "completed", err: errors.New(`ent: missing required field "Checkout.completed"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Checkout.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Checkout.updated_at"`)}
	}
	return nil
}

func (cc *CheckoutCreate) sqlSave(ctx context.Context) (*Checkout, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CheckoutCreate) createSpec() (*Checkout, *sqlgraph.CreateSpec) {
	var (
		_node = &Checkout{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: checkout.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: checkout.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.TotalPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: checkout.FieldTotalPrice,
		})
		_node.TotalPrice = value
	}
	if value, ok := cc.mutation.Completed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: checkout.FieldCompleted,
		})
		_node.Completed = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkout.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkout.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: checkout.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := cc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.UserTable,
			Columns: []string{checkout.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_checkouts = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.LocationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   checkout.LocationTable,
			Columns: []string{checkout.LocationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userlocation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_location_user_locations = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   checkout.CartTable,
			Columns: []string{checkout.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.cart_checkout = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CheckoutProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   checkout.CheckoutProductsTable,
			Columns: []string{checkout.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CheckoutCreateBulk is the builder for creating many Checkout entities in bulk.
type CheckoutCreateBulk struct {
	config
	builders []*CheckoutCreate
}

// Save creates the Checkout entities in the database.
func (ccb *CheckoutCreateBulk) Save(ctx context.Context) ([]*Checkout, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Checkout, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CheckoutMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CheckoutCreateBulk) SaveX(ctx context.Context) []*Checkout {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CheckoutCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CheckoutCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
