// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/brand"
	"bongo/ent/cartproduct"
	"bongo/ent/category"
	"bongo/ent/checkoutproduct"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductimage"
	"bongo/ent/sellerproductvariation"
	"bongo/ent/sellershop"
	"bongo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// SellerProductCreate is the builder for creating a SellerProduct entity.
type SellerProductCreate struct {
	config
	mutation *SellerProductMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (spc *SellerProductCreate) SetName(s string) *SellerProductCreate {
	spc.mutation.SetName(s)
	return spc
}

// SetSlug sets the "slug" field.
func (spc *SellerProductCreate) SetSlug(s string) *SellerProductCreate {
	spc.mutation.SetSlug(s)
	return spc
}

// SetSellingPrice sets the "selling_price" field.
func (spc *SellerProductCreate) SetSellingPrice(d decimal.Decimal) *SellerProductCreate {
	spc.mutation.SetSellingPrice(d)
	return spc
}

// SetProductPrice sets the "product_price" field.
func (spc *SellerProductCreate) SetProductPrice(d decimal.Decimal) *SellerProductCreate {
	spc.mutation.SetProductPrice(d)
	return spc
}

// SetQuantity sets the "quantity" field.
func (spc *SellerProductCreate) SetQuantity(i int) *SellerProductCreate {
	spc.mutation.SetQuantity(i)
	return spc
}

// SetActive sets the "active" field.
func (spc *SellerProductCreate) SetActive(b bool) *SellerProductCreate {
	spc.mutation.SetActive(b)
	return spc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (spc *SellerProductCreate) SetNillableActive(b *bool) *SellerProductCreate {
	if b != nil {
		spc.SetActive(*b)
	}
	return spc
}

// SetDescription sets the "description" field.
func (spc *SellerProductCreate) SetDescription(s string) *SellerProductCreate {
	spc.mutation.SetDescription(s)
	return spc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (spc *SellerProductCreate) SetNillableDescription(s *string) *SellerProductCreate {
	if s != nil {
		spc.SetDescription(*s)
	}
	return spc
}

// SetOfferPrice sets the "offer_price" field.
func (spc *SellerProductCreate) SetOfferPrice(i int) *SellerProductCreate {
	spc.mutation.SetOfferPrice(i)
	return spc
}

// SetNillableOfferPrice sets the "offer_price" field if the given value is not nil.
func (spc *SellerProductCreate) SetNillableOfferPrice(i *int) *SellerProductCreate {
	if i != nil {
		spc.SetOfferPrice(*i)
	}
	return spc
}

// SetOfferPriceStart sets the "offer_price_start" field.
func (spc *SellerProductCreate) SetOfferPriceStart(t time.Time) *SellerProductCreate {
	spc.mutation.SetOfferPriceStart(t)
	return spc
}

// SetNillableOfferPriceStart sets the "offer_price_start" field if the given value is not nil.
func (spc *SellerProductCreate) SetNillableOfferPriceStart(t *time.Time) *SellerProductCreate {
	if t != nil {
		spc.SetOfferPriceStart(*t)
	}
	return spc
}

// SetOfferPriceEnd sets the "offer_price_end" field.
func (spc *SellerProductCreate) SetOfferPriceEnd(t time.Time) *SellerProductCreate {
	spc.mutation.SetOfferPriceEnd(t)
	return spc
}

// SetNillableOfferPriceEnd sets the "offer_price_end" field if the given value is not nil.
func (spc *SellerProductCreate) SetNillableOfferPriceEnd(t *time.Time) *SellerProductCreate {
	if t != nil {
		spc.SetOfferPriceEnd(*t)
	}
	return spc
}

// SetNextStock sets the "next_stock" field.
func (spc *SellerProductCreate) SetNextStock(t time.Time) *SellerProductCreate {
	spc.mutation.SetNextStock(t)
	return spc
}

// SetNillableNextStock sets the "next_stock" field if the given value is not nil.
func (spc *SellerProductCreate) SetNillableNextStock(t *time.Time) *SellerProductCreate {
	if t != nil {
		spc.SetNextStock(*t)
	}
	return spc
}

// SetCreatedAt sets the "created_at" field.
func (spc *SellerProductCreate) SetCreatedAt(t time.Time) *SellerProductCreate {
	spc.mutation.SetCreatedAt(t)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *SellerProductCreate) SetNillableCreatedAt(t *time.Time) *SellerProductCreate {
	if t != nil {
		spc.SetCreatedAt(*t)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *SellerProductCreate) SetUpdatedAt(t time.Time) *SellerProductCreate {
	spc.mutation.SetUpdatedAt(t)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *SellerProductCreate) SetNillableUpdatedAt(t *time.Time) *SellerProductCreate {
	if t != nil {
		spc.SetUpdatedAt(*t)
	}
	return spc
}

// SetDeletedAt sets the "deleted_at" field.
func (spc *SellerProductCreate) SetDeletedAt(t time.Time) *SellerProductCreate {
	spc.mutation.SetDeletedAt(t)
	return spc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spc *SellerProductCreate) SetNillableDeletedAt(t *time.Time) *SellerProductCreate {
	if t != nil {
		spc.SetDeletedAt(*t)
	}
	return spc
}

// SetBrandID sets the "brand" edge to the Brand entity by ID.
func (spc *SellerProductCreate) SetBrandID(id int) *SellerProductCreate {
	spc.mutation.SetBrandID(id)
	return spc
}

// SetNillableBrandID sets the "brand" edge to the Brand entity by ID if the given value is not nil.
func (spc *SellerProductCreate) SetNillableBrandID(id *int) *SellerProductCreate {
	if id != nil {
		spc = spc.SetBrandID(*id)
	}
	return spc
}

// SetBrand sets the "brand" edge to the Brand entity.
func (spc *SellerProductCreate) SetBrand(b *Brand) *SellerProductCreate {
	return spc.SetBrandID(b.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spc *SellerProductCreate) SetUserID(id int) *SellerProductCreate {
	spc.mutation.SetUserID(id)
	return spc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (spc *SellerProductCreate) SetNillableUserID(id *int) *SellerProductCreate {
	if id != nil {
		spc = spc.SetUserID(*id)
	}
	return spc
}

// SetUser sets the "user" edge to the User entity.
func (spc *SellerProductCreate) SetUser(u *User) *SellerProductCreate {
	return spc.SetUserID(u.ID)
}

// AddSellerProductImageIDs adds the "seller_product_images" edge to the SellerProductImage entity by IDs.
func (spc *SellerProductCreate) AddSellerProductImageIDs(ids ...int) *SellerProductCreate {
	spc.mutation.AddSellerProductImageIDs(ids...)
	return spc
}

// AddSellerProductImages adds the "seller_product_images" edges to the SellerProductImage entity.
func (spc *SellerProductCreate) AddSellerProductImages(s ...*SellerProductImage) *SellerProductCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spc.AddSellerProductImageIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (spc *SellerProductCreate) AddCategoryIDs(ids ...int) *SellerProductCreate {
	spc.mutation.AddCategoryIDs(ids...)
	return spc
}

// AddCategories adds the "categories" edges to the Category entity.
func (spc *SellerProductCreate) AddCategories(c ...*Category) *SellerProductCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spc.AddCategoryIDs(ids...)
}

// SetShopID sets the "shop" edge to the SellerShop entity by ID.
func (spc *SellerProductCreate) SetShopID(id int) *SellerProductCreate {
	spc.mutation.SetShopID(id)
	return spc
}

// SetNillableShopID sets the "shop" edge to the SellerShop entity by ID if the given value is not nil.
func (spc *SellerProductCreate) SetNillableShopID(id *int) *SellerProductCreate {
	if id != nil {
		spc = spc.SetShopID(*id)
	}
	return spc
}

// SetShop sets the "shop" edge to the SellerShop entity.
func (spc *SellerProductCreate) SetShop(s *SellerShop) *SellerProductCreate {
	return spc.SetShopID(s.ID)
}

// AddCartProductIDs adds the "cart_products" edge to the CartProduct entity by IDs.
func (spc *SellerProductCreate) AddCartProductIDs(ids ...int) *SellerProductCreate {
	spc.mutation.AddCartProductIDs(ids...)
	return spc
}

// AddCartProducts adds the "cart_products" edges to the CartProduct entity.
func (spc *SellerProductCreate) AddCartProducts(c ...*CartProduct) *SellerProductCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spc.AddCartProductIDs(ids...)
}

// AddCheckoutProductIDs adds the "checkout_products" edge to the CheckoutProduct entity by IDs.
func (spc *SellerProductCreate) AddCheckoutProductIDs(ids ...int) *SellerProductCreate {
	spc.mutation.AddCheckoutProductIDs(ids...)
	return spc
}

// AddCheckoutProducts adds the "checkout_products" edges to the CheckoutProduct entity.
func (spc *SellerProductCreate) AddCheckoutProducts(c ...*CheckoutProduct) *SellerProductCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spc.AddCheckoutProductIDs(ids...)
}

// AddSellerProductVariationIDs adds the "seller_product_variations" edge to the SellerProductVariation entity by IDs.
func (spc *SellerProductCreate) AddSellerProductVariationIDs(ids ...int) *SellerProductCreate {
	spc.mutation.AddSellerProductVariationIDs(ids...)
	return spc
}

// AddSellerProductVariations adds the "seller_product_variations" edges to the SellerProductVariation entity.
func (spc *SellerProductCreate) AddSellerProductVariations(s ...*SellerProductVariation) *SellerProductCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spc.AddSellerProductVariationIDs(ids...)
}

// Mutation returns the SellerProductMutation object of the builder.
func (spc *SellerProductCreate) Mutation() *SellerProductMutation {
	return spc.mutation
}

// Save creates the SellerProduct in the database.
func (spc *SellerProductCreate) Save(ctx context.Context) (*SellerProduct, error) {
	var (
		err  error
		node *SellerProduct
	)
	spc.defaults()
	if len(spc.hooks) == 0 {
		if err = spc.check(); err != nil {
			return nil, err
		}
		node, err = spc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spc.check(); err != nil {
				return nil, err
			}
			spc.mutation = mutation
			if node, err = spc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(spc.hooks) - 1; i >= 0; i-- {
			if spc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SellerProductCreate) SaveX(ctx context.Context) *SellerProduct {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SellerProductCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SellerProductCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *SellerProductCreate) defaults() {
	if _, ok := spc.mutation.Active(); !ok {
		v := sellerproduct.DefaultActive
		spc.mutation.SetActive(v)
	}
	if _, ok := spc.mutation.OfferPrice(); !ok {
		v := sellerproduct.DefaultOfferPrice
		spc.mutation.SetOfferPrice(v)
	}
	if _, ok := spc.mutation.CreatedAt(); !ok {
		v := sellerproduct.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		v := sellerproduct.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *SellerProductCreate) check() error {
	if _, ok := spc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SellerProduct.name"`)}
	}
	if _, ok := spc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "SellerProduct.slug"`)}
	}
	if _, ok := spc.mutation.SellingPrice(); !ok {
		return &ValidationError{Name: "selling_price", err: errors.New(`ent: missing required field "SellerProduct.selling_price"`)}
	}
	if _, ok := spc.mutation.ProductPrice(); !ok {
		return &ValidationError{Name: "product_price", err: errors.New(`ent: missing required field "SellerProduct.product_price"`)}
	}
	if _, ok := spc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "SellerProduct.quantity"`)}
	}
	if _, ok := spc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "SellerProduct.active"`)}
	}
	if _, ok := spc.mutation.OfferPrice(); !ok {
		return &ValidationError{Name: "offer_price", err: errors.New(`ent: missing required field "SellerProduct.offer_price"`)}
	}
	if _, ok := spc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SellerProduct.created_at"`)}
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SellerProduct.updated_at"`)}
	}
	return nil
}

func (spc *SellerProductCreate) sqlSave(ctx context.Context) (*SellerProduct, error) {
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (spc *SellerProductCreate) createSpec() (*SellerProduct, *sqlgraph.CreateSpec) {
	var (
		_node = &SellerProduct{config: spc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sellerproduct.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproduct.FieldID,
			},
		}
	)
	if value, ok := spc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproduct.FieldName,
		})
		_node.Name = value
	}
	if value, ok := spc.mutation.Slug(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproduct.FieldSlug,
		})
		_node.Slug = value
	}
	if value, ok := spc.mutation.SellingPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproduct.FieldSellingPrice,
		})
		_node.SellingPrice = value
	}
	if value, ok := spc.mutation.ProductPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproduct.FieldProductPrice,
		})
		_node.ProductPrice = value
	}
	if value, ok := spc.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproduct.FieldQuantity,
		})
		_node.Quantity = value
	}
	if value, ok := spc.mutation.Active(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sellerproduct.FieldActive,
		})
		_node.Active = value
	}
	if value, ok := spc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproduct.FieldDescription,
		})
		_node.Description = &value
	}
	if value, ok := spc.mutation.OfferPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproduct.FieldOfferPrice,
		})
		_node.OfferPrice = value
	}
	if value, ok := spc.mutation.OfferPriceStart(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldOfferPriceStart,
		})
		_node.OfferPriceStart = &value
	}
	if value, ok := spc.mutation.OfferPriceEnd(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldOfferPriceEnd,
		})
		_node.OfferPriceEnd = &value
	}
	if value, ok := spc.mutation.NextStock(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldNextStock,
		})
		_node.NextStock = &value
	}
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := spc.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := spc.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.BrandTable,
			Columns: []string{sellerproduct.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: brand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.brand_brand = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.UserTable,
			Columns: []string{sellerproduct.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_seller_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.SellerProductImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductImagesTable,
			Columns: []string{sellerproduct.SellerProductImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sellerproduct.CategoriesTable,
			Columns: sellerproduct.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.ShopTable,
			Columns: []string{sellerproduct.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.seller_shop_seller_products = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.CartProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CartProductsTable,
			Columns: []string{sellerproduct.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.CheckoutProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CheckoutProductsTable,
			Columns: []string{sellerproduct.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.SellerProductVariationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductVariationsTable,
			Columns: []string{sellerproduct.SellerProductVariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SellerProductCreateBulk is the builder for creating many SellerProduct entities in bulk.
type SellerProductCreateBulk struct {
	config
	builders []*SellerProductCreate
}

// Save creates the SellerProduct entities in the database.
func (spcb *SellerProductCreateBulk) Save(ctx context.Context) ([]*SellerProduct, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SellerProduct, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SellerProductMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SellerProductCreateBulk) SaveX(ctx context.Context) []*SellerProduct {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SellerProductCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SellerProductCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
