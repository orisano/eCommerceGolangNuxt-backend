// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/predicate"
	"bongo/ent/sellerproductcategory"
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerProductCategoryQuery is the builder for querying SellerProductCategory entities.
type SellerProductCategoryQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.SellerProductCategory
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SellerProductCategoryQuery builder.
func (spcq *SellerProductCategoryQuery) Where(ps ...predicate.SellerProductCategory) *SellerProductCategoryQuery {
	spcq.predicates = append(spcq.predicates, ps...)
	return spcq
}

// Limit adds a limit step to the query.
func (spcq *SellerProductCategoryQuery) Limit(limit int) *SellerProductCategoryQuery {
	spcq.limit = &limit
	return spcq
}

// Offset adds an offset step to the query.
func (spcq *SellerProductCategoryQuery) Offset(offset int) *SellerProductCategoryQuery {
	spcq.offset = &offset
	return spcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (spcq *SellerProductCategoryQuery) Unique(unique bool) *SellerProductCategoryQuery {
	spcq.unique = &unique
	return spcq
}

// Order adds an order step to the query.
func (spcq *SellerProductCategoryQuery) Order(o ...OrderFunc) *SellerProductCategoryQuery {
	spcq.order = append(spcq.order, o...)
	return spcq
}

// First returns the first SellerProductCategory entity from the query.
// Returns a *NotFoundError when no SellerProductCategory was found.
func (spcq *SellerProductCategoryQuery) First(ctx context.Context) (*SellerProductCategory, error) {
	nodes, err := spcq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{sellerproductcategory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (spcq *SellerProductCategoryQuery) FirstX(ctx context.Context) *SellerProductCategory {
	node, err := spcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SellerProductCategory ID from the query.
// Returns a *NotFoundError when no SellerProductCategory ID was found.
func (spcq *SellerProductCategoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = spcq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{sellerproductcategory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (spcq *SellerProductCategoryQuery) FirstIDX(ctx context.Context) int {
	id, err := spcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SellerProductCategory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one SellerProductCategory entity is not found.
// Returns a *NotFoundError when no SellerProductCategory entities are found.
func (spcq *SellerProductCategoryQuery) Only(ctx context.Context) (*SellerProductCategory, error) {
	nodes, err := spcq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{sellerproductcategory.Label}
	default:
		return nil, &NotSingularError{sellerproductcategory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (spcq *SellerProductCategoryQuery) OnlyX(ctx context.Context) *SellerProductCategory {
	node, err := spcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SellerProductCategory ID in the query.
// Returns a *NotSingularError when exactly one SellerProductCategory ID is not found.
// Returns a *NotFoundError when no entities are found.
func (spcq *SellerProductCategoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = spcq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{sellerproductcategory.Label}
	default:
		err = &NotSingularError{sellerproductcategory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (spcq *SellerProductCategoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := spcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SellerProductCategories.
func (spcq *SellerProductCategoryQuery) All(ctx context.Context) ([]*SellerProductCategory, error) {
	if err := spcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return spcq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (spcq *SellerProductCategoryQuery) AllX(ctx context.Context) []*SellerProductCategory {
	nodes, err := spcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SellerProductCategory IDs.
func (spcq *SellerProductCategoryQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := spcq.Select(sellerproductcategory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (spcq *SellerProductCategoryQuery) IDsX(ctx context.Context) []int {
	ids, err := spcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (spcq *SellerProductCategoryQuery) Count(ctx context.Context) (int, error) {
	if err := spcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return spcq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (spcq *SellerProductCategoryQuery) CountX(ctx context.Context) int {
	count, err := spcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (spcq *SellerProductCategoryQuery) Exist(ctx context.Context) (bool, error) {
	if err := spcq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return spcq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (spcq *SellerProductCategoryQuery) ExistX(ctx context.Context) bool {
	exist, err := spcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SellerProductCategoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (spcq *SellerProductCategoryQuery) Clone() *SellerProductCategoryQuery {
	if spcq == nil {
		return nil
	}
	return &SellerProductCategoryQuery{
		config:     spcq.config,
		limit:      spcq.limit,
		offset:     spcq.offset,
		order:      append([]OrderFunc{}, spcq.order...),
		predicates: append([]predicate.SellerProductCategory{}, spcq.predicates...),
		// clone intermediate query.
		sql:  spcq.sql.Clone(),
		path: spcq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SellerProductCategory.Query().
//		GroupBy(sellerproductcategory.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (spcq *SellerProductCategoryQuery) GroupBy(field string, fields ...string) *SellerProductCategoryGroupBy {
	group := &SellerProductCategoryGroupBy{config: spcq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := spcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return spcq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.SellerProductCategory.Query().
//		Select(sellerproductcategory.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (spcq *SellerProductCategoryQuery) Select(fields ...string) *SellerProductCategorySelect {
	spcq.fields = append(spcq.fields, fields...)
	return &SellerProductCategorySelect{SellerProductCategoryQuery: spcq}
}

func (spcq *SellerProductCategoryQuery) prepareQuery(ctx context.Context) error {
	for _, f := range spcq.fields {
		if !sellerproductcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if spcq.path != nil {
		prev, err := spcq.path(ctx)
		if err != nil {
			return err
		}
		spcq.sql = prev
	}
	return nil
}

func (spcq *SellerProductCategoryQuery) sqlAll(ctx context.Context) ([]*SellerProductCategory, error) {
	var (
		nodes   = []*SellerProductCategory{}
		withFKs = spcq.withFKs
		_spec   = spcq.querySpec()
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, sellerproductcategory.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &SellerProductCategory{config: spcq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, spcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (spcq *SellerProductCategoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := spcq.querySpec()
	return sqlgraph.CountNodes(ctx, spcq.driver, _spec)
}

func (spcq *SellerProductCategoryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := spcq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (spcq *SellerProductCategoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellerproductcategory.Table,
			Columns: sellerproductcategory.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproductcategory.FieldID,
			},
		},
		From:   spcq.sql,
		Unique: true,
	}
	if unique := spcq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := spcq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sellerproductcategory.FieldID)
		for i := range fields {
			if fields[i] != sellerproductcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := spcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := spcq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := spcq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := spcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (spcq *SellerProductCategoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(spcq.driver.Dialect())
	t1 := builder.Table(sellerproductcategory.Table)
	columns := spcq.fields
	if len(columns) == 0 {
		columns = sellerproductcategory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if spcq.sql != nil {
		selector = spcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	for _, p := range spcq.predicates {
		p(selector)
	}
	for _, p := range spcq.order {
		p(selector)
	}
	if offset := spcq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := spcq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SellerProductCategoryGroupBy is the group-by builder for SellerProductCategory entities.
type SellerProductCategoryGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (spcgb *SellerProductCategoryGroupBy) Aggregate(fns ...AggregateFunc) *SellerProductCategoryGroupBy {
	spcgb.fns = append(spcgb.fns, fns...)
	return spcgb
}

// Scan applies the group-by query and scans the result into the given value.
func (spcgb *SellerProductCategoryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := spcgb.path(ctx)
	if err != nil {
		return err
	}
	spcgb.sql = query
	return spcgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (spcgb *SellerProductCategoryGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := spcgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (spcgb *SellerProductCategoryGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(spcgb.fields) > 1 {
		return nil, errors.New("ent: SellerProductCategoryGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := spcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (spcgb *SellerProductCategoryGroupBy) StringsX(ctx context.Context) []string {
	v, err := spcgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spcgb *SellerProductCategoryGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = spcgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductcategory.Label}
	default:
		err = fmt.Errorf("ent: SellerProductCategoryGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (spcgb *SellerProductCategoryGroupBy) StringX(ctx context.Context) string {
	v, err := spcgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (spcgb *SellerProductCategoryGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(spcgb.fields) > 1 {
		return nil, errors.New("ent: SellerProductCategoryGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := spcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (spcgb *SellerProductCategoryGroupBy) IntsX(ctx context.Context) []int {
	v, err := spcgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spcgb *SellerProductCategoryGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = spcgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductcategory.Label}
	default:
		err = fmt.Errorf("ent: SellerProductCategoryGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (spcgb *SellerProductCategoryGroupBy) IntX(ctx context.Context) int {
	v, err := spcgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (spcgb *SellerProductCategoryGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(spcgb.fields) > 1 {
		return nil, errors.New("ent: SellerProductCategoryGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := spcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (spcgb *SellerProductCategoryGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := spcgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spcgb *SellerProductCategoryGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = spcgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductcategory.Label}
	default:
		err = fmt.Errorf("ent: SellerProductCategoryGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (spcgb *SellerProductCategoryGroupBy) Float64X(ctx context.Context) float64 {
	v, err := spcgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (spcgb *SellerProductCategoryGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(spcgb.fields) > 1 {
		return nil, errors.New("ent: SellerProductCategoryGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := spcgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (spcgb *SellerProductCategoryGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := spcgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (spcgb *SellerProductCategoryGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = spcgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductcategory.Label}
	default:
		err = fmt.Errorf("ent: SellerProductCategoryGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (spcgb *SellerProductCategoryGroupBy) BoolX(ctx context.Context) bool {
	v, err := spcgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (spcgb *SellerProductCategoryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range spcgb.fields {
		if !sellerproductcategory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := spcgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spcgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (spcgb *SellerProductCategoryGroupBy) sqlQuery() *sql.Selector {
	selector := spcgb.sql.Select()
	aggregation := make([]string, 0, len(spcgb.fns))
	for _, fn := range spcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(spcgb.fields)+len(spcgb.fns))
		for _, f := range spcgb.fields {
			columns = append(columns, selector.C(f))
		}
		for _, c := range aggregation {
			columns = append(columns, c)
		}
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(spcgb.fields...)...)
}

// SellerProductCategorySelect is the builder for selecting fields of SellerProductCategory entities.
type SellerProductCategorySelect struct {
	*SellerProductCategoryQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (spcs *SellerProductCategorySelect) Scan(ctx context.Context, v interface{}) error {
	if err := spcs.prepareQuery(ctx); err != nil {
		return err
	}
	spcs.sql = spcs.SellerProductCategoryQuery.sqlQuery(ctx)
	return spcs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (spcs *SellerProductCategorySelect) ScanX(ctx context.Context, v interface{}) {
	if err := spcs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (spcs *SellerProductCategorySelect) Strings(ctx context.Context) ([]string, error) {
	if len(spcs.fields) > 1 {
		return nil, errors.New("ent: SellerProductCategorySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := spcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (spcs *SellerProductCategorySelect) StringsX(ctx context.Context) []string {
	v, err := spcs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (spcs *SellerProductCategorySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = spcs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductcategory.Label}
	default:
		err = fmt.Errorf("ent: SellerProductCategorySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (spcs *SellerProductCategorySelect) StringX(ctx context.Context) string {
	v, err := spcs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (spcs *SellerProductCategorySelect) Ints(ctx context.Context) ([]int, error) {
	if len(spcs.fields) > 1 {
		return nil, errors.New("ent: SellerProductCategorySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := spcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (spcs *SellerProductCategorySelect) IntsX(ctx context.Context) []int {
	v, err := spcs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (spcs *SellerProductCategorySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = spcs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductcategory.Label}
	default:
		err = fmt.Errorf("ent: SellerProductCategorySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (spcs *SellerProductCategorySelect) IntX(ctx context.Context) int {
	v, err := spcs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (spcs *SellerProductCategorySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(spcs.fields) > 1 {
		return nil, errors.New("ent: SellerProductCategorySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := spcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (spcs *SellerProductCategorySelect) Float64sX(ctx context.Context) []float64 {
	v, err := spcs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (spcs *SellerProductCategorySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = spcs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductcategory.Label}
	default:
		err = fmt.Errorf("ent: SellerProductCategorySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (spcs *SellerProductCategorySelect) Float64X(ctx context.Context) float64 {
	v, err := spcs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (spcs *SellerProductCategorySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(spcs.fields) > 1 {
		return nil, errors.New("ent: SellerProductCategorySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := spcs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (spcs *SellerProductCategorySelect) BoolsX(ctx context.Context) []bool {
	v, err := spcs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (spcs *SellerProductCategorySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = spcs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{sellerproductcategory.Label}
	default:
		err = fmt.Errorf("ent: SellerProductCategorySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (spcs *SellerProductCategorySelect) BoolX(ctx context.Context) bool {
	v, err := spcs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (spcs *SellerProductCategorySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := spcs.sql.Query()
	if err := spcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
