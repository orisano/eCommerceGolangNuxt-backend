// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"bongo/ent/migrate"

	"bongo/ent/attribute"
	"bongo/ent/brand"
	"bongo/ent/cart"
	"bongo/ent/cartproduct"
	"bongo/ent/category"
	"bongo/ent/checkout"
	"bongo/ent/checkoutproduct"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductcategory"
	"bongo/ent/sellerproductimage"
	"bongo/ent/sellerproductvariation"
	"bongo/ent/sellerproductvariationvalues"
	"bongo/ent/sellerrequest"
	"bongo/ent/sellershop"
	"bongo/ent/shopcategory"
	"bongo/ent/user"
	"bongo/ent/userlocation"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Attribute is the client for interacting with the Attribute builders.
	Attribute *AttributeClient
	// Brand is the client for interacting with the Brand builders.
	Brand *BrandClient
	// Cart is the client for interacting with the Cart builders.
	Cart *CartClient
	// CartProduct is the client for interacting with the CartProduct builders.
	CartProduct *CartProductClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// Checkout is the client for interacting with the Checkout builders.
	Checkout *CheckoutClient
	// CheckoutProduct is the client for interacting with the CheckoutProduct builders.
	CheckoutProduct *CheckoutProductClient
	// SellerProduct is the client for interacting with the SellerProduct builders.
	SellerProduct *SellerProductClient
	// SellerProductCategory is the client for interacting with the SellerProductCategory builders.
	SellerProductCategory *SellerProductCategoryClient
	// SellerProductImage is the client for interacting with the SellerProductImage builders.
	SellerProductImage *SellerProductImageClient
	// SellerProductVariation is the client for interacting with the SellerProductVariation builders.
	SellerProductVariation *SellerProductVariationClient
	// SellerProductVariationValues is the client for interacting with the SellerProductVariationValues builders.
	SellerProductVariationValues *SellerProductVariationValuesClient
	// SellerRequest is the client for interacting with the SellerRequest builders.
	SellerRequest *SellerRequestClient
	// SellerShop is the client for interacting with the SellerShop builders.
	SellerShop *SellerShopClient
	// ShopCategory is the client for interacting with the ShopCategory builders.
	ShopCategory *ShopCategoryClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserLocation is the client for interacting with the UserLocation builders.
	UserLocation *UserLocationClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Attribute = NewAttributeClient(c.config)
	c.Brand = NewBrandClient(c.config)
	c.Cart = NewCartClient(c.config)
	c.CartProduct = NewCartProductClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.Checkout = NewCheckoutClient(c.config)
	c.CheckoutProduct = NewCheckoutProductClient(c.config)
	c.SellerProduct = NewSellerProductClient(c.config)
	c.SellerProductCategory = NewSellerProductCategoryClient(c.config)
	c.SellerProductImage = NewSellerProductImageClient(c.config)
	c.SellerProductVariation = NewSellerProductVariationClient(c.config)
	c.SellerProductVariationValues = NewSellerProductVariationValuesClient(c.config)
	c.SellerRequest = NewSellerRequestClient(c.config)
	c.SellerShop = NewSellerShopClient(c.config)
	c.ShopCategory = NewShopCategoryClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserLocation = NewUserLocationClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                          ctx,
		config:                       cfg,
		Attribute:                    NewAttributeClient(cfg),
		Brand:                        NewBrandClient(cfg),
		Cart:                         NewCartClient(cfg),
		CartProduct:                  NewCartProductClient(cfg),
		Category:                     NewCategoryClient(cfg),
		Checkout:                     NewCheckoutClient(cfg),
		CheckoutProduct:              NewCheckoutProductClient(cfg),
		SellerProduct:                NewSellerProductClient(cfg),
		SellerProductCategory:        NewSellerProductCategoryClient(cfg),
		SellerProductImage:           NewSellerProductImageClient(cfg),
		SellerProductVariation:       NewSellerProductVariationClient(cfg),
		SellerProductVariationValues: NewSellerProductVariationValuesClient(cfg),
		SellerRequest:                NewSellerRequestClient(cfg),
		SellerShop:                   NewSellerShopClient(cfg),
		ShopCategory:                 NewShopCategoryClient(cfg),
		User:                         NewUserClient(cfg),
		UserLocation:                 NewUserLocationClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:                       cfg,
		Attribute:                    NewAttributeClient(cfg),
		Brand:                        NewBrandClient(cfg),
		Cart:                         NewCartClient(cfg),
		CartProduct:                  NewCartProductClient(cfg),
		Category:                     NewCategoryClient(cfg),
		Checkout:                     NewCheckoutClient(cfg),
		CheckoutProduct:              NewCheckoutProductClient(cfg),
		SellerProduct:                NewSellerProductClient(cfg),
		SellerProductCategory:        NewSellerProductCategoryClient(cfg),
		SellerProductImage:           NewSellerProductImageClient(cfg),
		SellerProductVariation:       NewSellerProductVariationClient(cfg),
		SellerProductVariationValues: NewSellerProductVariationValuesClient(cfg),
		SellerRequest:                NewSellerRequestClient(cfg),
		SellerShop:                   NewSellerShopClient(cfg),
		ShopCategory:                 NewShopCategoryClient(cfg),
		User:                         NewUserClient(cfg),
		UserLocation:                 NewUserLocationClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Attribute.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Attribute.Use(hooks...)
	c.Brand.Use(hooks...)
	c.Cart.Use(hooks...)
	c.CartProduct.Use(hooks...)
	c.Category.Use(hooks...)
	c.Checkout.Use(hooks...)
	c.CheckoutProduct.Use(hooks...)
	c.SellerProduct.Use(hooks...)
	c.SellerProductCategory.Use(hooks...)
	c.SellerProductImage.Use(hooks...)
	c.SellerProductVariation.Use(hooks...)
	c.SellerProductVariationValues.Use(hooks...)
	c.SellerRequest.Use(hooks...)
	c.SellerShop.Use(hooks...)
	c.ShopCategory.Use(hooks...)
	c.User.Use(hooks...)
	c.UserLocation.Use(hooks...)
}

// AttributeClient is a client for the Attribute schema.
type AttributeClient struct {
	config
}

// NewAttributeClient returns a client for the Attribute from the given config.
func NewAttributeClient(c config) *AttributeClient {
	return &AttributeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attribute.Hooks(f(g(h())))`.
func (c *AttributeClient) Use(hooks ...Hook) {
	c.hooks.Attribute = append(c.hooks.Attribute, hooks...)
}

// Create returns a create builder for Attribute.
func (c *AttributeClient) Create() *AttributeCreate {
	mutation := newAttributeMutation(c.config, OpCreate)
	return &AttributeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Attribute entities.
func (c *AttributeClient) CreateBulk(builders ...*AttributeCreate) *AttributeCreateBulk {
	return &AttributeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Attribute.
func (c *AttributeClient) Update() *AttributeUpdate {
	mutation := newAttributeMutation(c.config, OpUpdate)
	return &AttributeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttributeClient) UpdateOne(a *Attribute) *AttributeUpdateOne {
	mutation := newAttributeMutation(c.config, OpUpdateOne, withAttribute(a))
	return &AttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttributeClient) UpdateOneID(id int) *AttributeUpdateOne {
	mutation := newAttributeMutation(c.config, OpUpdateOne, withAttributeID(id))
	return &AttributeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Attribute.
func (c *AttributeClient) Delete() *AttributeDelete {
	mutation := newAttributeMutation(c.config, OpDelete)
	return &AttributeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AttributeClient) DeleteOne(a *Attribute) *AttributeDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AttributeClient) DeleteOneID(id int) *AttributeDeleteOne {
	builder := c.Delete().Where(attribute.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttributeDeleteOne{builder}
}

// Query returns a query builder for Attribute.
func (c *AttributeClient) Query() *AttributeQuery {
	return &AttributeQuery{
		config: c.config,
	}
}

// Get returns a Attribute entity by its id.
func (c *AttributeClient) Get(ctx context.Context, id int) (*Attribute, error) {
	return c.Query().Where(attribute.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttributeClient) GetX(ctx context.Context, id int) *Attribute {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttribute queries the attribute edge of a Attribute.
func (c *AttributeClient) QueryAttribute(a *Attribute) *SellerProductVariationValuesQuery {
	query := &SellerProductVariationValuesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attribute.Table, attribute.FieldID, id),
			sqlgraph.To(sellerproductvariationvalues.Table, sellerproductvariationvalues.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, attribute.AttributeTable, attribute.AttributeColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttributeClient) Hooks() []Hook {
	return c.hooks.Attribute
}

// BrandClient is a client for the Brand schema.
type BrandClient struct {
	config
}

// NewBrandClient returns a client for the Brand from the given config.
func NewBrandClient(c config) *BrandClient {
	return &BrandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `brand.Hooks(f(g(h())))`.
func (c *BrandClient) Use(hooks ...Hook) {
	c.hooks.Brand = append(c.hooks.Brand, hooks...)
}

// Create returns a create builder for Brand.
func (c *BrandClient) Create() *BrandCreate {
	mutation := newBrandMutation(c.config, OpCreate)
	return &BrandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Brand entities.
func (c *BrandClient) CreateBulk(builders ...*BrandCreate) *BrandCreateBulk {
	return &BrandCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Brand.
func (c *BrandClient) Update() *BrandUpdate {
	mutation := newBrandMutation(c.config, OpUpdate)
	return &BrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BrandClient) UpdateOne(b *Brand) *BrandUpdateOne {
	mutation := newBrandMutation(c.config, OpUpdateOne, withBrand(b))
	return &BrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BrandClient) UpdateOneID(id int) *BrandUpdateOne {
	mutation := newBrandMutation(c.config, OpUpdateOne, withBrandID(id))
	return &BrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Brand.
func (c *BrandClient) Delete() *BrandDelete {
	mutation := newBrandMutation(c.config, OpDelete)
	return &BrandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BrandClient) DeleteOne(b *Brand) *BrandDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BrandClient) DeleteOneID(id int) *BrandDeleteOne {
	builder := c.Delete().Where(brand.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BrandDeleteOne{builder}
}

// Query returns a query builder for Brand.
func (c *BrandClient) Query() *BrandQuery {
	return &BrandQuery{
		config: c.config,
	}
}

// Get returns a Brand entity by its id.
func (c *BrandClient) Get(ctx context.Context, id int) (*Brand, error) {
	return c.Query().Where(brand.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BrandClient) GetX(ctx context.Context, id int) *Brand {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBrand queries the brand edge of a Brand.
func (c *BrandClient) QueryBrand(b *Brand) *SellerProductQuery {
	query := &SellerProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(brand.Table, brand.FieldID, id),
			sqlgraph.To(sellerproduct.Table, sellerproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, brand.BrandTable, brand.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BrandClient) Hooks() []Hook {
	return c.hooks.Brand
}

// CartClient is a client for the Cart schema.
type CartClient struct {
	config
}

// NewCartClient returns a client for the Cart from the given config.
func NewCartClient(c config) *CartClient {
	return &CartClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cart.Hooks(f(g(h())))`.
func (c *CartClient) Use(hooks ...Hook) {
	c.hooks.Cart = append(c.hooks.Cart, hooks...)
}

// Create returns a create builder for Cart.
func (c *CartClient) Create() *CartCreate {
	mutation := newCartMutation(c.config, OpCreate)
	return &CartCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cart entities.
func (c *CartClient) CreateBulk(builders ...*CartCreate) *CartCreateBulk {
	return &CartCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cart.
func (c *CartClient) Update() *CartUpdate {
	mutation := newCartMutation(c.config, OpUpdate)
	return &CartUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CartClient) UpdateOne(ca *Cart) *CartUpdateOne {
	mutation := newCartMutation(c.config, OpUpdateOne, withCart(ca))
	return &CartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CartClient) UpdateOneID(id int) *CartUpdateOne {
	mutation := newCartMutation(c.config, OpUpdateOne, withCartID(id))
	return &CartUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cart.
func (c *CartClient) Delete() *CartDelete {
	mutation := newCartMutation(c.config, OpDelete)
	return &CartDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CartClient) DeleteOne(ca *Cart) *CartDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CartClient) DeleteOneID(id int) *CartDeleteOne {
	builder := c.Delete().Where(cart.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CartDeleteOne{builder}
}

// Query returns a query builder for Cart.
func (c *CartClient) Query() *CartQuery {
	return &CartQuery{
		config: c.config,
	}
}

// Get returns a Cart entity by its id.
func (c *CartClient) Get(ctx context.Context, id int) (*Cart, error) {
	return c.Query().Where(cart.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CartClient) GetX(ctx context.Context, id int) *Cart {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Cart.
func (c *CartClient) QueryUser(ca *Cart) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cart.Table, cart.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cart.UserTable, cart.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCartProducts queries the cart_products edge of a Cart.
func (c *CartClient) QueryCartProducts(ca *Cart) *CartProductQuery {
	query := &CartProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cart.Table, cart.FieldID, id),
			sqlgraph.To(cartproduct.Table, cartproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, cart.CartProductsTable, cart.CartProductsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckout queries the checkout edge of a Cart.
func (c *CartClient) QueryCheckout(ca *Cart) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cart.Table, cart.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, cart.CheckoutTable, cart.CheckoutColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CartClient) Hooks() []Hook {
	return c.hooks.Cart
}

// CartProductClient is a client for the CartProduct schema.
type CartProductClient struct {
	config
}

// NewCartProductClient returns a client for the CartProduct from the given config.
func NewCartProductClient(c config) *CartProductClient {
	return &CartProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cartproduct.Hooks(f(g(h())))`.
func (c *CartProductClient) Use(hooks ...Hook) {
	c.hooks.CartProduct = append(c.hooks.CartProduct, hooks...)
}

// Create returns a create builder for CartProduct.
func (c *CartProductClient) Create() *CartProductCreate {
	mutation := newCartProductMutation(c.config, OpCreate)
	return &CartProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CartProduct entities.
func (c *CartProductClient) CreateBulk(builders ...*CartProductCreate) *CartProductCreateBulk {
	return &CartProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CartProduct.
func (c *CartProductClient) Update() *CartProductUpdate {
	mutation := newCartProductMutation(c.config, OpUpdate)
	return &CartProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CartProductClient) UpdateOne(cp *CartProduct) *CartProductUpdateOne {
	mutation := newCartProductMutation(c.config, OpUpdateOne, withCartProduct(cp))
	return &CartProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CartProductClient) UpdateOneID(id int) *CartProductUpdateOne {
	mutation := newCartProductMutation(c.config, OpUpdateOne, withCartProductID(id))
	return &CartProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CartProduct.
func (c *CartProductClient) Delete() *CartProductDelete {
	mutation := newCartProductMutation(c.config, OpDelete)
	return &CartProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CartProductClient) DeleteOne(cp *CartProduct) *CartProductDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CartProductClient) DeleteOneID(id int) *CartProductDeleteOne {
	builder := c.Delete().Where(cartproduct.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CartProductDeleteOne{builder}
}

// Query returns a query builder for CartProduct.
func (c *CartProductClient) Query() *CartProductQuery {
	return &CartProductQuery{
		config: c.config,
	}
}

// Get returns a CartProduct entity by its id.
func (c *CartProductClient) Get(ctx context.Context, id int) (*CartProduct, error) {
	return c.Query().Where(cartproduct.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CartProductClient) GetX(ctx context.Context, id int) *CartProduct {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySellerProduct queries the seller_product edge of a CartProduct.
func (c *CartProductClient) QuerySellerProduct(cp *CartProduct) *SellerProductQuery {
	query := &SellerProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cartproduct.Table, cartproduct.FieldID, id),
			sqlgraph.To(sellerproduct.Table, sellerproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cartproduct.SellerProductTable, cartproduct.SellerProductColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCart queries the cart edge of a CartProduct.
func (c *CartProductClient) QueryCart(cp *CartProduct) *CartQuery {
	query := &CartQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cartproduct.Table, cartproduct.FieldID, id),
			sqlgraph.To(cart.Table, cart.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cartproduct.CartTable, cartproduct.CartColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerProductVariation queries the seller_product_variation edge of a CartProduct.
func (c *CartProductClient) QuerySellerProductVariation(cp *CartProduct) *SellerProductVariationQuery {
	query := &SellerProductVariationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cartproduct.Table, cartproduct.FieldID, id),
			sqlgraph.To(sellerproductvariation.Table, sellerproductvariation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, cartproduct.SellerProductVariationTable, cartproduct.SellerProductVariationColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CartProductClient) Hooks() []Hook {
	return c.hooks.CartProduct
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Create returns a create builder for Category.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id int) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CategoryClient) DeleteOneID(id int) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id int) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id int) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShopCategory queries the shop_category edge of a Category.
func (c *CategoryClient) QueryShopCategory(ca *Category) *ShopCategoryQuery {
	query := &ShopCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(shopcategory.Table, shopcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, category.ShopCategoryTable, category.ShopCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParent queries the parent edge of a Category.
func (c *CategoryClient) QueryParent(ca *Category) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, category.ParentTable, category.ParentColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Category.
func (c *CategoryClient) QueryChildren(ca *Category) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.ChildrenTable, category.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProductCategories queries the product_categories edge of a Category.
func (c *CategoryClient) QueryProductCategories(ca *Category) *SellerProductCategoryQuery {
	query := &SellerProductCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(sellerproductcategory.Table, sellerproductcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.ProductCategoriesTable, category.ProductCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerProducts queries the seller_products edge of a Category.
func (c *CategoryClient) QuerySellerProducts(ca *Category) *SellerProductQuery {
	query := &SellerProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(sellerproduct.Table, sellerproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, category.SellerProductsTable, category.SellerProductsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// CheckoutClient is a client for the Checkout schema.
type CheckoutClient struct {
	config
}

// NewCheckoutClient returns a client for the Checkout from the given config.
func NewCheckoutClient(c config) *CheckoutClient {
	return &CheckoutClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `checkout.Hooks(f(g(h())))`.
func (c *CheckoutClient) Use(hooks ...Hook) {
	c.hooks.Checkout = append(c.hooks.Checkout, hooks...)
}

// Create returns a create builder for Checkout.
func (c *CheckoutClient) Create() *CheckoutCreate {
	mutation := newCheckoutMutation(c.config, OpCreate)
	return &CheckoutCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Checkout entities.
func (c *CheckoutClient) CreateBulk(builders ...*CheckoutCreate) *CheckoutCreateBulk {
	return &CheckoutCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Checkout.
func (c *CheckoutClient) Update() *CheckoutUpdate {
	mutation := newCheckoutMutation(c.config, OpUpdate)
	return &CheckoutUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckoutClient) UpdateOne(ch *Checkout) *CheckoutUpdateOne {
	mutation := newCheckoutMutation(c.config, OpUpdateOne, withCheckout(ch))
	return &CheckoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckoutClient) UpdateOneID(id int) *CheckoutUpdateOne {
	mutation := newCheckoutMutation(c.config, OpUpdateOne, withCheckoutID(id))
	return &CheckoutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Checkout.
func (c *CheckoutClient) Delete() *CheckoutDelete {
	mutation := newCheckoutMutation(c.config, OpDelete)
	return &CheckoutDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CheckoutClient) DeleteOne(ch *Checkout) *CheckoutDeleteOne {
	return c.DeleteOneID(ch.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CheckoutClient) DeleteOneID(id int) *CheckoutDeleteOne {
	builder := c.Delete().Where(checkout.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckoutDeleteOne{builder}
}

// Query returns a query builder for Checkout.
func (c *CheckoutClient) Query() *CheckoutQuery {
	return &CheckoutQuery{
		config: c.config,
	}
}

// Get returns a Checkout entity by its id.
func (c *CheckoutClient) Get(ctx context.Context, id int) (*Checkout, error) {
	return c.Query().Where(checkout.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckoutClient) GetX(ctx context.Context, id int) *Checkout {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Checkout.
func (c *CheckoutClient) QueryUser(ch *Checkout) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkout.UserTable, checkout.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocation queries the location edge of a Checkout.
func (c *CheckoutClient) QueryLocation(ch *Checkout) *UserLocationQuery {
	query := &UserLocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(userlocation.Table, userlocation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkout.LocationTable, checkout.LocationColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCart queries the cart edge of a Checkout.
func (c *CheckoutClient) QueryCart(ch *Checkout) *CartQuery {
	query := &CartQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(cart.Table, cart.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, checkout.CartTable, checkout.CartColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckoutProducts queries the checkout_products edge of a Checkout.
func (c *CheckoutClient) QueryCheckoutProducts(ch *Checkout) *CheckoutProductQuery {
	query := &CheckoutProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ch.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkout.Table, checkout.FieldID, id),
			sqlgraph.To(checkoutproduct.Table, checkoutproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, checkout.CheckoutProductsTable, checkout.CheckoutProductsColumn),
		)
		fromV = sqlgraph.Neighbors(ch.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckoutClient) Hooks() []Hook {
	return c.hooks.Checkout
}

// CheckoutProductClient is a client for the CheckoutProduct schema.
type CheckoutProductClient struct {
	config
}

// NewCheckoutProductClient returns a client for the CheckoutProduct from the given config.
func NewCheckoutProductClient(c config) *CheckoutProductClient {
	return &CheckoutProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `checkoutproduct.Hooks(f(g(h())))`.
func (c *CheckoutProductClient) Use(hooks ...Hook) {
	c.hooks.CheckoutProduct = append(c.hooks.CheckoutProduct, hooks...)
}

// Create returns a create builder for CheckoutProduct.
func (c *CheckoutProductClient) Create() *CheckoutProductCreate {
	mutation := newCheckoutProductMutation(c.config, OpCreate)
	return &CheckoutProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CheckoutProduct entities.
func (c *CheckoutProductClient) CreateBulk(builders ...*CheckoutProductCreate) *CheckoutProductCreateBulk {
	return &CheckoutProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CheckoutProduct.
func (c *CheckoutProductClient) Update() *CheckoutProductUpdate {
	mutation := newCheckoutProductMutation(c.config, OpUpdate)
	return &CheckoutProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CheckoutProductClient) UpdateOne(cp *CheckoutProduct) *CheckoutProductUpdateOne {
	mutation := newCheckoutProductMutation(c.config, OpUpdateOne, withCheckoutProduct(cp))
	return &CheckoutProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CheckoutProductClient) UpdateOneID(id int) *CheckoutProductUpdateOne {
	mutation := newCheckoutProductMutation(c.config, OpUpdateOne, withCheckoutProductID(id))
	return &CheckoutProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CheckoutProduct.
func (c *CheckoutProductClient) Delete() *CheckoutProductDelete {
	mutation := newCheckoutProductMutation(c.config, OpDelete)
	return &CheckoutProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CheckoutProductClient) DeleteOne(cp *CheckoutProduct) *CheckoutProductDeleteOne {
	return c.DeleteOneID(cp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CheckoutProductClient) DeleteOneID(id int) *CheckoutProductDeleteOne {
	builder := c.Delete().Where(checkoutproduct.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CheckoutProductDeleteOne{builder}
}

// Query returns a query builder for CheckoutProduct.
func (c *CheckoutProductClient) Query() *CheckoutProductQuery {
	return &CheckoutProductQuery{
		config: c.config,
	}
}

// Get returns a CheckoutProduct entity by its id.
func (c *CheckoutProductClient) Get(ctx context.Context, id int) (*CheckoutProduct, error) {
	return c.Query().Where(checkoutproduct.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CheckoutProductClient) GetX(ctx context.Context, id int) *CheckoutProduct {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a CheckoutProduct.
func (c *CheckoutProductClient) QueryUser(cp *CheckoutProduct) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkoutproduct.Table, checkoutproduct.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkoutproduct.UserTable, checkoutproduct.UserColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckout queries the checkout edge of a CheckoutProduct.
func (c *CheckoutProductClient) QueryCheckout(cp *CheckoutProduct) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkoutproduct.Table, checkoutproduct.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkoutproduct.CheckoutTable, checkoutproduct.CheckoutColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySeller queries the seller edge of a CheckoutProduct.
func (c *CheckoutProductClient) QuerySeller(cp *CheckoutProduct) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkoutproduct.Table, checkoutproduct.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkoutproduct.SellerTable, checkoutproduct.SellerColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerProduct queries the seller_product edge of a CheckoutProduct.
func (c *CheckoutProductClient) QuerySellerProduct(cp *CheckoutProduct) *SellerProductQuery {
	query := &SellerProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkoutproduct.Table, checkoutproduct.FieldID, id),
			sqlgraph.To(sellerproduct.Table, sellerproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkoutproduct.SellerProductTable, checkoutproduct.SellerProductColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerProductVariation queries the seller_product_variation edge of a CheckoutProduct.
func (c *CheckoutProductClient) QuerySellerProductVariation(cp *CheckoutProduct) *SellerProductVariationQuery {
	query := &SellerProductVariationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(checkoutproduct.Table, checkoutproduct.FieldID, id),
			sqlgraph.To(sellerproductvariation.Table, sellerproductvariation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, checkoutproduct.SellerProductVariationTable, checkoutproduct.SellerProductVariationColumn),
		)
		fromV = sqlgraph.Neighbors(cp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CheckoutProductClient) Hooks() []Hook {
	return c.hooks.CheckoutProduct
}

// SellerProductClient is a client for the SellerProduct schema.
type SellerProductClient struct {
	config
}

// NewSellerProductClient returns a client for the SellerProduct from the given config.
func NewSellerProductClient(c config) *SellerProductClient {
	return &SellerProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sellerproduct.Hooks(f(g(h())))`.
func (c *SellerProductClient) Use(hooks ...Hook) {
	c.hooks.SellerProduct = append(c.hooks.SellerProduct, hooks...)
}

// Create returns a create builder for SellerProduct.
func (c *SellerProductClient) Create() *SellerProductCreate {
	mutation := newSellerProductMutation(c.config, OpCreate)
	return &SellerProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SellerProduct entities.
func (c *SellerProductClient) CreateBulk(builders ...*SellerProductCreate) *SellerProductCreateBulk {
	return &SellerProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SellerProduct.
func (c *SellerProductClient) Update() *SellerProductUpdate {
	mutation := newSellerProductMutation(c.config, OpUpdate)
	return &SellerProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SellerProductClient) UpdateOne(sp *SellerProduct) *SellerProductUpdateOne {
	mutation := newSellerProductMutation(c.config, OpUpdateOne, withSellerProduct(sp))
	return &SellerProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SellerProductClient) UpdateOneID(id int) *SellerProductUpdateOne {
	mutation := newSellerProductMutation(c.config, OpUpdateOne, withSellerProductID(id))
	return &SellerProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SellerProduct.
func (c *SellerProductClient) Delete() *SellerProductDelete {
	mutation := newSellerProductMutation(c.config, OpDelete)
	return &SellerProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SellerProductClient) DeleteOne(sp *SellerProduct) *SellerProductDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SellerProductClient) DeleteOneID(id int) *SellerProductDeleteOne {
	builder := c.Delete().Where(sellerproduct.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SellerProductDeleteOne{builder}
}

// Query returns a query builder for SellerProduct.
func (c *SellerProductClient) Query() *SellerProductQuery {
	return &SellerProductQuery{
		config: c.config,
	}
}

// Get returns a SellerProduct entity by its id.
func (c *SellerProductClient) Get(ctx context.Context, id int) (*SellerProduct, error) {
	return c.Query().Where(sellerproduct.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SellerProductClient) GetX(ctx context.Context, id int) *SellerProduct {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBrand queries the brand edge of a SellerProduct.
func (c *SellerProductClient) QueryBrand(sp *SellerProduct) *BrandQuery {
	query := &BrandQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, id),
			sqlgraph.To(brand.Table, brand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerproduct.BrandTable, sellerproduct.BrandColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a SellerProduct.
func (c *SellerProductClient) QueryUser(sp *SellerProduct) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerproduct.UserTable, sellerproduct.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerProductImages queries the seller_product_images edge of a SellerProduct.
func (c *SellerProductClient) QuerySellerProductImages(sp *SellerProduct) *SellerProductImageQuery {
	query := &SellerProductImageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, id),
			sqlgraph.To(sellerproductimage.Table, sellerproductimage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellerproduct.SellerProductImagesTable, sellerproduct.SellerProductImagesColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCategories queries the categories edge of a SellerProduct.
func (c *SellerProductClient) QueryCategories(sp *SellerProduct) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, sellerproduct.CategoriesTable, sellerproduct.CategoriesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryShop queries the shop edge of a SellerProduct.
func (c *SellerProductClient) QueryShop(sp *SellerProduct) *SellerShopQuery {
	query := &SellerShopQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, id),
			sqlgraph.To(sellershop.Table, sellershop.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerproduct.ShopTable, sellerproduct.ShopColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCartProducts queries the cart_products edge of a SellerProduct.
func (c *SellerProductClient) QueryCartProducts(sp *SellerProduct) *CartProductQuery {
	query := &CartProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, id),
			sqlgraph.To(cartproduct.Table, cartproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellerproduct.CartProductsTable, sellerproduct.CartProductsColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckoutProducts queries the checkout_products edge of a SellerProduct.
func (c *SellerProductClient) QueryCheckoutProducts(sp *SellerProduct) *CheckoutProductQuery {
	query := &CheckoutProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, id),
			sqlgraph.To(checkoutproduct.Table, checkoutproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellerproduct.CheckoutProductsTable, sellerproduct.CheckoutProductsColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerProductVariations queries the seller_product_variations edge of a SellerProduct.
func (c *SellerProductClient) QuerySellerProductVariations(sp *SellerProduct) *SellerProductVariationQuery {
	query := &SellerProductVariationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproduct.Table, sellerproduct.FieldID, id),
			sqlgraph.To(sellerproductvariation.Table, sellerproductvariation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellerproduct.SellerProductVariationsTable, sellerproduct.SellerProductVariationsColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SellerProductClient) Hooks() []Hook {
	return c.hooks.SellerProduct
}

// SellerProductCategoryClient is a client for the SellerProductCategory schema.
type SellerProductCategoryClient struct {
	config
}

// NewSellerProductCategoryClient returns a client for the SellerProductCategory from the given config.
func NewSellerProductCategoryClient(c config) *SellerProductCategoryClient {
	return &SellerProductCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sellerproductcategory.Hooks(f(g(h())))`.
func (c *SellerProductCategoryClient) Use(hooks ...Hook) {
	c.hooks.SellerProductCategory = append(c.hooks.SellerProductCategory, hooks...)
}

// Create returns a create builder for SellerProductCategory.
func (c *SellerProductCategoryClient) Create() *SellerProductCategoryCreate {
	mutation := newSellerProductCategoryMutation(c.config, OpCreate)
	return &SellerProductCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SellerProductCategory entities.
func (c *SellerProductCategoryClient) CreateBulk(builders ...*SellerProductCategoryCreate) *SellerProductCategoryCreateBulk {
	return &SellerProductCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SellerProductCategory.
func (c *SellerProductCategoryClient) Update() *SellerProductCategoryUpdate {
	mutation := newSellerProductCategoryMutation(c.config, OpUpdate)
	return &SellerProductCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SellerProductCategoryClient) UpdateOne(spc *SellerProductCategory) *SellerProductCategoryUpdateOne {
	mutation := newSellerProductCategoryMutation(c.config, OpUpdateOne, withSellerProductCategory(spc))
	return &SellerProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SellerProductCategoryClient) UpdateOneID(id int) *SellerProductCategoryUpdateOne {
	mutation := newSellerProductCategoryMutation(c.config, OpUpdateOne, withSellerProductCategoryID(id))
	return &SellerProductCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SellerProductCategory.
func (c *SellerProductCategoryClient) Delete() *SellerProductCategoryDelete {
	mutation := newSellerProductCategoryMutation(c.config, OpDelete)
	return &SellerProductCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SellerProductCategoryClient) DeleteOne(spc *SellerProductCategory) *SellerProductCategoryDeleteOne {
	return c.DeleteOneID(spc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SellerProductCategoryClient) DeleteOneID(id int) *SellerProductCategoryDeleteOne {
	builder := c.Delete().Where(sellerproductcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SellerProductCategoryDeleteOne{builder}
}

// Query returns a query builder for SellerProductCategory.
func (c *SellerProductCategoryClient) Query() *SellerProductCategoryQuery {
	return &SellerProductCategoryQuery{
		config: c.config,
	}
}

// Get returns a SellerProductCategory entity by its id.
func (c *SellerProductCategoryClient) Get(ctx context.Context, id int) (*SellerProductCategory, error) {
	return c.Query().Where(sellerproductcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SellerProductCategoryClient) GetX(ctx context.Context, id int) *SellerProductCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SellerProductCategoryClient) Hooks() []Hook {
	return c.hooks.SellerProductCategory
}

// SellerProductImageClient is a client for the SellerProductImage schema.
type SellerProductImageClient struct {
	config
}

// NewSellerProductImageClient returns a client for the SellerProductImage from the given config.
func NewSellerProductImageClient(c config) *SellerProductImageClient {
	return &SellerProductImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sellerproductimage.Hooks(f(g(h())))`.
func (c *SellerProductImageClient) Use(hooks ...Hook) {
	c.hooks.SellerProductImage = append(c.hooks.SellerProductImage, hooks...)
}

// Create returns a create builder for SellerProductImage.
func (c *SellerProductImageClient) Create() *SellerProductImageCreate {
	mutation := newSellerProductImageMutation(c.config, OpCreate)
	return &SellerProductImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SellerProductImage entities.
func (c *SellerProductImageClient) CreateBulk(builders ...*SellerProductImageCreate) *SellerProductImageCreateBulk {
	return &SellerProductImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SellerProductImage.
func (c *SellerProductImageClient) Update() *SellerProductImageUpdate {
	mutation := newSellerProductImageMutation(c.config, OpUpdate)
	return &SellerProductImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SellerProductImageClient) UpdateOne(spi *SellerProductImage) *SellerProductImageUpdateOne {
	mutation := newSellerProductImageMutation(c.config, OpUpdateOne, withSellerProductImage(spi))
	return &SellerProductImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SellerProductImageClient) UpdateOneID(id int) *SellerProductImageUpdateOne {
	mutation := newSellerProductImageMutation(c.config, OpUpdateOne, withSellerProductImageID(id))
	return &SellerProductImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SellerProductImage.
func (c *SellerProductImageClient) Delete() *SellerProductImageDelete {
	mutation := newSellerProductImageMutation(c.config, OpDelete)
	return &SellerProductImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SellerProductImageClient) DeleteOne(spi *SellerProductImage) *SellerProductImageDeleteOne {
	return c.DeleteOneID(spi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SellerProductImageClient) DeleteOneID(id int) *SellerProductImageDeleteOne {
	builder := c.Delete().Where(sellerproductimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SellerProductImageDeleteOne{builder}
}

// Query returns a query builder for SellerProductImage.
func (c *SellerProductImageClient) Query() *SellerProductImageQuery {
	return &SellerProductImageQuery{
		config: c.config,
	}
}

// Get returns a SellerProductImage entity by its id.
func (c *SellerProductImageClient) Get(ctx context.Context, id int) (*SellerProductImage, error) {
	return c.Query().Where(sellerproductimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SellerProductImageClient) GetX(ctx context.Context, id int) *SellerProductImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySellerProduct queries the seller_product edge of a SellerProductImage.
func (c *SellerProductImageClient) QuerySellerProduct(spi *SellerProductImage) *SellerProductQuery {
	query := &SellerProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := spi.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproductimage.Table, sellerproductimage.FieldID, id),
			sqlgraph.To(sellerproduct.Table, sellerproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerproductimage.SellerProductTable, sellerproductimage.SellerProductColumn),
		)
		fromV = sqlgraph.Neighbors(spi.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SellerProductImageClient) Hooks() []Hook {
	return c.hooks.SellerProductImage
}

// SellerProductVariationClient is a client for the SellerProductVariation schema.
type SellerProductVariationClient struct {
	config
}

// NewSellerProductVariationClient returns a client for the SellerProductVariation from the given config.
func NewSellerProductVariationClient(c config) *SellerProductVariationClient {
	return &SellerProductVariationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sellerproductvariation.Hooks(f(g(h())))`.
func (c *SellerProductVariationClient) Use(hooks ...Hook) {
	c.hooks.SellerProductVariation = append(c.hooks.SellerProductVariation, hooks...)
}

// Create returns a create builder for SellerProductVariation.
func (c *SellerProductVariationClient) Create() *SellerProductVariationCreate {
	mutation := newSellerProductVariationMutation(c.config, OpCreate)
	return &SellerProductVariationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SellerProductVariation entities.
func (c *SellerProductVariationClient) CreateBulk(builders ...*SellerProductVariationCreate) *SellerProductVariationCreateBulk {
	return &SellerProductVariationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SellerProductVariation.
func (c *SellerProductVariationClient) Update() *SellerProductVariationUpdate {
	mutation := newSellerProductVariationMutation(c.config, OpUpdate)
	return &SellerProductVariationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SellerProductVariationClient) UpdateOne(spv *SellerProductVariation) *SellerProductVariationUpdateOne {
	mutation := newSellerProductVariationMutation(c.config, OpUpdateOne, withSellerProductVariation(spv))
	return &SellerProductVariationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SellerProductVariationClient) UpdateOneID(id int) *SellerProductVariationUpdateOne {
	mutation := newSellerProductVariationMutation(c.config, OpUpdateOne, withSellerProductVariationID(id))
	return &SellerProductVariationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SellerProductVariation.
func (c *SellerProductVariationClient) Delete() *SellerProductVariationDelete {
	mutation := newSellerProductVariationMutation(c.config, OpDelete)
	return &SellerProductVariationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SellerProductVariationClient) DeleteOne(spv *SellerProductVariation) *SellerProductVariationDeleteOne {
	return c.DeleteOneID(spv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SellerProductVariationClient) DeleteOneID(id int) *SellerProductVariationDeleteOne {
	builder := c.Delete().Where(sellerproductvariation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SellerProductVariationDeleteOne{builder}
}

// Query returns a query builder for SellerProductVariation.
func (c *SellerProductVariationClient) Query() *SellerProductVariationQuery {
	return &SellerProductVariationQuery{
		config: c.config,
	}
}

// Get returns a SellerProductVariation entity by its id.
func (c *SellerProductVariationClient) Get(ctx context.Context, id int) (*SellerProductVariation, error) {
	return c.Query().Where(sellerproductvariation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SellerProductVariationClient) GetX(ctx context.Context, id int) *SellerProductVariation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySellerProduct queries the seller_product edge of a SellerProductVariation.
func (c *SellerProductVariationClient) QuerySellerProduct(spv *SellerProductVariation) *SellerProductQuery {
	query := &SellerProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := spv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproductvariation.Table, sellerproductvariation.FieldID, id),
			sqlgraph.To(sellerproduct.Table, sellerproduct.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerproductvariation.SellerProductTable, sellerproductvariation.SellerProductColumn),
		)
		fromV = sqlgraph.Neighbors(spv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerProductVariationValues queries the seller_product_variation_values edge of a SellerProductVariation.
func (c *SellerProductVariationClient) QuerySellerProductVariationValues(spv *SellerProductVariation) *SellerProductVariationValuesQuery {
	query := &SellerProductVariationValuesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := spv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproductvariation.Table, sellerproductvariation.FieldID, id),
			sqlgraph.To(sellerproductvariationvalues.Table, sellerproductvariationvalues.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellerproductvariation.SellerProductVariationValuesTable, sellerproductvariation.SellerProductVariationValuesColumn),
		)
		fromV = sqlgraph.Neighbors(spv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCartProducts queries the cart_products edge of a SellerProductVariation.
func (c *SellerProductVariationClient) QueryCartProducts(spv *SellerProductVariation) *CartProductQuery {
	query := &CartProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := spv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproductvariation.Table, sellerproductvariation.FieldID, id),
			sqlgraph.To(cartproduct.Table, cartproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellerproductvariation.CartProductsTable, sellerproductvariation.CartProductsColumn),
		)
		fromV = sqlgraph.Neighbors(spv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckoutProducts queries the checkout_products edge of a SellerProductVariation.
func (c *SellerProductVariationClient) QueryCheckoutProducts(spv *SellerProductVariation) *CheckoutProductQuery {
	query := &CheckoutProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := spv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproductvariation.Table, sellerproductvariation.FieldID, id),
			sqlgraph.To(checkoutproduct.Table, checkoutproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellerproductvariation.CheckoutProductsTable, sellerproductvariation.CheckoutProductsColumn),
		)
		fromV = sqlgraph.Neighbors(spv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SellerProductVariationClient) Hooks() []Hook {
	return c.hooks.SellerProductVariation
}

// SellerProductVariationValuesClient is a client for the SellerProductVariationValues schema.
type SellerProductVariationValuesClient struct {
	config
}

// NewSellerProductVariationValuesClient returns a client for the SellerProductVariationValues from the given config.
func NewSellerProductVariationValuesClient(c config) *SellerProductVariationValuesClient {
	return &SellerProductVariationValuesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sellerproductvariationvalues.Hooks(f(g(h())))`.
func (c *SellerProductVariationValuesClient) Use(hooks ...Hook) {
	c.hooks.SellerProductVariationValues = append(c.hooks.SellerProductVariationValues, hooks...)
}

// Create returns a create builder for SellerProductVariationValues.
func (c *SellerProductVariationValuesClient) Create() *SellerProductVariationValuesCreate {
	mutation := newSellerProductVariationValuesMutation(c.config, OpCreate)
	return &SellerProductVariationValuesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SellerProductVariationValues entities.
func (c *SellerProductVariationValuesClient) CreateBulk(builders ...*SellerProductVariationValuesCreate) *SellerProductVariationValuesCreateBulk {
	return &SellerProductVariationValuesCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SellerProductVariationValues.
func (c *SellerProductVariationValuesClient) Update() *SellerProductVariationValuesUpdate {
	mutation := newSellerProductVariationValuesMutation(c.config, OpUpdate)
	return &SellerProductVariationValuesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SellerProductVariationValuesClient) UpdateOne(spvv *SellerProductVariationValues) *SellerProductVariationValuesUpdateOne {
	mutation := newSellerProductVariationValuesMutation(c.config, OpUpdateOne, withSellerProductVariationValues(spvv))
	return &SellerProductVariationValuesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SellerProductVariationValuesClient) UpdateOneID(id int) *SellerProductVariationValuesUpdateOne {
	mutation := newSellerProductVariationValuesMutation(c.config, OpUpdateOne, withSellerProductVariationValuesID(id))
	return &SellerProductVariationValuesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SellerProductVariationValues.
func (c *SellerProductVariationValuesClient) Delete() *SellerProductVariationValuesDelete {
	mutation := newSellerProductVariationValuesMutation(c.config, OpDelete)
	return &SellerProductVariationValuesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SellerProductVariationValuesClient) DeleteOne(spvv *SellerProductVariationValues) *SellerProductVariationValuesDeleteOne {
	return c.DeleteOneID(spvv.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SellerProductVariationValuesClient) DeleteOneID(id int) *SellerProductVariationValuesDeleteOne {
	builder := c.Delete().Where(sellerproductvariationvalues.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SellerProductVariationValuesDeleteOne{builder}
}

// Query returns a query builder for SellerProductVariationValues.
func (c *SellerProductVariationValuesClient) Query() *SellerProductVariationValuesQuery {
	return &SellerProductVariationValuesQuery{
		config: c.config,
	}
}

// Get returns a SellerProductVariationValues entity by its id.
func (c *SellerProductVariationValuesClient) Get(ctx context.Context, id int) (*SellerProductVariationValues, error) {
	return c.Query().Where(sellerproductvariationvalues.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SellerProductVariationValuesClient) GetX(ctx context.Context, id int) *SellerProductVariationValues {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAttribute queries the attribute edge of a SellerProductVariationValues.
func (c *SellerProductVariationValuesClient) QueryAttribute(spvv *SellerProductVariationValues) *AttributeQuery {
	query := &AttributeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := spvv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproductvariationvalues.Table, sellerproductvariationvalues.FieldID, id),
			sqlgraph.To(attribute.Table, attribute.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerproductvariationvalues.AttributeTable, sellerproductvariationvalues.AttributeColumn),
		)
		fromV = sqlgraph.Neighbors(spvv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerProductVariation queries the seller_product_variation edge of a SellerProductVariationValues.
func (c *SellerProductVariationValuesClient) QuerySellerProductVariation(spvv *SellerProductVariationValues) *SellerProductVariationQuery {
	query := &SellerProductVariationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := spvv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerproductvariationvalues.Table, sellerproductvariationvalues.FieldID, id),
			sqlgraph.To(sellerproductvariation.Table, sellerproductvariation.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerproductvariationvalues.SellerProductVariationTable, sellerproductvariationvalues.SellerProductVariationColumn),
		)
		fromV = sqlgraph.Neighbors(spvv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SellerProductVariationValuesClient) Hooks() []Hook {
	return c.hooks.SellerProductVariationValues
}

// SellerRequestClient is a client for the SellerRequest schema.
type SellerRequestClient struct {
	config
}

// NewSellerRequestClient returns a client for the SellerRequest from the given config.
func NewSellerRequestClient(c config) *SellerRequestClient {
	return &SellerRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sellerrequest.Hooks(f(g(h())))`.
func (c *SellerRequestClient) Use(hooks ...Hook) {
	c.hooks.SellerRequest = append(c.hooks.SellerRequest, hooks...)
}

// Create returns a create builder for SellerRequest.
func (c *SellerRequestClient) Create() *SellerRequestCreate {
	mutation := newSellerRequestMutation(c.config, OpCreate)
	return &SellerRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SellerRequest entities.
func (c *SellerRequestClient) CreateBulk(builders ...*SellerRequestCreate) *SellerRequestCreateBulk {
	return &SellerRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SellerRequest.
func (c *SellerRequestClient) Update() *SellerRequestUpdate {
	mutation := newSellerRequestMutation(c.config, OpUpdate)
	return &SellerRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SellerRequestClient) UpdateOne(sr *SellerRequest) *SellerRequestUpdateOne {
	mutation := newSellerRequestMutation(c.config, OpUpdateOne, withSellerRequest(sr))
	return &SellerRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SellerRequestClient) UpdateOneID(id int) *SellerRequestUpdateOne {
	mutation := newSellerRequestMutation(c.config, OpUpdateOne, withSellerRequestID(id))
	return &SellerRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SellerRequest.
func (c *SellerRequestClient) Delete() *SellerRequestDelete {
	mutation := newSellerRequestMutation(c.config, OpDelete)
	return &SellerRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SellerRequestClient) DeleteOne(sr *SellerRequest) *SellerRequestDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SellerRequestClient) DeleteOneID(id int) *SellerRequestDeleteOne {
	builder := c.Delete().Where(sellerrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SellerRequestDeleteOne{builder}
}

// Query returns a query builder for SellerRequest.
func (c *SellerRequestClient) Query() *SellerRequestQuery {
	return &SellerRequestQuery{
		config: c.config,
	}
}

// Get returns a SellerRequest entity by its id.
func (c *SellerRequestClient) Get(ctx context.Context, id int) (*SellerRequest, error) {
	return c.Query().Where(sellerrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SellerRequestClient) GetX(ctx context.Context, id int) *SellerRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryShopCategory queries the shop_category edge of a SellerRequest.
func (c *SellerRequestClient) QueryShopCategory(sr *SellerRequest) *ShopCategoryQuery {
	query := &ShopCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerrequest.Table, sellerrequest.FieldID, id),
			sqlgraph.To(shopcategory.Table, shopcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerrequest.ShopCategoryTable, sellerrequest.ShopCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a SellerRequest.
func (c *SellerRequestClient) QueryUser(sr *SellerRequest) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellerrequest.Table, sellerrequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellerrequest.UserTable, sellerrequest.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SellerRequestClient) Hooks() []Hook {
	return c.hooks.SellerRequest
}

// SellerShopClient is a client for the SellerShop schema.
type SellerShopClient struct {
	config
}

// NewSellerShopClient returns a client for the SellerShop from the given config.
func NewSellerShopClient(c config) *SellerShopClient {
	return &SellerShopClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sellershop.Hooks(f(g(h())))`.
func (c *SellerShopClient) Use(hooks ...Hook) {
	c.hooks.SellerShop = append(c.hooks.SellerShop, hooks...)
}

// Create returns a create builder for SellerShop.
func (c *SellerShopClient) Create() *SellerShopCreate {
	mutation := newSellerShopMutation(c.config, OpCreate)
	return &SellerShopCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SellerShop entities.
func (c *SellerShopClient) CreateBulk(builders ...*SellerShopCreate) *SellerShopCreateBulk {
	return &SellerShopCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SellerShop.
func (c *SellerShopClient) Update() *SellerShopUpdate {
	mutation := newSellerShopMutation(c.config, OpUpdate)
	return &SellerShopUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SellerShopClient) UpdateOne(ss *SellerShop) *SellerShopUpdateOne {
	mutation := newSellerShopMutation(c.config, OpUpdateOne, withSellerShop(ss))
	return &SellerShopUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SellerShopClient) UpdateOneID(id int) *SellerShopUpdateOne {
	mutation := newSellerShopMutation(c.config, OpUpdateOne, withSellerShopID(id))
	return &SellerShopUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SellerShop.
func (c *SellerShopClient) Delete() *SellerShopDelete {
	mutation := newSellerShopMutation(c.config, OpDelete)
	return &SellerShopDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SellerShopClient) DeleteOne(ss *SellerShop) *SellerShopDeleteOne {
	return c.DeleteOneID(ss.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SellerShopClient) DeleteOneID(id int) *SellerShopDeleteOne {
	builder := c.Delete().Where(sellershop.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SellerShopDeleteOne{builder}
}

// Query returns a query builder for SellerShop.
func (c *SellerShopClient) Query() *SellerShopQuery {
	return &SellerShopQuery{
		config: c.config,
	}
}

// Get returns a SellerShop entity by its id.
func (c *SellerShopClient) Get(ctx context.Context, id int) (*SellerShop, error) {
	return c.Query().Where(sellershop.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SellerShopClient) GetX(ctx context.Context, id int) *SellerShop {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a SellerShop.
func (c *SellerShopClient) QueryUser(ss *SellerShop) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellershop.Table, sellershop.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellershop.UserTable, sellershop.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAdmin queries the admin edge of a SellerShop.
func (c *SellerShopClient) QueryAdmin(ss *SellerShop) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellershop.Table, sellershop.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellershop.AdminTable, sellershop.AdminColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGetShopCategory queries the get_shop_category edge of a SellerShop.
func (c *SellerShopClient) QueryGetShopCategory(ss *SellerShop) *ShopCategoryQuery {
	query := &ShopCategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellershop.Table, sellershop.FieldID, id),
			sqlgraph.To(shopcategory.Table, shopcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, sellershop.GetShopCategoryTable, sellershop.GetShopCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerProducts queries the seller_products edge of a SellerShop.
func (c *SellerShopClient) QuerySellerProducts(ss *SellerShop) *SellerProductQuery {
	query := &SellerProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ss.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(sellershop.Table, sellershop.FieldID, id),
			sqlgraph.To(sellerproduct.Table, sellerproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, sellershop.SellerProductsTable, sellershop.SellerProductsColumn),
		)
		fromV = sqlgraph.Neighbors(ss.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SellerShopClient) Hooks() []Hook {
	return c.hooks.SellerShop
}

// ShopCategoryClient is a client for the ShopCategory schema.
type ShopCategoryClient struct {
	config
}

// NewShopCategoryClient returns a client for the ShopCategory from the given config.
func NewShopCategoryClient(c config) *ShopCategoryClient {
	return &ShopCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `shopcategory.Hooks(f(g(h())))`.
func (c *ShopCategoryClient) Use(hooks ...Hook) {
	c.hooks.ShopCategory = append(c.hooks.ShopCategory, hooks...)
}

// Create returns a create builder for ShopCategory.
func (c *ShopCategoryClient) Create() *ShopCategoryCreate {
	mutation := newShopCategoryMutation(c.config, OpCreate)
	return &ShopCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ShopCategory entities.
func (c *ShopCategoryClient) CreateBulk(builders ...*ShopCategoryCreate) *ShopCategoryCreateBulk {
	return &ShopCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ShopCategory.
func (c *ShopCategoryClient) Update() *ShopCategoryUpdate {
	mutation := newShopCategoryMutation(c.config, OpUpdate)
	return &ShopCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ShopCategoryClient) UpdateOne(sc *ShopCategory) *ShopCategoryUpdateOne {
	mutation := newShopCategoryMutation(c.config, OpUpdateOne, withShopCategory(sc))
	return &ShopCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ShopCategoryClient) UpdateOneID(id int) *ShopCategoryUpdateOne {
	mutation := newShopCategoryMutation(c.config, OpUpdateOne, withShopCategoryID(id))
	return &ShopCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ShopCategory.
func (c *ShopCategoryClient) Delete() *ShopCategoryDelete {
	mutation := newShopCategoryMutation(c.config, OpDelete)
	return &ShopCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ShopCategoryClient) DeleteOne(sc *ShopCategory) *ShopCategoryDeleteOne {
	return c.DeleteOneID(sc.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ShopCategoryClient) DeleteOneID(id int) *ShopCategoryDeleteOne {
	builder := c.Delete().Where(shopcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ShopCategoryDeleteOne{builder}
}

// Query returns a query builder for ShopCategory.
func (c *ShopCategoryClient) Query() *ShopCategoryQuery {
	return &ShopCategoryQuery{
		config: c.config,
	}
}

// Get returns a ShopCategory entity by its id.
func (c *ShopCategoryClient) Get(ctx context.Context, id int) (*ShopCategory, error) {
	return c.Query().Where(shopcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ShopCategoryClient) GetX(ctx context.Context, id int) *ShopCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategories queries the categories edge of a ShopCategory.
func (c *ShopCategoryClient) QueryCategories(sc *ShopCategory) *CategoryQuery {
	query := &CategoryQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shopcategory.Table, shopcategory.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shopcategory.CategoriesTable, shopcategory.CategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerRequests queries the seller_requests edge of a ShopCategory.
func (c *ShopCategoryClient) QuerySellerRequests(sc *ShopCategory) *SellerRequestQuery {
	query := &SellerRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shopcategory.Table, shopcategory.FieldID, id),
			sqlgraph.To(sellerrequest.Table, sellerrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shopcategory.SellerRequestsTable, shopcategory.SellerRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerShops queries the seller_shops edge of a ShopCategory.
func (c *ShopCategoryClient) QuerySellerShops(sc *ShopCategory) *SellerShopQuery {
	query := &SellerShopQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(shopcategory.Table, shopcategory.FieldID, id),
			sqlgraph.To(sellershop.Table, sellershop.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, shopcategory.SellerShopsTable, shopcategory.SellerShopsColumn),
		)
		fromV = sqlgraph.Neighbors(sc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ShopCategoryClient) Hooks() []Hook {
	return c.hooks.ShopCategory
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySellerRequests queries the seller_requests edge of a User.
func (c *UserClient) QuerySellerRequests(u *User) *SellerRequestQuery {
	query := &SellerRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(sellerrequest.Table, sellerrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SellerRequestsTable, user.SellerRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerShops queries the seller_shops edge of a User.
func (c *UserClient) QuerySellerShops(u *User) *SellerShopQuery {
	query := &SellerShopQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(sellershop.Table, sellershop.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SellerShopsTable, user.SellerShopsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerProducts queries the seller_products edge of a User.
func (c *UserClient) QuerySellerProducts(u *User) *SellerProductQuery {
	query := &SellerProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(sellerproduct.Table, sellerproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SellerProductsTable, user.SellerProductsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarts queries the carts edge of a User.
func (c *UserClient) QueryCarts(u *User) *CartQuery {
	query := &CartQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(cart.Table, cart.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CartsTable, user.CartsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserLocations queries the user_locations edge of a User.
func (c *UserClient) QueryUserLocations(u *User) *UserLocationQuery {
	query := &UserLocationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userlocation.Table, userlocation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserLocationsTable, user.UserLocationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckouts queries the checkouts edge of a User.
func (c *UserClient) QueryCheckouts(u *User) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CheckoutsTable, user.CheckoutsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCheckoutProducts queries the checkout_products edge of a User.
func (c *UserClient) QueryCheckoutProducts(u *User) *CheckoutProductQuery {
	query := &CheckoutProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(checkoutproduct.Table, checkoutproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CheckoutProductsTable, user.CheckoutProductsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySellerCheckoutProducts queries the seller_checkout_products edge of a User.
func (c *UserClient) QuerySellerCheckoutProducts(u *User) *CheckoutProductQuery {
	query := &CheckoutProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(checkoutproduct.Table, checkoutproduct.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SellerCheckoutProductsTable, user.SellerCheckoutProductsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovedShops queries the approved_shops edge of a User.
func (c *UserClient) QueryApprovedShops(u *User) *SellerShopQuery {
	query := &SellerShopQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(sellershop.Table, sellershop.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ApprovedShopsTable, user.ApprovedShopsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserLocationClient is a client for the UserLocation schema.
type UserLocationClient struct {
	config
}

// NewUserLocationClient returns a client for the UserLocation from the given config.
func NewUserLocationClient(c config) *UserLocationClient {
	return &UserLocationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userlocation.Hooks(f(g(h())))`.
func (c *UserLocationClient) Use(hooks ...Hook) {
	c.hooks.UserLocation = append(c.hooks.UserLocation, hooks...)
}

// Create returns a create builder for UserLocation.
func (c *UserLocationClient) Create() *UserLocationCreate {
	mutation := newUserLocationMutation(c.config, OpCreate)
	return &UserLocationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserLocation entities.
func (c *UserLocationClient) CreateBulk(builders ...*UserLocationCreate) *UserLocationCreateBulk {
	return &UserLocationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserLocation.
func (c *UserLocationClient) Update() *UserLocationUpdate {
	mutation := newUserLocationMutation(c.config, OpUpdate)
	return &UserLocationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserLocationClient) UpdateOne(ul *UserLocation) *UserLocationUpdateOne {
	mutation := newUserLocationMutation(c.config, OpUpdateOne, withUserLocation(ul))
	return &UserLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserLocationClient) UpdateOneID(id int) *UserLocationUpdateOne {
	mutation := newUserLocationMutation(c.config, OpUpdateOne, withUserLocationID(id))
	return &UserLocationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserLocation.
func (c *UserLocationClient) Delete() *UserLocationDelete {
	mutation := newUserLocationMutation(c.config, OpDelete)
	return &UserLocationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserLocationClient) DeleteOne(ul *UserLocation) *UserLocationDeleteOne {
	return c.DeleteOneID(ul.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserLocationClient) DeleteOneID(id int) *UserLocationDeleteOne {
	builder := c.Delete().Where(userlocation.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserLocationDeleteOne{builder}
}

// Query returns a query builder for UserLocation.
func (c *UserLocationClient) Query() *UserLocationQuery {
	return &UserLocationQuery{
		config: c.config,
	}
}

// Get returns a UserLocation entity by its id.
func (c *UserLocationClient) Get(ctx context.Context, id int) (*UserLocation, error) {
	return c.Query().Where(userlocation.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserLocationClient) GetX(ctx context.Context, id int) *UserLocation {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGetUser queries the get_user edge of a UserLocation.
func (c *UserLocationClient) QueryGetUser(ul *UserLocation) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlocation.Table, userlocation.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, userlocation.GetUserTable, userlocation.GetUserColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserLocations queries the user_locations edge of a UserLocation.
func (c *UserLocationClient) QueryUserLocations(ul *UserLocation) *CheckoutQuery {
	query := &CheckoutQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userlocation.Table, userlocation.FieldID, id),
			sqlgraph.To(checkout.Table, checkout.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userlocation.UserLocationsTable, userlocation.UserLocationsColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserLocationClient) Hooks() []Hook {
	return c.hooks.UserLocation
}
