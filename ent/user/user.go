// Code generated by entc, DO NOT EDIT.

package user

import (
	"time"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldAdmin holds the string denoting the admin field in the database.
	FieldAdmin = "admin"
	// FieldStaff holds the string denoting the staff field in the database.
	FieldStaff = "staff"
	// FieldSeller holds the string denoting the seller field in the database.
	FieldSeller = "seller"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldAdminUserName holds the string denoting the admin_user_name field in the database.
	FieldAdminUserName = "admin_user_name"
	// FieldAdminUserToken holds the string denoting the admin_user_token field in the database.
	FieldAdminUserToken = "admin_user_token"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeSellerRequests holds the string denoting the seller_requests edge name in mutations.
	EdgeSellerRequests = "seller_requests"
	// EdgeSellerShops holds the string denoting the seller_shops edge name in mutations.
	EdgeSellerShops = "seller_shops"
	// EdgeSellerProducts holds the string denoting the seller_products edge name in mutations.
	EdgeSellerProducts = "seller_products"
	// EdgeCarts holds the string denoting the carts edge name in mutations.
	EdgeCarts = "carts"
	// EdgeUserLocations holds the string denoting the user_locations edge name in mutations.
	EdgeUserLocations = "user_locations"
	// EdgeCheckouts holds the string denoting the checkouts edge name in mutations.
	EdgeCheckouts = "checkouts"
	// EdgeCheckoutProducts holds the string denoting the checkout_products edge name in mutations.
	EdgeCheckoutProducts = "checkout_products"
	// EdgeSellerCheckoutProducts holds the string denoting the seller_checkout_products edge name in mutations.
	EdgeSellerCheckoutProducts = "seller_checkout_products"
	// EdgeApprovedShops holds the string denoting the approved_shops edge name in mutations.
	EdgeApprovedShops = "approved_shops"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SellerRequestsTable is the table that holds the seller_requests relation/edge.
	SellerRequestsTable = "seller_requests"
	// SellerRequestsInverseTable is the table name for the SellerRequest entity.
	// It exists in this package in order to avoid circular dependency with the "sellerrequest" package.
	SellerRequestsInverseTable = "seller_requests"
	// SellerRequestsColumn is the table column denoting the seller_requests relation/edge.
	SellerRequestsColumn = "user_seller_requests"
	// SellerShopsTable is the table that holds the seller_shops relation/edge.
	SellerShopsTable = "seller_shops"
	// SellerShopsInverseTable is the table name for the SellerShop entity.
	// It exists in this package in order to avoid circular dependency with the "sellershop" package.
	SellerShopsInverseTable = "seller_shops"
	// SellerShopsColumn is the table column denoting the seller_shops relation/edge.
	SellerShopsColumn = "user_seller_shops"
	// SellerProductsTable is the table that holds the seller_products relation/edge.
	SellerProductsTable = "seller_products"
	// SellerProductsInverseTable is the table name for the SellerProduct entity.
	// It exists in this package in order to avoid circular dependency with the "sellerproduct" package.
	SellerProductsInverseTable = "seller_products"
	// SellerProductsColumn is the table column denoting the seller_products relation/edge.
	SellerProductsColumn = "user_seller_products"
	// CartsTable is the table that holds the carts relation/edge.
	CartsTable = "carts"
	// CartsInverseTable is the table name for the Cart entity.
	// It exists in this package in order to avoid circular dependency with the "cart" package.
	CartsInverseTable = "carts"
	// CartsColumn is the table column denoting the carts relation/edge.
	CartsColumn = "user_carts"
	// UserLocationsTable is the table that holds the user_locations relation/edge.
	UserLocationsTable = "user_locations"
	// UserLocationsInverseTable is the table name for the UserLocation entity.
	// It exists in this package in order to avoid circular dependency with the "userlocation" package.
	UserLocationsInverseTable = "user_locations"
	// UserLocationsColumn is the table column denoting the user_locations relation/edge.
	UserLocationsColumn = "user_user_locations"
	// CheckoutsTable is the table that holds the checkouts relation/edge.
	CheckoutsTable = "checkouts"
	// CheckoutsInverseTable is the table name for the Checkout entity.
	// It exists in this package in order to avoid circular dependency with the "checkout" package.
	CheckoutsInverseTable = "checkouts"
	// CheckoutsColumn is the table column denoting the checkouts relation/edge.
	CheckoutsColumn = "user_checkouts"
	// CheckoutProductsTable is the table that holds the checkout_products relation/edge.
	CheckoutProductsTable = "checkout_products"
	// CheckoutProductsInverseTable is the table name for the CheckoutProduct entity.
	// It exists in this package in order to avoid circular dependency with the "checkoutproduct" package.
	CheckoutProductsInverseTable = "checkout_products"
	// CheckoutProductsColumn is the table column denoting the checkout_products relation/edge.
	CheckoutProductsColumn = "user_checkout_products"
	// SellerCheckoutProductsTable is the table that holds the seller_checkout_products relation/edge.
	SellerCheckoutProductsTable = "checkout_products"
	// SellerCheckoutProductsInverseTable is the table name for the CheckoutProduct entity.
	// It exists in this package in order to avoid circular dependency with the "checkoutproduct" package.
	SellerCheckoutProductsInverseTable = "checkout_products"
	// SellerCheckoutProductsColumn is the table column denoting the seller_checkout_products relation/edge.
	SellerCheckoutProductsColumn = "user_seller_checkout_products"
	// ApprovedShopsTable is the table that holds the approved_shops relation/edge.
	ApprovedShopsTable = "seller_shops"
	// ApprovedShopsInverseTable is the table name for the SellerShop entity.
	// It exists in this package in order to avoid circular dependency with the "sellershop" package.
	ApprovedShopsInverseTable = "seller_shops"
	// ApprovedShopsColumn is the table column denoting the approved_shops relation/edge.
	ApprovedShopsColumn = "user_approved_shops"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPhoneNumber,
	FieldPassword,
	FieldAdmin,
	FieldStaff,
	FieldSeller,
	FieldActive,
	FieldAdminUserName,
	FieldAdminUserToken,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PhoneNumberValidator is a validator for the "phone_number" field. It is called by the builders before save.
	PhoneNumberValidator func(string) error
	// DefaultAdmin holds the default value on creation for the "admin" field.
	DefaultAdmin bool
	// DefaultStaff holds the default value on creation for the "staff" field.
	DefaultStaff bool
	// DefaultSeller holds the default value on creation for the "seller" field.
	DefaultSeller bool
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
