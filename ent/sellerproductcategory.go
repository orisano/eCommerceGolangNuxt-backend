// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/category"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductcategory"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SellerProductCategory is the model entity for the SellerProductCategory schema.
type SellerProductCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SellerProductCategoryQuery when eager-loading is set.
	Edges                                    SellerProductCategoryEdges `json:"edges"`
	category_product_categories              *int
	seller_product_seller_product_categories *int
}

// SellerProductCategoryEdges holds the relations/edges for other nodes in the graph.
type SellerProductCategoryEdges struct {
	// SellerProduct holds the value of the seller_product edge.
	SellerProduct *SellerProduct `json:"seller_product,omitempty"`
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SellerProductOrErr returns the SellerProduct value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SellerProductCategoryEdges) SellerProductOrErr() (*SellerProduct, error) {
	if e.loadedTypes[0] {
		if e.SellerProduct == nil {
			// The edge seller_product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sellerproduct.Label}
		}
		return e.SellerProduct, nil
	}
	return nil, &NotLoadedError{edge: "seller_product"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SellerProductCategoryEdges) CategoryOrErr() (*Category, error) {
	if e.loadedTypes[1] {
		if e.Category == nil {
			// The edge category was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SellerProductCategory) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sellerproductcategory.FieldID:
			values[i] = new(sql.NullInt64)
		case sellerproductcategory.FieldCreatedAt, sellerproductcategory.FieldUpdatedAt, sellerproductcategory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case sellerproductcategory.ForeignKeys[0]: // category_product_categories
			values[i] = new(sql.NullInt64)
		case sellerproductcategory.ForeignKeys[1]: // seller_product_seller_product_categories
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SellerProductCategory", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SellerProductCategory fields.
func (spc *SellerProductCategory) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sellerproductcategory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			spc.ID = int(value.Int64)
		case sellerproductcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				spc.CreatedAt = value.Time
			}
		case sellerproductcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				spc.UpdatedAt = value.Time
			}
		case sellerproductcategory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				spc.DeletedAt = new(time.Time)
				*spc.DeletedAt = value.Time
			}
		case sellerproductcategory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field category_product_categories", value)
			} else if value.Valid {
				spc.category_product_categories = new(int)
				*spc.category_product_categories = int(value.Int64)
			}
		case sellerproductcategory.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field seller_product_seller_product_categories", value)
			} else if value.Valid {
				spc.seller_product_seller_product_categories = new(int)
				*spc.seller_product_seller_product_categories = int(value.Int64)
			}
		}
	}
	return nil
}

// QuerySellerProduct queries the "seller_product" edge of the SellerProductCategory entity.
func (spc *SellerProductCategory) QuerySellerProduct() *SellerProductQuery {
	return (&SellerProductCategoryClient{config: spc.config}).QuerySellerProduct(spc)
}

// QueryCategory queries the "category" edge of the SellerProductCategory entity.
func (spc *SellerProductCategory) QueryCategory() *CategoryQuery {
	return (&SellerProductCategoryClient{config: spc.config}).QueryCategory(spc)
}

// Update returns a builder for updating this SellerProductCategory.
// Note that you need to call SellerProductCategory.Unwrap() before calling this method if this SellerProductCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (spc *SellerProductCategory) Update() *SellerProductCategoryUpdateOne {
	return (&SellerProductCategoryClient{config: spc.config}).UpdateOne(spc)
}

// Unwrap unwraps the SellerProductCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (spc *SellerProductCategory) Unwrap() *SellerProductCategory {
	tx, ok := spc.config.driver.(*txDriver)
	if !ok {
		panic("ent: SellerProductCategory is not a transactional entity")
	}
	spc.config.driver = tx.drv
	return spc
}

// String implements the fmt.Stringer.
func (spc *SellerProductCategory) String() string {
	var builder strings.Builder
	builder.WriteString("SellerProductCategory(")
	builder.WriteString(fmt.Sprintf("id=%v", spc.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(spc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(spc.UpdatedAt.Format(time.ANSIC))
	if v := spc.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SellerProductCategories is a parsable slice of SellerProductCategory.
type SellerProductCategories []*SellerProductCategory

func (spc SellerProductCategories) config(cfg config) {
	for _i := range spc {
		spc[_i].config = cfg
	}
}
