// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/predicate"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellershop"
	"bongo/ent/sellershopproduct"
	"bongo/ent/user"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerShopUpdate is the builder for updating SellerShop entities.
type SellerShopUpdate struct {
	config
	hooks    []Hook
	mutation *SellerShopMutation
}

// Where appends a list predicates to the SellerShopUpdate builder.
func (ssu *SellerShopUpdate) Where(ps ...predicate.SellerShop) *SellerShopUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetName sets the "name" field.
func (ssu *SellerShopUpdate) SetName(s string) *SellerShopUpdate {
	ssu.mutation.SetName(s)
	return ssu
}

// SetSlug sets the "slug" field.
func (ssu *SellerShopUpdate) SetSlug(s string) *SellerShopUpdate {
	ssu.mutation.SetSlug(s)
	return ssu
}

// SetContactNumber sets the "contact_number" field.
func (ssu *SellerShopUpdate) SetContactNumber(s string) *SellerShopUpdate {
	ssu.mutation.SetContactNumber(s)
	return ssu
}

// SetBanner sets the "banner" field.
func (ssu *SellerShopUpdate) SetBanner(s string) *SellerShopUpdate {
	ssu.mutation.SetBanner(s)
	return ssu
}

// SetShopCategoryID sets the "shop_category_id" field.
func (ssu *SellerShopUpdate) SetShopCategoryID(s string) *SellerShopUpdate {
	ssu.mutation.SetShopCategoryID(s)
	return ssu
}

// SetShopCategory sets the "shop_category" field.
func (ssu *SellerShopUpdate) SetShopCategory(s string) *SellerShopUpdate {
	ssu.mutation.SetShopCategory(s)
	return ssu
}

// SetBusinessLocation sets the "business_location" field.
func (ssu *SellerShopUpdate) SetBusinessLocation(s string) *SellerShopUpdate {
	ssu.mutation.SetBusinessLocation(s)
	return ssu
}

// SetTaxID sets the "tax_id" field.
func (ssu *SellerShopUpdate) SetTaxID(s string) *SellerShopUpdate {
	ssu.mutation.SetTaxID(s)
	return ssu
}

// SetActive sets the "active" field.
func (ssu *SellerShopUpdate) SetActive(b bool) *SellerShopUpdate {
	ssu.mutation.SetActive(b)
	return ssu
}

// SetUpdatedAt sets the "updated_at" field.
func (ssu *SellerShopUpdate) SetUpdatedAt(t time.Time) *SellerShopUpdate {
	ssu.mutation.SetUpdatedAt(t)
	return ssu
}

// SetDeletedAt sets the "deleted_at" field.
func (ssu *SellerShopUpdate) SetDeletedAt(t time.Time) *SellerShopUpdate {
	ssu.mutation.SetDeletedAt(t)
	return ssu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ssu *SellerShopUpdate) SetNillableDeletedAt(t *time.Time) *SellerShopUpdate {
	if t != nil {
		ssu.SetDeletedAt(*t)
	}
	return ssu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ssu *SellerShopUpdate) ClearDeletedAt() *SellerShopUpdate {
	ssu.mutation.ClearDeletedAt()
	return ssu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ssu *SellerShopUpdate) SetUserID(id int) *SellerShopUpdate {
	ssu.mutation.SetUserID(id)
	return ssu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ssu *SellerShopUpdate) SetNillableUserID(id *int) *SellerShopUpdate {
	if id != nil {
		ssu = ssu.SetUserID(*id)
	}
	return ssu
}

// SetUser sets the "user" edge to the User entity.
func (ssu *SellerShopUpdate) SetUser(u *User) *SellerShopUpdate {
	return ssu.SetUserID(u.ID)
}

// SetAdminID sets the "admin" edge to the User entity by ID.
func (ssu *SellerShopUpdate) SetAdminID(id int) *SellerShopUpdate {
	ssu.mutation.SetAdminID(id)
	return ssu
}

// SetNillableAdminID sets the "admin" edge to the User entity by ID if the given value is not nil.
func (ssu *SellerShopUpdate) SetNillableAdminID(id *int) *SellerShopUpdate {
	if id != nil {
		ssu = ssu.SetAdminID(*id)
	}
	return ssu
}

// SetAdmin sets the "admin" edge to the User entity.
func (ssu *SellerShopUpdate) SetAdmin(u *User) *SellerShopUpdate {
	return ssu.SetAdminID(u.ID)
}

// AddSellerProductIDs adds the "seller_products" edge to the SellerProduct entity by IDs.
func (ssu *SellerShopUpdate) AddSellerProductIDs(ids ...int) *SellerShopUpdate {
	ssu.mutation.AddSellerProductIDs(ids...)
	return ssu
}

// AddSellerProducts adds the "seller_products" edges to the SellerProduct entity.
func (ssu *SellerShopUpdate) AddSellerProducts(s ...*SellerProduct) *SellerShopUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.AddSellerProductIDs(ids...)
}

// AddSellerShopProductIDs adds the "seller_shop_products" edge to the SellerShopProduct entity by IDs.
func (ssu *SellerShopUpdate) AddSellerShopProductIDs(ids ...int) *SellerShopUpdate {
	ssu.mutation.AddSellerShopProductIDs(ids...)
	return ssu
}

// AddSellerShopProducts adds the "seller_shop_products" edges to the SellerShopProduct entity.
func (ssu *SellerShopUpdate) AddSellerShopProducts(s ...*SellerShopProduct) *SellerShopUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.AddSellerShopProductIDs(ids...)
}

// Mutation returns the SellerShopMutation object of the builder.
func (ssu *SellerShopUpdate) Mutation() *SellerShopMutation {
	return ssu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ssu *SellerShopUpdate) ClearUser() *SellerShopUpdate {
	ssu.mutation.ClearUser()
	return ssu
}

// ClearAdmin clears the "admin" edge to the User entity.
func (ssu *SellerShopUpdate) ClearAdmin() *SellerShopUpdate {
	ssu.mutation.ClearAdmin()
	return ssu
}

// ClearSellerProducts clears all "seller_products" edges to the SellerProduct entity.
func (ssu *SellerShopUpdate) ClearSellerProducts() *SellerShopUpdate {
	ssu.mutation.ClearSellerProducts()
	return ssu
}

// RemoveSellerProductIDs removes the "seller_products" edge to SellerProduct entities by IDs.
func (ssu *SellerShopUpdate) RemoveSellerProductIDs(ids ...int) *SellerShopUpdate {
	ssu.mutation.RemoveSellerProductIDs(ids...)
	return ssu
}

// RemoveSellerProducts removes "seller_products" edges to SellerProduct entities.
func (ssu *SellerShopUpdate) RemoveSellerProducts(s ...*SellerProduct) *SellerShopUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.RemoveSellerProductIDs(ids...)
}

// ClearSellerShopProducts clears all "seller_shop_products" edges to the SellerShopProduct entity.
func (ssu *SellerShopUpdate) ClearSellerShopProducts() *SellerShopUpdate {
	ssu.mutation.ClearSellerShopProducts()
	return ssu
}

// RemoveSellerShopProductIDs removes the "seller_shop_products" edge to SellerShopProduct entities by IDs.
func (ssu *SellerShopUpdate) RemoveSellerShopProductIDs(ids ...int) *SellerShopUpdate {
	ssu.mutation.RemoveSellerShopProductIDs(ids...)
	return ssu
}

// RemoveSellerShopProducts removes "seller_shop_products" edges to SellerShopProduct entities.
func (ssu *SellerShopUpdate) RemoveSellerShopProducts(s ...*SellerShopProduct) *SellerShopUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssu.RemoveSellerShopProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SellerShopUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ssu.defaults()
	if len(ssu.hooks) == 0 {
		if err = ssu.check(); err != nil {
			return 0, err
		}
		affected, err = ssu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerShopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ssu.check(); err != nil {
				return 0, err
			}
			ssu.mutation = mutation
			affected, err = ssu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ssu.hooks) - 1; i >= 0; i-- {
			if ssu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SellerShopUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SellerShopUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SellerShopUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssu *SellerShopUpdate) defaults() {
	if _, ok := ssu.mutation.UpdatedAt(); !ok {
		v := sellershop.UpdateDefaultUpdatedAt()
		ssu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssu *SellerShopUpdate) check() error {
	if v, ok := ssu.mutation.ContactNumber(); ok {
		if err := sellershop.ContactNumberValidator(v); err != nil {
			return &ValidationError{Name: "contact_number", err: fmt.Errorf("ent: validator failed for field \"contact_number\": %w", err)}
		}
	}
	return nil
}

func (ssu *SellerShopUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellershop.Table,
			Columns: sellershop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellershop.FieldID,
			},
		},
	}
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldName,
		})
	}
	if value, ok := ssu.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldSlug,
		})
	}
	if value, ok := ssu.mutation.ContactNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldContactNumber,
		})
	}
	if value, ok := ssu.mutation.Banner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldBanner,
		})
	}
	if value, ok := ssu.mutation.ShopCategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldShopCategoryID,
		})
	}
	if value, ok := ssu.mutation.ShopCategory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldShopCategory,
		})
	}
	if value, ok := ssu.mutation.BusinessLocation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldBusinessLocation,
		})
	}
	if value, ok := ssu.mutation.TaxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldTaxID,
		})
	}
	if value, ok := ssu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sellershop.FieldActive,
		})
	}
	if value, ok := ssu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershop.FieldUpdatedAt,
		})
	}
	if value, ok := ssu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershop.FieldDeletedAt,
		})
	}
	if ssu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellershop.FieldDeletedAt,
		})
	}
	if ssu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershop.UserTable,
			Columns: []string{sellershop.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershop.UserTable,
			Columns: []string{sellershop.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershop.AdminTable,
			Columns: []string{sellershop.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershop.AdminTable,
			Columns: []string{sellershop.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.SellerProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerProductsTable,
			Columns: []string{sellershop.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RemovedSellerProductsIDs(); len(nodes) > 0 && !ssu.mutation.SellerProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerProductsTable,
			Columns: []string{sellershop.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SellerProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerProductsTable,
			Columns: []string{sellershop.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.SellerShopProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerShopProductsTable,
			Columns: []string{sellershop.SellerShopProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershopproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.RemovedSellerShopProductsIDs(); len(nodes) > 0 && !ssu.mutation.SellerShopProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerShopProductsTable,
			Columns: []string{sellershop.SellerShopProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershopproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.SellerShopProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerShopProductsTable,
			Columns: []string{sellershop.SellerShopProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershopproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellershop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SellerShopUpdateOne is the builder for updating a single SellerShop entity.
type SellerShopUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SellerShopMutation
}

// SetName sets the "name" field.
func (ssuo *SellerShopUpdateOne) SetName(s string) *SellerShopUpdateOne {
	ssuo.mutation.SetName(s)
	return ssuo
}

// SetSlug sets the "slug" field.
func (ssuo *SellerShopUpdateOne) SetSlug(s string) *SellerShopUpdateOne {
	ssuo.mutation.SetSlug(s)
	return ssuo
}

// SetContactNumber sets the "contact_number" field.
func (ssuo *SellerShopUpdateOne) SetContactNumber(s string) *SellerShopUpdateOne {
	ssuo.mutation.SetContactNumber(s)
	return ssuo
}

// SetBanner sets the "banner" field.
func (ssuo *SellerShopUpdateOne) SetBanner(s string) *SellerShopUpdateOne {
	ssuo.mutation.SetBanner(s)
	return ssuo
}

// SetShopCategoryID sets the "shop_category_id" field.
func (ssuo *SellerShopUpdateOne) SetShopCategoryID(s string) *SellerShopUpdateOne {
	ssuo.mutation.SetShopCategoryID(s)
	return ssuo
}

// SetShopCategory sets the "shop_category" field.
func (ssuo *SellerShopUpdateOne) SetShopCategory(s string) *SellerShopUpdateOne {
	ssuo.mutation.SetShopCategory(s)
	return ssuo
}

// SetBusinessLocation sets the "business_location" field.
func (ssuo *SellerShopUpdateOne) SetBusinessLocation(s string) *SellerShopUpdateOne {
	ssuo.mutation.SetBusinessLocation(s)
	return ssuo
}

// SetTaxID sets the "tax_id" field.
func (ssuo *SellerShopUpdateOne) SetTaxID(s string) *SellerShopUpdateOne {
	ssuo.mutation.SetTaxID(s)
	return ssuo
}

// SetActive sets the "active" field.
func (ssuo *SellerShopUpdateOne) SetActive(b bool) *SellerShopUpdateOne {
	ssuo.mutation.SetActive(b)
	return ssuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ssuo *SellerShopUpdateOne) SetUpdatedAt(t time.Time) *SellerShopUpdateOne {
	ssuo.mutation.SetUpdatedAt(t)
	return ssuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ssuo *SellerShopUpdateOne) SetDeletedAt(t time.Time) *SellerShopUpdateOne {
	ssuo.mutation.SetDeletedAt(t)
	return ssuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ssuo *SellerShopUpdateOne) SetNillableDeletedAt(t *time.Time) *SellerShopUpdateOne {
	if t != nil {
		ssuo.SetDeletedAt(*t)
	}
	return ssuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ssuo *SellerShopUpdateOne) ClearDeletedAt() *SellerShopUpdateOne {
	ssuo.mutation.ClearDeletedAt()
	return ssuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (ssuo *SellerShopUpdateOne) SetUserID(id int) *SellerShopUpdateOne {
	ssuo.mutation.SetUserID(id)
	return ssuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (ssuo *SellerShopUpdateOne) SetNillableUserID(id *int) *SellerShopUpdateOne {
	if id != nil {
		ssuo = ssuo.SetUserID(*id)
	}
	return ssuo
}

// SetUser sets the "user" edge to the User entity.
func (ssuo *SellerShopUpdateOne) SetUser(u *User) *SellerShopUpdateOne {
	return ssuo.SetUserID(u.ID)
}

// SetAdminID sets the "admin" edge to the User entity by ID.
func (ssuo *SellerShopUpdateOne) SetAdminID(id int) *SellerShopUpdateOne {
	ssuo.mutation.SetAdminID(id)
	return ssuo
}

// SetNillableAdminID sets the "admin" edge to the User entity by ID if the given value is not nil.
func (ssuo *SellerShopUpdateOne) SetNillableAdminID(id *int) *SellerShopUpdateOne {
	if id != nil {
		ssuo = ssuo.SetAdminID(*id)
	}
	return ssuo
}

// SetAdmin sets the "admin" edge to the User entity.
func (ssuo *SellerShopUpdateOne) SetAdmin(u *User) *SellerShopUpdateOne {
	return ssuo.SetAdminID(u.ID)
}

// AddSellerProductIDs adds the "seller_products" edge to the SellerProduct entity by IDs.
func (ssuo *SellerShopUpdateOne) AddSellerProductIDs(ids ...int) *SellerShopUpdateOne {
	ssuo.mutation.AddSellerProductIDs(ids...)
	return ssuo
}

// AddSellerProducts adds the "seller_products" edges to the SellerProduct entity.
func (ssuo *SellerShopUpdateOne) AddSellerProducts(s ...*SellerProduct) *SellerShopUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.AddSellerProductIDs(ids...)
}

// AddSellerShopProductIDs adds the "seller_shop_products" edge to the SellerShopProduct entity by IDs.
func (ssuo *SellerShopUpdateOne) AddSellerShopProductIDs(ids ...int) *SellerShopUpdateOne {
	ssuo.mutation.AddSellerShopProductIDs(ids...)
	return ssuo
}

// AddSellerShopProducts adds the "seller_shop_products" edges to the SellerShopProduct entity.
func (ssuo *SellerShopUpdateOne) AddSellerShopProducts(s ...*SellerShopProduct) *SellerShopUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.AddSellerShopProductIDs(ids...)
}

// Mutation returns the SellerShopMutation object of the builder.
func (ssuo *SellerShopUpdateOne) Mutation() *SellerShopMutation {
	return ssuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (ssuo *SellerShopUpdateOne) ClearUser() *SellerShopUpdateOne {
	ssuo.mutation.ClearUser()
	return ssuo
}

// ClearAdmin clears the "admin" edge to the User entity.
func (ssuo *SellerShopUpdateOne) ClearAdmin() *SellerShopUpdateOne {
	ssuo.mutation.ClearAdmin()
	return ssuo
}

// ClearSellerProducts clears all "seller_products" edges to the SellerProduct entity.
func (ssuo *SellerShopUpdateOne) ClearSellerProducts() *SellerShopUpdateOne {
	ssuo.mutation.ClearSellerProducts()
	return ssuo
}

// RemoveSellerProductIDs removes the "seller_products" edge to SellerProduct entities by IDs.
func (ssuo *SellerShopUpdateOne) RemoveSellerProductIDs(ids ...int) *SellerShopUpdateOne {
	ssuo.mutation.RemoveSellerProductIDs(ids...)
	return ssuo
}

// RemoveSellerProducts removes "seller_products" edges to SellerProduct entities.
func (ssuo *SellerShopUpdateOne) RemoveSellerProducts(s ...*SellerProduct) *SellerShopUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.RemoveSellerProductIDs(ids...)
}

// ClearSellerShopProducts clears all "seller_shop_products" edges to the SellerShopProduct entity.
func (ssuo *SellerShopUpdateOne) ClearSellerShopProducts() *SellerShopUpdateOne {
	ssuo.mutation.ClearSellerShopProducts()
	return ssuo
}

// RemoveSellerShopProductIDs removes the "seller_shop_products" edge to SellerShopProduct entities by IDs.
func (ssuo *SellerShopUpdateOne) RemoveSellerShopProductIDs(ids ...int) *SellerShopUpdateOne {
	ssuo.mutation.RemoveSellerShopProductIDs(ids...)
	return ssuo
}

// RemoveSellerShopProducts removes "seller_shop_products" edges to SellerShopProduct entities.
func (ssuo *SellerShopUpdateOne) RemoveSellerShopProducts(s ...*SellerShopProduct) *SellerShopUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ssuo.RemoveSellerShopProductIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SellerShopUpdateOne) Select(field string, fields ...string) *SellerShopUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SellerShop entity.
func (ssuo *SellerShopUpdateOne) Save(ctx context.Context) (*SellerShop, error) {
	var (
		err  error
		node *SellerShop
	)
	ssuo.defaults()
	if len(ssuo.hooks) == 0 {
		if err = ssuo.check(); err != nil {
			return nil, err
		}
		node, err = ssuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerShopMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ssuo.check(); err != nil {
				return nil, err
			}
			ssuo.mutation = mutation
			node, err = ssuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ssuo.hooks) - 1; i >= 0; i-- {
			if ssuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SellerShopUpdateOne) SaveX(ctx context.Context) *SellerShop {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SellerShopUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SellerShopUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ssuo *SellerShopUpdateOne) defaults() {
	if _, ok := ssuo.mutation.UpdatedAt(); !ok {
		v := sellershop.UpdateDefaultUpdatedAt()
		ssuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssuo *SellerShopUpdateOne) check() error {
	if v, ok := ssuo.mutation.ContactNumber(); ok {
		if err := sellershop.ContactNumberValidator(v); err != nil {
			return &ValidationError{Name: "contact_number", err: fmt.Errorf("ent: validator failed for field \"contact_number\": %w", err)}
		}
	}
	return nil
}

func (ssuo *SellerShopUpdateOne) sqlSave(ctx context.Context) (_node *SellerShop, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellershop.Table,
			Columns: sellershop.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellershop.FieldID,
			},
		},
	}
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SellerShop.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sellershop.FieldID)
		for _, f := range fields {
			if !sellershop.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sellershop.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldName,
		})
	}
	if value, ok := ssuo.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldSlug,
		})
	}
	if value, ok := ssuo.mutation.ContactNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldContactNumber,
		})
	}
	if value, ok := ssuo.mutation.Banner(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldBanner,
		})
	}
	if value, ok := ssuo.mutation.ShopCategoryID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldShopCategoryID,
		})
	}
	if value, ok := ssuo.mutation.ShopCategory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldShopCategory,
		})
	}
	if value, ok := ssuo.mutation.BusinessLocation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldBusinessLocation,
		})
	}
	if value, ok := ssuo.mutation.TaxID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellershop.FieldTaxID,
		})
	}
	if value, ok := ssuo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sellershop.FieldActive,
		})
	}
	if value, ok := ssuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershop.FieldUpdatedAt,
		})
	}
	if value, ok := ssuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellershop.FieldDeletedAt,
		})
	}
	if ssuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellershop.FieldDeletedAt,
		})
	}
	if ssuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershop.UserTable,
			Columns: []string{sellershop.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershop.UserTable,
			Columns: []string{sellershop.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.AdminCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershop.AdminTable,
			Columns: []string{sellershop.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.AdminIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellershop.AdminTable,
			Columns: []string{sellershop.AdminColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.SellerProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerProductsTable,
			Columns: []string{sellershop.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RemovedSellerProductsIDs(); len(nodes) > 0 && !ssuo.mutation.SellerProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerProductsTable,
			Columns: []string{sellershop.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SellerProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerProductsTable,
			Columns: []string{sellershop.SellerProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.SellerShopProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerShopProductsTable,
			Columns: []string{sellershop.SellerShopProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershopproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.RemovedSellerShopProductsIDs(); len(nodes) > 0 && !ssuo.mutation.SellerShopProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerShopProductsTable,
			Columns: []string{sellershop.SellerShopProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershopproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.SellerShopProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellershop.SellerShopProductsTable,
			Columns: []string{sellershop.SellerShopProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershopproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SellerShop{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellershop.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
