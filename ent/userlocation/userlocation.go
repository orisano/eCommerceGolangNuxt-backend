// Code generated by entc, DO NOT EDIT.

package userlocation

import (
	"time"
)

const (
	// Label holds the string label denoting the userlocation type in the database.
	Label = "user_location"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldArea holds the string denoting the area field in the database.
	FieldArea = "area"
	// FieldStreet holds the string denoting the street field in the database.
	FieldStreet = "street"
	// FieldHouse holds the string denoting the house field in the database.
	FieldHouse = "house"
	// FieldPostOffice holds the string denoting the post_office field in the database.
	FieldPostOffice = "post_office"
	// FieldPostCode holds the string denoting the post_code field in the database.
	FieldPostCode = "post_code"
	// FieldPoliceStation holds the string denoting the police_station field in the database.
	FieldPoliceStation = "police_station"
	// FieldCity holds the string denoting the city field in the database.
	FieldCity = "city"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeGetUser holds the string denoting the get_user edge name in mutations.
	EdgeGetUser = "get_user"
	// EdgeUserLocations holds the string denoting the user_locations edge name in mutations.
	EdgeUserLocations = "user_locations"
	// Table holds the table name of the userlocation in the database.
	Table = "user_locations"
	// GetUserTable is the table that holds the get_user relation/edge.
	GetUserTable = "user_locations"
	// GetUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	GetUserInverseTable = "users"
	// GetUserColumn is the table column denoting the get_user relation/edge.
	GetUserColumn = "user_user_locations"
	// UserLocationsTable is the table that holds the user_locations relation/edge.
	UserLocationsTable = "checkouts"
	// UserLocationsInverseTable is the table name for the Checkout entity.
	// It exists in this package in order to avoid circular dependency with the "checkout" package.
	UserLocationsInverseTable = "checkouts"
	// UserLocationsColumn is the table column denoting the user_locations relation/edge.
	UserLocationsColumn = "user_location_user_locations"
)

// Columns holds all SQL columns for userlocation fields.
var Columns = []string{
	FieldID,
	FieldArea,
	FieldStreet,
	FieldHouse,
	FieldPostOffice,
	FieldPostCode,
	FieldPoliceStation,
	FieldCity,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "user_locations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_user_locations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
