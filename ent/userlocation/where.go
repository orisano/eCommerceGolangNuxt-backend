// Code generated by entc, DO NOT EDIT.

package userlocation

import (
	"bongo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Area applies equality check predicate on the "area" field. It's identical to AreaEQ.
func Area(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArea), v))
	})
}

// Street applies equality check predicate on the "street" field. It's identical to StreetEQ.
func Street(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreet), v))
	})
}

// House applies equality check predicate on the "house" field. It's identical to HouseEQ.
func House(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHouse), v))
	})
}

// PostOffice applies equality check predicate on the "post_office" field. It's identical to PostOfficeEQ.
func PostOffice(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostOffice), v))
	})
}

// PostCode applies equality check predicate on the "post_code" field. It's identical to PostCodeEQ.
func PostCode(v int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostCode), v))
	})
}

// PoliceStation applies equality check predicate on the "police_station" field. It's identical to PoliceStationEQ.
func PoliceStation(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoliceStation), v))
	})
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// AreaEQ applies the EQ predicate on the "area" field.
func AreaEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArea), v))
	})
}

// AreaNEQ applies the NEQ predicate on the "area" field.
func AreaNEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArea), v))
	})
}

// AreaIn applies the In predicate on the "area" field.
func AreaIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldArea), v...))
	})
}

// AreaNotIn applies the NotIn predicate on the "area" field.
func AreaNotIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldArea), v...))
	})
}

// AreaGT applies the GT predicate on the "area" field.
func AreaGT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArea), v))
	})
}

// AreaGTE applies the GTE predicate on the "area" field.
func AreaGTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArea), v))
	})
}

// AreaLT applies the LT predicate on the "area" field.
func AreaLT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArea), v))
	})
}

// AreaLTE applies the LTE predicate on the "area" field.
func AreaLTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArea), v))
	})
}

// AreaContains applies the Contains predicate on the "area" field.
func AreaContains(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArea), v))
	})
}

// AreaHasPrefix applies the HasPrefix predicate on the "area" field.
func AreaHasPrefix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArea), v))
	})
}

// AreaHasSuffix applies the HasSuffix predicate on the "area" field.
func AreaHasSuffix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArea), v))
	})
}

// AreaEqualFold applies the EqualFold predicate on the "area" field.
func AreaEqualFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArea), v))
	})
}

// AreaContainsFold applies the ContainsFold predicate on the "area" field.
func AreaContainsFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArea), v))
	})
}

// StreetEQ applies the EQ predicate on the "street" field.
func StreetEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreet), v))
	})
}

// StreetNEQ applies the NEQ predicate on the "street" field.
func StreetNEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStreet), v))
	})
}

// StreetIn applies the In predicate on the "street" field.
func StreetIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStreet), v...))
	})
}

// StreetNotIn applies the NotIn predicate on the "street" field.
func StreetNotIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStreet), v...))
	})
}

// StreetGT applies the GT predicate on the "street" field.
func StreetGT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStreet), v))
	})
}

// StreetGTE applies the GTE predicate on the "street" field.
func StreetGTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStreet), v))
	})
}

// StreetLT applies the LT predicate on the "street" field.
func StreetLT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStreet), v))
	})
}

// StreetLTE applies the LTE predicate on the "street" field.
func StreetLTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStreet), v))
	})
}

// StreetContains applies the Contains predicate on the "street" field.
func StreetContains(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStreet), v))
	})
}

// StreetHasPrefix applies the HasPrefix predicate on the "street" field.
func StreetHasPrefix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStreet), v))
	})
}

// StreetHasSuffix applies the HasSuffix predicate on the "street" field.
func StreetHasSuffix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStreet), v))
	})
}

// StreetEqualFold applies the EqualFold predicate on the "street" field.
func StreetEqualFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStreet), v))
	})
}

// StreetContainsFold applies the ContainsFold predicate on the "street" field.
func StreetContainsFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStreet), v))
	})
}

// HouseEQ applies the EQ predicate on the "house" field.
func HouseEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHouse), v))
	})
}

// HouseNEQ applies the NEQ predicate on the "house" field.
func HouseNEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHouse), v))
	})
}

// HouseIn applies the In predicate on the "house" field.
func HouseIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHouse), v...))
	})
}

// HouseNotIn applies the NotIn predicate on the "house" field.
func HouseNotIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHouse), v...))
	})
}

// HouseGT applies the GT predicate on the "house" field.
func HouseGT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHouse), v))
	})
}

// HouseGTE applies the GTE predicate on the "house" field.
func HouseGTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHouse), v))
	})
}

// HouseLT applies the LT predicate on the "house" field.
func HouseLT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHouse), v))
	})
}

// HouseLTE applies the LTE predicate on the "house" field.
func HouseLTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHouse), v))
	})
}

// HouseContains applies the Contains predicate on the "house" field.
func HouseContains(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHouse), v))
	})
}

// HouseHasPrefix applies the HasPrefix predicate on the "house" field.
func HouseHasPrefix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHouse), v))
	})
}

// HouseHasSuffix applies the HasSuffix predicate on the "house" field.
func HouseHasSuffix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHouse), v))
	})
}

// HouseEqualFold applies the EqualFold predicate on the "house" field.
func HouseEqualFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHouse), v))
	})
}

// HouseContainsFold applies the ContainsFold predicate on the "house" field.
func HouseContainsFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHouse), v))
	})
}

// PostOfficeEQ applies the EQ predicate on the "post_office" field.
func PostOfficeEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostOffice), v))
	})
}

// PostOfficeNEQ applies the NEQ predicate on the "post_office" field.
func PostOfficeNEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostOffice), v))
	})
}

// PostOfficeIn applies the In predicate on the "post_office" field.
func PostOfficeIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPostOffice), v...))
	})
}

// PostOfficeNotIn applies the NotIn predicate on the "post_office" field.
func PostOfficeNotIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPostOffice), v...))
	})
}

// PostOfficeGT applies the GT predicate on the "post_office" field.
func PostOfficeGT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPostOffice), v))
	})
}

// PostOfficeGTE applies the GTE predicate on the "post_office" field.
func PostOfficeGTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPostOffice), v))
	})
}

// PostOfficeLT applies the LT predicate on the "post_office" field.
func PostOfficeLT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPostOffice), v))
	})
}

// PostOfficeLTE applies the LTE predicate on the "post_office" field.
func PostOfficeLTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPostOffice), v))
	})
}

// PostOfficeContains applies the Contains predicate on the "post_office" field.
func PostOfficeContains(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPostOffice), v))
	})
}

// PostOfficeHasPrefix applies the HasPrefix predicate on the "post_office" field.
func PostOfficeHasPrefix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPostOffice), v))
	})
}

// PostOfficeHasSuffix applies the HasSuffix predicate on the "post_office" field.
func PostOfficeHasSuffix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPostOffice), v))
	})
}

// PostOfficeEqualFold applies the EqualFold predicate on the "post_office" field.
func PostOfficeEqualFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPostOffice), v))
	})
}

// PostOfficeContainsFold applies the ContainsFold predicate on the "post_office" field.
func PostOfficeContainsFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPostOffice), v))
	})
}

// PostCodeEQ applies the EQ predicate on the "post_code" field.
func PostCodeEQ(v int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPostCode), v))
	})
}

// PostCodeNEQ applies the NEQ predicate on the "post_code" field.
func PostCodeNEQ(v int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPostCode), v))
	})
}

// PostCodeIn applies the In predicate on the "post_code" field.
func PostCodeIn(vs ...int) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPostCode), v...))
	})
}

// PostCodeNotIn applies the NotIn predicate on the "post_code" field.
func PostCodeNotIn(vs ...int) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPostCode), v...))
	})
}

// PostCodeGT applies the GT predicate on the "post_code" field.
func PostCodeGT(v int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPostCode), v))
	})
}

// PostCodeGTE applies the GTE predicate on the "post_code" field.
func PostCodeGTE(v int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPostCode), v))
	})
}

// PostCodeLT applies the LT predicate on the "post_code" field.
func PostCodeLT(v int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPostCode), v))
	})
}

// PostCodeLTE applies the LTE predicate on the "post_code" field.
func PostCodeLTE(v int) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPostCode), v))
	})
}

// PoliceStationEQ applies the EQ predicate on the "police_station" field.
func PoliceStationEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPoliceStation), v))
	})
}

// PoliceStationNEQ applies the NEQ predicate on the "police_station" field.
func PoliceStationNEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPoliceStation), v))
	})
}

// PoliceStationIn applies the In predicate on the "police_station" field.
func PoliceStationIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPoliceStation), v...))
	})
}

// PoliceStationNotIn applies the NotIn predicate on the "police_station" field.
func PoliceStationNotIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPoliceStation), v...))
	})
}

// PoliceStationGT applies the GT predicate on the "police_station" field.
func PoliceStationGT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPoliceStation), v))
	})
}

// PoliceStationGTE applies the GTE predicate on the "police_station" field.
func PoliceStationGTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPoliceStation), v))
	})
}

// PoliceStationLT applies the LT predicate on the "police_station" field.
func PoliceStationLT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPoliceStation), v))
	})
}

// PoliceStationLTE applies the LTE predicate on the "police_station" field.
func PoliceStationLTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPoliceStation), v))
	})
}

// PoliceStationContains applies the Contains predicate on the "police_station" field.
func PoliceStationContains(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPoliceStation), v))
	})
}

// PoliceStationHasPrefix applies the HasPrefix predicate on the "police_station" field.
func PoliceStationHasPrefix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPoliceStation), v))
	})
}

// PoliceStationHasSuffix applies the HasSuffix predicate on the "police_station" field.
func PoliceStationHasSuffix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPoliceStation), v))
	})
}

// PoliceStationEqualFold applies the EqualFold predicate on the "police_station" field.
func PoliceStationEqualFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPoliceStation), v))
	})
}

// PoliceStationContainsFold applies the ContainsFold predicate on the "police_station" field.
func PoliceStationContainsFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPoliceStation), v))
	})
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCity), v))
	})
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCity), v))
	})
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCity), v...))
	})
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCity), v...))
	})
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCity), v))
	})
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCity), v))
	})
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCity), v))
	})
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCity), v))
	})
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCity), v))
	})
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCity), v))
	})
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCity), v))
	})
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCity), v))
	})
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCity), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UserLocation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserLocation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// HasGetUser applies the HasEdge predicate on the "get_user" edge.
func HasGetUser() predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GetUserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GetUserTable, GetUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGetUserWith applies the HasEdge predicate on the "get_user" edge with a given conditions (other predicates).
func HasGetUserWith(preds ...predicate.User) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GetUserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GetUserTable, GetUserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUserLocations applies the HasEdge predicate on the "user_locations" edge.
func HasUserLocations() predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserLocationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserLocationsTable, UserLocationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserLocationsWith applies the HasEdge predicate on the "user_locations" edge with a given conditions (other predicates).
func HasUserLocationsWith(preds ...predicate.Checkout) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserLocationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UserLocationsTable, UserLocationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserLocation) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserLocation) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserLocation) predicate.UserLocation {
	return predicate.UserLocation(func(s *sql.Selector) {
		p(s.Not())
	})
}
