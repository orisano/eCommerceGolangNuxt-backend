// Code generated by entc, DO NOT EDIT.

package sellerproduct

import (
	"time"
)

const (
	// Label holds the string label denoting the sellerproduct type in the database.
	Label = "seller_product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldSellingPrice holds the string denoting the selling_price field in the database.
	FieldSellingPrice = "selling_price"
	// FieldProductPrice holds the string denoting the product_price field in the database.
	FieldProductPrice = "product_price"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldActive holds the string denoting the active field in the database.
	FieldActive = "active"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldOfferPrice holds the string denoting the offer_price field in the database.
	FieldOfferPrice = "offer_price"
	// FieldOfferPriceStart holds the string denoting the offer_price_start field in the database.
	FieldOfferPriceStart = "offer_price_start"
	// FieldOfferPriceEnd holds the string denoting the offer_price_end field in the database.
	FieldOfferPriceEnd = "offer_price_end"
	// FieldNextStock holds the string denoting the next_stock field in the database.
	FieldNextStock = "next_stock"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeBrand holds the string denoting the brand edge name in mutations.
	EdgeBrand = "brand"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeSellerProductImages holds the string denoting the seller_product_images edge name in mutations.
	EdgeSellerProductImages = "seller_product_images"
	// EdgeCategories holds the string denoting the categories edge name in mutations.
	EdgeCategories = "categories"
	// EdgeShop holds the string denoting the shop edge name in mutations.
	EdgeShop = "shop"
	// EdgeCartProducts holds the string denoting the cart_products edge name in mutations.
	EdgeCartProducts = "cart_products"
	// EdgeCheckoutProducts holds the string denoting the checkout_products edge name in mutations.
	EdgeCheckoutProducts = "checkout_products"
	// EdgeSellerProductVariations holds the string denoting the seller_product_variations edge name in mutations.
	EdgeSellerProductVariations = "seller_product_variations"
	// Table holds the table name of the sellerproduct in the database.
	Table = "seller_products"
	// BrandTable is the table that holds the brand relation/edge.
	BrandTable = "seller_products"
	// BrandInverseTable is the table name for the Brand entity.
	// It exists in this package in order to avoid circular dependency with the "brand" package.
	BrandInverseTable = "brands"
	// BrandColumn is the table column denoting the brand relation/edge.
	BrandColumn = "brand_brand"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "seller_products"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_seller_products"
	// SellerProductImagesTable is the table that holds the seller_product_images relation/edge.
	SellerProductImagesTable = "seller_product_images"
	// SellerProductImagesInverseTable is the table name for the SellerProductImage entity.
	// It exists in this package in order to avoid circular dependency with the "sellerproductimage" package.
	SellerProductImagesInverseTable = "seller_product_images"
	// SellerProductImagesColumn is the table column denoting the seller_product_images relation/edge.
	SellerProductImagesColumn = "seller_product_seller_product_images"
	// CategoriesTable is the table that holds the categories relation/edge. The primary key declared below.
	CategoriesTable = "category_seller_products"
	// CategoriesInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoriesInverseTable = "categories"
	// ShopTable is the table that holds the shop relation/edge.
	ShopTable = "seller_products"
	// ShopInverseTable is the table name for the SellerShop entity.
	// It exists in this package in order to avoid circular dependency with the "sellershop" package.
	ShopInverseTable = "seller_shops"
	// ShopColumn is the table column denoting the shop relation/edge.
	ShopColumn = "seller_shop_seller_products"
	// CartProductsTable is the table that holds the cart_products relation/edge.
	CartProductsTable = "cart_products"
	// CartProductsInverseTable is the table name for the CartProduct entity.
	// It exists in this package in order to avoid circular dependency with the "cartproduct" package.
	CartProductsInverseTable = "cart_products"
	// CartProductsColumn is the table column denoting the cart_products relation/edge.
	CartProductsColumn = "seller_product_cart_products"
	// CheckoutProductsTable is the table that holds the checkout_products relation/edge.
	CheckoutProductsTable = "checkout_products"
	// CheckoutProductsInverseTable is the table name for the CheckoutProduct entity.
	// It exists in this package in order to avoid circular dependency with the "checkoutproduct" package.
	CheckoutProductsInverseTable = "checkout_products"
	// CheckoutProductsColumn is the table column denoting the checkout_products relation/edge.
	CheckoutProductsColumn = "seller_product_checkout_products"
	// SellerProductVariationsTable is the table that holds the seller_product_variations relation/edge.
	SellerProductVariationsTable = "seller_product_variations"
	// SellerProductVariationsInverseTable is the table name for the SellerProductVariation entity.
	// It exists in this package in order to avoid circular dependency with the "sellerproductvariation" package.
	SellerProductVariationsInverseTable = "seller_product_variations"
	// SellerProductVariationsColumn is the table column denoting the seller_product_variations relation/edge.
	SellerProductVariationsColumn = "seller_product_seller_product_variations"
)

// Columns holds all SQL columns for sellerproduct fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSlug,
	FieldSellingPrice,
	FieldProductPrice,
	FieldQuantity,
	FieldActive,
	FieldDescription,
	FieldOfferPrice,
	FieldOfferPriceStart,
	FieldOfferPriceEnd,
	FieldNextStock,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "seller_products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"brand_brand",
	"seller_shop_seller_products",
	"user_seller_products",
}

var (
	// CategoriesPrimaryKey and CategoriesColumn2 are the table columns denoting the
	// primary key for the categories relation (M2M).
	CategoriesPrimaryKey = []string{"category_id", "seller_product_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultActive holds the default value on creation for the "active" field.
	DefaultActive bool
	// DefaultOfferPrice holds the default value on creation for the "offer_price" field.
	DefaultOfferPrice int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
