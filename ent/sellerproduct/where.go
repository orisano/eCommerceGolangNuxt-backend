// Code generated by entc, DO NOT EDIT.

package sellerproduct

import (
	"bongo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlug), v))
	})
}

// SellingPrice applies equality check predicate on the "selling_price" field. It's identical to SellingPriceEQ.
func SellingPrice(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSellingPrice), v))
	})
}

// ProductPrice applies equality check predicate on the "product_price" field. It's identical to ProductPriceEQ.
func ProductPrice(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPrice), v))
	})
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// Active applies equality check predicate on the "active" field. It's identical to ActiveEQ.
func Active(v bool) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// OfferPrice applies equality check predicate on the "offer_price" field. It's identical to OfferPriceEQ.
func OfferPrice(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfferPrice), v))
	})
}

// OfferPriceStart applies equality check predicate on the "offer_price_start" field. It's identical to OfferPriceStartEQ.
func OfferPriceStart(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfferPriceStart), v))
	})
}

// OfferPriceEnd applies equality check predicate on the "offer_price_end" field. It's identical to OfferPriceEndEQ.
func OfferPriceEnd(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfferPriceEnd), v))
	})
}

// NextStock applies equality check predicate on the "next_stock" field. It's identical to NextStockEQ.
func NextStock(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextStock), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlug), v))
	})
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSlug), v))
	})
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSlug), v...))
	})
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSlug), v...))
	})
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSlug), v))
	})
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSlug), v))
	})
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSlug), v))
	})
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSlug), v))
	})
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSlug), v))
	})
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSlug), v))
	})
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSlug), v))
	})
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSlug), v))
	})
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSlug), v))
	})
}

// SellingPriceEQ applies the EQ predicate on the "selling_price" field.
func SellingPriceEQ(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceNEQ applies the NEQ predicate on the "selling_price" field.
func SellingPriceNEQ(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceIn applies the In predicate on the "selling_price" field.
func SellingPriceIn(vs ...decimal.Decimal) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSellingPrice), v...))
	})
}

// SellingPriceNotIn applies the NotIn predicate on the "selling_price" field.
func SellingPriceNotIn(vs ...decimal.Decimal) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSellingPrice), v...))
	})
}

// SellingPriceGT applies the GT predicate on the "selling_price" field.
func SellingPriceGT(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceGTE applies the GTE predicate on the "selling_price" field.
func SellingPriceGTE(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceLT applies the LT predicate on the "selling_price" field.
func SellingPriceLT(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceLTE applies the LTE predicate on the "selling_price" field.
func SellingPriceLTE(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSellingPrice), v))
	})
}

// ProductPriceEQ applies the EQ predicate on the "product_price" field.
func ProductPriceEQ(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPrice), v))
	})
}

// ProductPriceNEQ applies the NEQ predicate on the "product_price" field.
func ProductPriceNEQ(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPrice), v))
	})
}

// ProductPriceIn applies the In predicate on the "product_price" field.
func ProductPriceIn(vs ...decimal.Decimal) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductPrice), v...))
	})
}

// ProductPriceNotIn applies the NotIn predicate on the "product_price" field.
func ProductPriceNotIn(vs ...decimal.Decimal) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductPrice), v...))
	})
}

// ProductPriceGT applies the GT predicate on the "product_price" field.
func ProductPriceGT(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPrice), v))
	})
}

// ProductPriceGTE applies the GTE predicate on the "product_price" field.
func ProductPriceGTE(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPrice), v))
	})
}

// ProductPriceLT applies the LT predicate on the "product_price" field.
func ProductPriceLT(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPrice), v))
	})
}

// ProductPriceLTE applies the LTE predicate on the "product_price" field.
func ProductPriceLTE(v decimal.Decimal) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPrice), v))
	})
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantity), v))
	})
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantity), v...))
	})
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantity), v...))
	})
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantity), v))
	})
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantity), v))
	})
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantity), v))
	})
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantity), v))
	})
}

// ActiveEQ applies the EQ predicate on the "active" field.
func ActiveEQ(v bool) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActive), v))
	})
}

// ActiveNEQ applies the NEQ predicate on the "active" field.
func ActiveNEQ(v bool) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActive), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDescription)))
	})
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDescription)))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// OfferPriceEQ applies the EQ predicate on the "offer_price" field.
func OfferPriceEQ(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfferPrice), v))
	})
}

// OfferPriceNEQ applies the NEQ predicate on the "offer_price" field.
func OfferPriceNEQ(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOfferPrice), v))
	})
}

// OfferPriceIn applies the In predicate on the "offer_price" field.
func OfferPriceIn(vs ...int) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOfferPrice), v...))
	})
}

// OfferPriceNotIn applies the NotIn predicate on the "offer_price" field.
func OfferPriceNotIn(vs ...int) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOfferPrice), v...))
	})
}

// OfferPriceGT applies the GT predicate on the "offer_price" field.
func OfferPriceGT(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOfferPrice), v))
	})
}

// OfferPriceGTE applies the GTE predicate on the "offer_price" field.
func OfferPriceGTE(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOfferPrice), v))
	})
}

// OfferPriceLT applies the LT predicate on the "offer_price" field.
func OfferPriceLT(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOfferPrice), v))
	})
}

// OfferPriceLTE applies the LTE predicate on the "offer_price" field.
func OfferPriceLTE(v int) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOfferPrice), v))
	})
}

// OfferPriceIsNil applies the IsNil predicate on the "offer_price" field.
func OfferPriceIsNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOfferPrice)))
	})
}

// OfferPriceNotNil applies the NotNil predicate on the "offer_price" field.
func OfferPriceNotNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOfferPrice)))
	})
}

// OfferPriceStartEQ applies the EQ predicate on the "offer_price_start" field.
func OfferPriceStartEQ(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfferPriceStart), v))
	})
}

// OfferPriceStartNEQ applies the NEQ predicate on the "offer_price_start" field.
func OfferPriceStartNEQ(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOfferPriceStart), v))
	})
}

// OfferPriceStartIn applies the In predicate on the "offer_price_start" field.
func OfferPriceStartIn(vs ...time.Time) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOfferPriceStart), v...))
	})
}

// OfferPriceStartNotIn applies the NotIn predicate on the "offer_price_start" field.
func OfferPriceStartNotIn(vs ...time.Time) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOfferPriceStart), v...))
	})
}

// OfferPriceStartGT applies the GT predicate on the "offer_price_start" field.
func OfferPriceStartGT(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOfferPriceStart), v))
	})
}

// OfferPriceStartGTE applies the GTE predicate on the "offer_price_start" field.
func OfferPriceStartGTE(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOfferPriceStart), v))
	})
}

// OfferPriceStartLT applies the LT predicate on the "offer_price_start" field.
func OfferPriceStartLT(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOfferPriceStart), v))
	})
}

// OfferPriceStartLTE applies the LTE predicate on the "offer_price_start" field.
func OfferPriceStartLTE(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOfferPriceStart), v))
	})
}

// OfferPriceStartIsNil applies the IsNil predicate on the "offer_price_start" field.
func OfferPriceStartIsNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOfferPriceStart)))
	})
}

// OfferPriceStartNotNil applies the NotNil predicate on the "offer_price_start" field.
func OfferPriceStartNotNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOfferPriceStart)))
	})
}

// OfferPriceEndEQ applies the EQ predicate on the "offer_price_end" field.
func OfferPriceEndEQ(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOfferPriceEnd), v))
	})
}

// OfferPriceEndNEQ applies the NEQ predicate on the "offer_price_end" field.
func OfferPriceEndNEQ(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOfferPriceEnd), v))
	})
}

// OfferPriceEndIn applies the In predicate on the "offer_price_end" field.
func OfferPriceEndIn(vs ...time.Time) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOfferPriceEnd), v...))
	})
}

// OfferPriceEndNotIn applies the NotIn predicate on the "offer_price_end" field.
func OfferPriceEndNotIn(vs ...time.Time) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOfferPriceEnd), v...))
	})
}

// OfferPriceEndGT applies the GT predicate on the "offer_price_end" field.
func OfferPriceEndGT(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOfferPriceEnd), v))
	})
}

// OfferPriceEndGTE applies the GTE predicate on the "offer_price_end" field.
func OfferPriceEndGTE(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOfferPriceEnd), v))
	})
}

// OfferPriceEndLT applies the LT predicate on the "offer_price_end" field.
func OfferPriceEndLT(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOfferPriceEnd), v))
	})
}

// OfferPriceEndLTE applies the LTE predicate on the "offer_price_end" field.
func OfferPriceEndLTE(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOfferPriceEnd), v))
	})
}

// OfferPriceEndIsNil applies the IsNil predicate on the "offer_price_end" field.
func OfferPriceEndIsNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOfferPriceEnd)))
	})
}

// OfferPriceEndNotNil applies the NotNil predicate on the "offer_price_end" field.
func OfferPriceEndNotNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOfferPriceEnd)))
	})
}

// NextStockEQ applies the EQ predicate on the "next_stock" field.
func NextStockEQ(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextStock), v))
	})
}

// NextStockNEQ applies the NEQ predicate on the "next_stock" field.
func NextStockNEQ(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNextStock), v))
	})
}

// NextStockIn applies the In predicate on the "next_stock" field.
func NextStockIn(vs ...string) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNextStock), v...))
	})
}

// NextStockNotIn applies the NotIn predicate on the "next_stock" field.
func NextStockNotIn(vs ...string) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNextStock), v...))
	})
}

// NextStockGT applies the GT predicate on the "next_stock" field.
func NextStockGT(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNextStock), v))
	})
}

// NextStockGTE applies the GTE predicate on the "next_stock" field.
func NextStockGTE(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNextStock), v))
	})
}

// NextStockLT applies the LT predicate on the "next_stock" field.
func NextStockLT(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNextStock), v))
	})
}

// NextStockLTE applies the LTE predicate on the "next_stock" field.
func NextStockLTE(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNextStock), v))
	})
}

// NextStockContains applies the Contains predicate on the "next_stock" field.
func NextStockContains(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNextStock), v))
	})
}

// NextStockHasPrefix applies the HasPrefix predicate on the "next_stock" field.
func NextStockHasPrefix(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNextStock), v))
	})
}

// NextStockHasSuffix applies the HasSuffix predicate on the "next_stock" field.
func NextStockHasSuffix(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNextStock), v))
	})
}

// NextStockIsNil applies the IsNil predicate on the "next_stock" field.
func NextStockIsNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNextStock)))
	})
}

// NextStockNotNil applies the NotNil predicate on the "next_stock" field.
func NextStockNotNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNextStock)))
	})
}

// NextStockEqualFold applies the EqualFold predicate on the "next_stock" field.
func NextStockEqualFold(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNextStock), v))
	})
}

// NextStockContainsFold applies the ContainsFold predicate on the "next_stock" field.
func NextStockContainsFold(v string) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNextStock), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SellerProduct {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProduct(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// HasBrand applies the HasEdge predicate on the "brand" edge.
func HasBrand() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BrandTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBrandWith applies the HasEdge predicate on the "brand" edge with a given conditions (other predicates).
func HasBrandWith(preds ...predicate.Brand) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BrandInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BrandTable, BrandColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSellerProductImages applies the HasEdge predicate on the "seller_product_images" edge.
func HasSellerProductImages() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductImagesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerProductImagesTable, SellerProductImagesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSellerProductImagesWith applies the HasEdge predicate on the "seller_product_images" edge with a given conditions (other predicates).
func HasSellerProductImagesWith(preds ...predicate.SellerProductImage) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductImagesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerProductImagesTable, SellerProductImagesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSellerProductCategories applies the HasEdge predicate on the "seller_product_categories" edge.
func HasSellerProductCategories() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductCategoriesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerProductCategoriesTable, SellerProductCategoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSellerProductCategoriesWith applies the HasEdge predicate on the "seller_product_categories" edge with a given conditions (other predicates).
func HasSellerProductCategoriesWith(preds ...predicate.SellerProductCategory) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductCategoriesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerProductCategoriesTable, SellerProductCategoriesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCartProducts applies the HasEdge predicate on the "cart_products" edge.
func HasCartProducts() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CartProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CartProductsTable, CartProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCartProductsWith applies the HasEdge predicate on the "cart_products" edge with a given conditions (other predicates).
func HasCartProductsWith(preds ...predicate.CartProduct) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CartProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CartProductsTable, CartProductsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCheckoutProducts applies the HasEdge predicate on the "checkout_products" edge.
func HasCheckoutProducts() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CheckoutProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CheckoutProductsTable, CheckoutProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCheckoutProductsWith applies the HasEdge predicate on the "checkout_products" edge with a given conditions (other predicates).
func HasCheckoutProductsWith(preds ...predicate.CheckoutProduct) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CheckoutProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CheckoutProductsTable, CheckoutProductsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSellerProductVariations applies the HasEdge predicate on the "seller_product_variations" edge.
func HasSellerProductVariations() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductVariationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerProductVariationsTable, SellerProductVariationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSellerProductVariationsWith applies the HasEdge predicate on the "seller_product_variations" edge with a given conditions (other predicates).
func HasSellerProductVariationsWith(preds ...predicate.SellerProductVariation) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductVariationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerProductVariationsTable, SellerProductVariationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSellerShopProducts applies the HasEdge predicate on the "seller_shop_products" edge.
func HasSellerShopProducts() predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerShopProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerShopProductsTable, SellerShopProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSellerShopProductsWith applies the HasEdge predicate on the "seller_shop_products" edge with a given conditions (other predicates).
func HasSellerShopProductsWith(preds ...predicate.SellerShopProduct) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerShopProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerShopProductsTable, SellerShopProductsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SellerProduct) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SellerProduct) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SellerProduct) predicate.SellerProduct {
	return predicate.SellerProduct(func(s *sql.Selector) {
		p(s.Not())
	})
}
