// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/cart"
	"bongo/ent/cartproduct"
	"bongo/ent/predicate"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductvariation"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CartProductUpdate is the builder for updating CartProduct entities.
type CartProductUpdate struct {
	config
	hooks    []Hook
	mutation *CartProductMutation
}

// Where appends a list predicates to the CartProductUpdate builder.
func (cpu *CartProductUpdate) Where(ps ...predicate.CartProduct) *CartProductUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetQuantity sets the "quantity" field.
func (cpu *CartProductUpdate) SetQuantity(i int) *CartProductUpdate {
	cpu.mutation.ResetQuantity()
	cpu.mutation.SetQuantity(i)
	return cpu
}

// AddQuantity adds i to the "quantity" field.
func (cpu *CartProductUpdate) AddQuantity(i int) *CartProductUpdate {
	cpu.mutation.AddQuantity(i)
	return cpu
}

// SetUpdatedAt sets the "updated_at" field.
func (cpu *CartProductUpdate) SetUpdatedAt(t time.Time) *CartProductUpdate {
	cpu.mutation.SetUpdatedAt(t)
	return cpu
}

// SetDeletedAt sets the "deleted_at" field.
func (cpu *CartProductUpdate) SetDeletedAt(t time.Time) *CartProductUpdate {
	cpu.mutation.SetDeletedAt(t)
	return cpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cpu *CartProductUpdate) SetNillableDeletedAt(t *time.Time) *CartProductUpdate {
	if t != nil {
		cpu.SetDeletedAt(*t)
	}
	return cpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cpu *CartProductUpdate) ClearDeletedAt() *CartProductUpdate {
	cpu.mutation.ClearDeletedAt()
	return cpu
}

// SetSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID.
func (cpu *CartProductUpdate) SetSellerProductID(id int) *CartProductUpdate {
	cpu.mutation.SetSellerProductID(id)
	return cpu
}

// SetNillableSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID if the given value is not nil.
func (cpu *CartProductUpdate) SetNillableSellerProductID(id *int) *CartProductUpdate {
	if id != nil {
		cpu = cpu.SetSellerProductID(*id)
	}
	return cpu
}

// SetSellerProduct sets the "seller_product" edge to the SellerProduct entity.
func (cpu *CartProductUpdate) SetSellerProduct(s *SellerProduct) *CartProductUpdate {
	return cpu.SetSellerProductID(s.ID)
}

// SetCartID sets the "cart" edge to the Cart entity by ID.
func (cpu *CartProductUpdate) SetCartID(id int) *CartProductUpdate {
	cpu.mutation.SetCartID(id)
	return cpu
}

// SetNillableCartID sets the "cart" edge to the Cart entity by ID if the given value is not nil.
func (cpu *CartProductUpdate) SetNillableCartID(id *int) *CartProductUpdate {
	if id != nil {
		cpu = cpu.SetCartID(*id)
	}
	return cpu
}

// SetCart sets the "cart" edge to the Cart entity.
func (cpu *CartProductUpdate) SetCart(c *Cart) *CartProductUpdate {
	return cpu.SetCartID(c.ID)
}

// SetSellerProductVariationID sets the "seller_product_variation" edge to the SellerProductVariation entity by ID.
func (cpu *CartProductUpdate) SetSellerProductVariationID(id int) *CartProductUpdate {
	cpu.mutation.SetSellerProductVariationID(id)
	return cpu
}

// SetNillableSellerProductVariationID sets the "seller_product_variation" edge to the SellerProductVariation entity by ID if the given value is not nil.
func (cpu *CartProductUpdate) SetNillableSellerProductVariationID(id *int) *CartProductUpdate {
	if id != nil {
		cpu = cpu.SetSellerProductVariationID(*id)
	}
	return cpu
}

// SetSellerProductVariation sets the "seller_product_variation" edge to the SellerProductVariation entity.
func (cpu *CartProductUpdate) SetSellerProductVariation(s *SellerProductVariation) *CartProductUpdate {
	return cpu.SetSellerProductVariationID(s.ID)
}

// Mutation returns the CartProductMutation object of the builder.
func (cpu *CartProductUpdate) Mutation() *CartProductMutation {
	return cpu.mutation
}

// ClearSellerProduct clears the "seller_product" edge to the SellerProduct entity.
func (cpu *CartProductUpdate) ClearSellerProduct() *CartProductUpdate {
	cpu.mutation.ClearSellerProduct()
	return cpu
}

// ClearCart clears the "cart" edge to the Cart entity.
func (cpu *CartProductUpdate) ClearCart() *CartProductUpdate {
	cpu.mutation.ClearCart()
	return cpu
}

// ClearSellerProductVariation clears the "seller_product_variation" edge to the SellerProductVariation entity.
func (cpu *CartProductUpdate) ClearSellerProductVariation() *CartProductUpdate {
	cpu.mutation.ClearSellerProductVariation()
	return cpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *CartProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cpu.defaults()
	if len(cpu.hooks) == 0 {
		affected, err = cpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CartProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpu.mutation = mutation
			affected, err = cpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cpu.hooks) - 1; i >= 0; i-- {
			if cpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *CartProductUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *CartProductUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *CartProductUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpu *CartProductUpdate) defaults() {
	if _, ok := cpu.mutation.UpdatedAt(); !ok {
		v := cartproduct.UpdateDefaultUpdatedAt()
		cpu.mutation.SetUpdatedAt(v)
	}
}

func (cpu *CartProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cartproduct.Table,
			Columns: cartproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cartproduct.FieldID,
			},
		},
	}
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cartproduct.FieldQuantity,
		})
	}
	if value, ok := cpu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cartproduct.FieldQuantity,
		})
	}
	if value, ok := cpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cartproduct.FieldUpdatedAt,
		})
	}
	if value, ok := cpu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cartproduct.FieldDeletedAt,
		})
	}
	if cpu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: cartproduct.FieldDeletedAt,
		})
	}
	if cpu.mutation.SellerProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.SellerProductTable,
			Columns: []string{cartproduct.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.SellerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.SellerProductTable,
			Columns: []string{cartproduct.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.CartTable,
			Columns: []string{cartproduct.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.CartTable,
			Columns: []string{cartproduct.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.SellerProductVariationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.SellerProductVariationTable,
			Columns: []string{cartproduct.SellerProductVariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.SellerProductVariationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.SellerProductVariationTable,
			Columns: []string{cartproduct.SellerProductVariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CartProductUpdateOne is the builder for updating a single CartProduct entity.
type CartProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CartProductMutation
}

// SetQuantity sets the "quantity" field.
func (cpuo *CartProductUpdateOne) SetQuantity(i int) *CartProductUpdateOne {
	cpuo.mutation.ResetQuantity()
	cpuo.mutation.SetQuantity(i)
	return cpuo
}

// AddQuantity adds i to the "quantity" field.
func (cpuo *CartProductUpdateOne) AddQuantity(i int) *CartProductUpdateOne {
	cpuo.mutation.AddQuantity(i)
	return cpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cpuo *CartProductUpdateOne) SetUpdatedAt(t time.Time) *CartProductUpdateOne {
	cpuo.mutation.SetUpdatedAt(t)
	return cpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cpuo *CartProductUpdateOne) SetDeletedAt(t time.Time) *CartProductUpdateOne {
	cpuo.mutation.SetDeletedAt(t)
	return cpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cpuo *CartProductUpdateOne) SetNillableDeletedAt(t *time.Time) *CartProductUpdateOne {
	if t != nil {
		cpuo.SetDeletedAt(*t)
	}
	return cpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cpuo *CartProductUpdateOne) ClearDeletedAt() *CartProductUpdateOne {
	cpuo.mutation.ClearDeletedAt()
	return cpuo
}

// SetSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID.
func (cpuo *CartProductUpdateOne) SetSellerProductID(id int) *CartProductUpdateOne {
	cpuo.mutation.SetSellerProductID(id)
	return cpuo
}

// SetNillableSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID if the given value is not nil.
func (cpuo *CartProductUpdateOne) SetNillableSellerProductID(id *int) *CartProductUpdateOne {
	if id != nil {
		cpuo = cpuo.SetSellerProductID(*id)
	}
	return cpuo
}

// SetSellerProduct sets the "seller_product" edge to the SellerProduct entity.
func (cpuo *CartProductUpdateOne) SetSellerProduct(s *SellerProduct) *CartProductUpdateOne {
	return cpuo.SetSellerProductID(s.ID)
}

// SetCartID sets the "cart" edge to the Cart entity by ID.
func (cpuo *CartProductUpdateOne) SetCartID(id int) *CartProductUpdateOne {
	cpuo.mutation.SetCartID(id)
	return cpuo
}

// SetNillableCartID sets the "cart" edge to the Cart entity by ID if the given value is not nil.
func (cpuo *CartProductUpdateOne) SetNillableCartID(id *int) *CartProductUpdateOne {
	if id != nil {
		cpuo = cpuo.SetCartID(*id)
	}
	return cpuo
}

// SetCart sets the "cart" edge to the Cart entity.
func (cpuo *CartProductUpdateOne) SetCart(c *Cart) *CartProductUpdateOne {
	return cpuo.SetCartID(c.ID)
}

// SetSellerProductVariationID sets the "seller_product_variation" edge to the SellerProductVariation entity by ID.
func (cpuo *CartProductUpdateOne) SetSellerProductVariationID(id int) *CartProductUpdateOne {
	cpuo.mutation.SetSellerProductVariationID(id)
	return cpuo
}

// SetNillableSellerProductVariationID sets the "seller_product_variation" edge to the SellerProductVariation entity by ID if the given value is not nil.
func (cpuo *CartProductUpdateOne) SetNillableSellerProductVariationID(id *int) *CartProductUpdateOne {
	if id != nil {
		cpuo = cpuo.SetSellerProductVariationID(*id)
	}
	return cpuo
}

// SetSellerProductVariation sets the "seller_product_variation" edge to the SellerProductVariation entity.
func (cpuo *CartProductUpdateOne) SetSellerProductVariation(s *SellerProductVariation) *CartProductUpdateOne {
	return cpuo.SetSellerProductVariationID(s.ID)
}

// Mutation returns the CartProductMutation object of the builder.
func (cpuo *CartProductUpdateOne) Mutation() *CartProductMutation {
	return cpuo.mutation
}

// ClearSellerProduct clears the "seller_product" edge to the SellerProduct entity.
func (cpuo *CartProductUpdateOne) ClearSellerProduct() *CartProductUpdateOne {
	cpuo.mutation.ClearSellerProduct()
	return cpuo
}

// ClearCart clears the "cart" edge to the Cart entity.
func (cpuo *CartProductUpdateOne) ClearCart() *CartProductUpdateOne {
	cpuo.mutation.ClearCart()
	return cpuo
}

// ClearSellerProductVariation clears the "seller_product_variation" edge to the SellerProductVariation entity.
func (cpuo *CartProductUpdateOne) ClearSellerProductVariation() *CartProductUpdateOne {
	cpuo.mutation.ClearSellerProductVariation()
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *CartProductUpdateOne) Select(field string, fields ...string) *CartProductUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated CartProduct entity.
func (cpuo *CartProductUpdateOne) Save(ctx context.Context) (*CartProduct, error) {
	var (
		err  error
		node *CartProduct
	)
	cpuo.defaults()
	if len(cpuo.hooks) == 0 {
		node, err = cpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CartProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cpuo.mutation = mutation
			node, err = cpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cpuo.hooks) - 1; i >= 0; i-- {
			if cpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *CartProductUpdateOne) SaveX(ctx context.Context) *CartProduct {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *CartProductUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *CartProductUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpuo *CartProductUpdateOne) defaults() {
	if _, ok := cpuo.mutation.UpdatedAt(); !ok {
		v := cartproduct.UpdateDefaultUpdatedAt()
		cpuo.mutation.SetUpdatedAt(v)
	}
}

func (cpuo *CartProductUpdateOne) sqlSave(ctx context.Context) (_node *CartProduct, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   cartproduct.Table,
			Columns: cartproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cartproduct.FieldID,
			},
		},
	}
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CartProduct.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cartproduct.FieldID)
		for _, f := range fields {
			if !cartproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cartproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cartproduct.FieldQuantity,
		})
	}
	if value, ok := cpuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: cartproduct.FieldQuantity,
		})
	}
	if value, ok := cpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cartproduct.FieldUpdatedAt,
		})
	}
	if value, ok := cpuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: cartproduct.FieldDeletedAt,
		})
	}
	if cpuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: cartproduct.FieldDeletedAt,
		})
	}
	if cpuo.mutation.SellerProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.SellerProductTable,
			Columns: []string{cartproduct.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.SellerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.SellerProductTable,
			Columns: []string{cartproduct.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.CartCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.CartTable,
			Columns: []string{cartproduct.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.CartIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.CartTable,
			Columns: []string{cartproduct.CartColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cart.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.SellerProductVariationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.SellerProductVariationTable,
			Columns: []string{cartproduct.SellerProductVariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.SellerProductVariationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   cartproduct.SellerProductVariationTable,
			Columns: []string{cartproduct.SellerProductVariationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CartProduct{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cartproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
