// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/cartproduct"
	"bongo/ent/checkoutproduct"
	"bongo/ent/predicate"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductvariation"
	"bongo/ent/sellerproductvariationvalues"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// SellerProductVariationUpdate is the builder for updating SellerProductVariation entities.
type SellerProductVariationUpdate struct {
	config
	hooks    []Hook
	mutation *SellerProductVariationMutation
}

// Where appends a list predicates to the SellerProductVariationUpdate builder.
func (spvu *SellerProductVariationUpdate) Where(ps ...predicate.SellerProductVariation) *SellerProductVariationUpdate {
	spvu.mutation.Where(ps...)
	return spvu
}

// SetProductPrice sets the "product_price" field.
func (spvu *SellerProductVariationUpdate) SetProductPrice(d decimal.Decimal) *SellerProductVariationUpdate {
	spvu.mutation.ResetProductPrice()
	spvu.mutation.SetProductPrice(d)
	return spvu
}

// AddProductPrice adds d to the "product_price" field.
func (spvu *SellerProductVariationUpdate) AddProductPrice(d decimal.Decimal) *SellerProductVariationUpdate {
	spvu.mutation.AddProductPrice(d)
	return spvu
}

// SetSellingPrice sets the "selling_price" field.
func (spvu *SellerProductVariationUpdate) SetSellingPrice(d decimal.Decimal) *SellerProductVariationUpdate {
	spvu.mutation.ResetSellingPrice()
	spvu.mutation.SetSellingPrice(d)
	return spvu
}

// AddSellingPrice adds d to the "selling_price" field.
func (spvu *SellerProductVariationUpdate) AddSellingPrice(d decimal.Decimal) *SellerProductVariationUpdate {
	spvu.mutation.AddSellingPrice(d)
	return spvu
}

// SetQuantity sets the "quantity" field.
func (spvu *SellerProductVariationUpdate) SetQuantity(i int) *SellerProductVariationUpdate {
	spvu.mutation.ResetQuantity()
	spvu.mutation.SetQuantity(i)
	return spvu
}

// AddQuantity adds i to the "quantity" field.
func (spvu *SellerProductVariationUpdate) AddQuantity(i int) *SellerProductVariationUpdate {
	spvu.mutation.AddQuantity(i)
	return spvu
}

// SetImage sets the "image" field.
func (spvu *SellerProductVariationUpdate) SetImage(s string) *SellerProductVariationUpdate {
	spvu.mutation.SetImage(s)
	return spvu
}

// SetUpdatedAt sets the "updated_at" field.
func (spvu *SellerProductVariationUpdate) SetUpdatedAt(t time.Time) *SellerProductVariationUpdate {
	spvu.mutation.SetUpdatedAt(t)
	return spvu
}

// SetDeletedAt sets the "deleted_at" field.
func (spvu *SellerProductVariationUpdate) SetDeletedAt(t time.Time) *SellerProductVariationUpdate {
	spvu.mutation.SetDeletedAt(t)
	return spvu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spvu *SellerProductVariationUpdate) SetNillableDeletedAt(t *time.Time) *SellerProductVariationUpdate {
	if t != nil {
		spvu.SetDeletedAt(*t)
	}
	return spvu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spvu *SellerProductVariationUpdate) ClearDeletedAt() *SellerProductVariationUpdate {
	spvu.mutation.ClearDeletedAt()
	return spvu
}

// SetSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID.
func (spvu *SellerProductVariationUpdate) SetSellerProductID(id int) *SellerProductVariationUpdate {
	spvu.mutation.SetSellerProductID(id)
	return spvu
}

// SetNillableSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID if the given value is not nil.
func (spvu *SellerProductVariationUpdate) SetNillableSellerProductID(id *int) *SellerProductVariationUpdate {
	if id != nil {
		spvu = spvu.SetSellerProductID(*id)
	}
	return spvu
}

// SetSellerProduct sets the "seller_product" edge to the SellerProduct entity.
func (spvu *SellerProductVariationUpdate) SetSellerProduct(s *SellerProduct) *SellerProductVariationUpdate {
	return spvu.SetSellerProductID(s.ID)
}

// AddSellerProductVariationValueIDs adds the "seller_product_variation_values" edge to the SellerProductVariationValues entity by IDs.
func (spvu *SellerProductVariationUpdate) AddSellerProductVariationValueIDs(ids ...int) *SellerProductVariationUpdate {
	spvu.mutation.AddSellerProductVariationValueIDs(ids...)
	return spvu
}

// AddSellerProductVariationValues adds the "seller_product_variation_values" edges to the SellerProductVariationValues entity.
func (spvu *SellerProductVariationUpdate) AddSellerProductVariationValues(s ...*SellerProductVariationValues) *SellerProductVariationUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spvu.AddSellerProductVariationValueIDs(ids...)
}

// AddCartProductIDs adds the "cart_products" edge to the CartProduct entity by IDs.
func (spvu *SellerProductVariationUpdate) AddCartProductIDs(ids ...int) *SellerProductVariationUpdate {
	spvu.mutation.AddCartProductIDs(ids...)
	return spvu
}

// AddCartProducts adds the "cart_products" edges to the CartProduct entity.
func (spvu *SellerProductVariationUpdate) AddCartProducts(c ...*CartProduct) *SellerProductVariationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spvu.AddCartProductIDs(ids...)
}

// AddCheckoutProductIDs adds the "checkout_products" edge to the CheckoutProduct entity by IDs.
func (spvu *SellerProductVariationUpdate) AddCheckoutProductIDs(ids ...int) *SellerProductVariationUpdate {
	spvu.mutation.AddCheckoutProductIDs(ids...)
	return spvu
}

// AddCheckoutProducts adds the "checkout_products" edges to the CheckoutProduct entity.
func (spvu *SellerProductVariationUpdate) AddCheckoutProducts(c ...*CheckoutProduct) *SellerProductVariationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spvu.AddCheckoutProductIDs(ids...)
}

// Mutation returns the SellerProductVariationMutation object of the builder.
func (spvu *SellerProductVariationUpdate) Mutation() *SellerProductVariationMutation {
	return spvu.mutation
}

// ClearSellerProduct clears the "seller_product" edge to the SellerProduct entity.
func (spvu *SellerProductVariationUpdate) ClearSellerProduct() *SellerProductVariationUpdate {
	spvu.mutation.ClearSellerProduct()
	return spvu
}

// ClearSellerProductVariationValues clears all "seller_product_variation_values" edges to the SellerProductVariationValues entity.
func (spvu *SellerProductVariationUpdate) ClearSellerProductVariationValues() *SellerProductVariationUpdate {
	spvu.mutation.ClearSellerProductVariationValues()
	return spvu
}

// RemoveSellerProductVariationValueIDs removes the "seller_product_variation_values" edge to SellerProductVariationValues entities by IDs.
func (spvu *SellerProductVariationUpdate) RemoveSellerProductVariationValueIDs(ids ...int) *SellerProductVariationUpdate {
	spvu.mutation.RemoveSellerProductVariationValueIDs(ids...)
	return spvu
}

// RemoveSellerProductVariationValues removes "seller_product_variation_values" edges to SellerProductVariationValues entities.
func (spvu *SellerProductVariationUpdate) RemoveSellerProductVariationValues(s ...*SellerProductVariationValues) *SellerProductVariationUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spvu.RemoveSellerProductVariationValueIDs(ids...)
}

// ClearCartProducts clears all "cart_products" edges to the CartProduct entity.
func (spvu *SellerProductVariationUpdate) ClearCartProducts() *SellerProductVariationUpdate {
	spvu.mutation.ClearCartProducts()
	return spvu
}

// RemoveCartProductIDs removes the "cart_products" edge to CartProduct entities by IDs.
func (spvu *SellerProductVariationUpdate) RemoveCartProductIDs(ids ...int) *SellerProductVariationUpdate {
	spvu.mutation.RemoveCartProductIDs(ids...)
	return spvu
}

// RemoveCartProducts removes "cart_products" edges to CartProduct entities.
func (spvu *SellerProductVariationUpdate) RemoveCartProducts(c ...*CartProduct) *SellerProductVariationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spvu.RemoveCartProductIDs(ids...)
}

// ClearCheckoutProducts clears all "checkout_products" edges to the CheckoutProduct entity.
func (spvu *SellerProductVariationUpdate) ClearCheckoutProducts() *SellerProductVariationUpdate {
	spvu.mutation.ClearCheckoutProducts()
	return spvu
}

// RemoveCheckoutProductIDs removes the "checkout_products" edge to CheckoutProduct entities by IDs.
func (spvu *SellerProductVariationUpdate) RemoveCheckoutProductIDs(ids ...int) *SellerProductVariationUpdate {
	spvu.mutation.RemoveCheckoutProductIDs(ids...)
	return spvu
}

// RemoveCheckoutProducts removes "checkout_products" edges to CheckoutProduct entities.
func (spvu *SellerProductVariationUpdate) RemoveCheckoutProducts(c ...*CheckoutProduct) *SellerProductVariationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spvu.RemoveCheckoutProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spvu *SellerProductVariationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	spvu.defaults()
	if len(spvu.hooks) == 0 {
		affected, err = spvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerProductVariationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spvu.mutation = mutation
			affected, err = spvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spvu.hooks) - 1; i >= 0; i-- {
			if spvu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spvu *SellerProductVariationUpdate) SaveX(ctx context.Context) int {
	affected, err := spvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spvu *SellerProductVariationUpdate) Exec(ctx context.Context) error {
	_, err := spvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvu *SellerProductVariationUpdate) ExecX(ctx context.Context) {
	if err := spvu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spvu *SellerProductVariationUpdate) defaults() {
	if _, ok := spvu.mutation.UpdatedAt(); !ok {
		v := sellerproductvariation.UpdateDefaultUpdatedAt()
		spvu.mutation.SetUpdatedAt(v)
	}
}

func (spvu *SellerProductVariationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellerproductvariation.Table,
			Columns: sellerproductvariation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproductvariation.FieldID,
			},
		},
	}
	if ps := spvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spvu.mutation.ProductPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproductvariation.FieldProductPrice,
		})
	}
	if value, ok := spvu.mutation.AddedProductPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproductvariation.FieldProductPrice,
		})
	}
	if value, ok := spvu.mutation.SellingPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproductvariation.FieldSellingPrice,
		})
	}
	if value, ok := spvu.mutation.AddedSellingPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproductvariation.FieldSellingPrice,
		})
	}
	if value, ok := spvu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproductvariation.FieldQuantity,
		})
	}
	if value, ok := spvu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproductvariation.FieldQuantity,
		})
	}
	if value, ok := spvu.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproductvariation.FieldImage,
		})
	}
	if value, ok := spvu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductvariation.FieldUpdatedAt,
		})
	}
	if value, ok := spvu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductvariation.FieldDeletedAt,
		})
	}
	if spvu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproductvariation.FieldDeletedAt,
		})
	}
	if spvu.mutation.SellerProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproductvariation.SellerProductTable,
			Columns: []string{sellerproductvariation.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvu.mutation.SellerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproductvariation.SellerProductTable,
			Columns: []string{sellerproductvariation.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spvu.mutation.SellerProductVariationValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.SellerProductVariationValuesTable,
			Columns: []string{sellerproductvariation.SellerProductVariationValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariationvalues.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvu.mutation.RemovedSellerProductVariationValuesIDs(); len(nodes) > 0 && !spvu.mutation.SellerProductVariationValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.SellerProductVariationValuesTable,
			Columns: []string{sellerproductvariation.SellerProductVariationValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariationvalues.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvu.mutation.SellerProductVariationValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.SellerProductVariationValuesTable,
			Columns: []string{sellerproductvariation.SellerProductVariationValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariationvalues.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spvu.mutation.CartProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CartProductsTable,
			Columns: []string{sellerproductvariation.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvu.mutation.RemovedCartProductsIDs(); len(nodes) > 0 && !spvu.mutation.CartProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CartProductsTable,
			Columns: []string{sellerproductvariation.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvu.mutation.CartProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CartProductsTable,
			Columns: []string{sellerproductvariation.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spvu.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CheckoutProductsTable,
			Columns: []string{sellerproductvariation.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvu.mutation.RemovedCheckoutProductsIDs(); len(nodes) > 0 && !spvu.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CheckoutProductsTable,
			Columns: []string{sellerproductvariation.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvu.mutation.CheckoutProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CheckoutProductsTable,
			Columns: []string{sellerproductvariation.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellerproductvariation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SellerProductVariationUpdateOne is the builder for updating a single SellerProductVariation entity.
type SellerProductVariationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SellerProductVariationMutation
}

// SetProductPrice sets the "product_price" field.
func (spvuo *SellerProductVariationUpdateOne) SetProductPrice(d decimal.Decimal) *SellerProductVariationUpdateOne {
	spvuo.mutation.ResetProductPrice()
	spvuo.mutation.SetProductPrice(d)
	return spvuo
}

// AddProductPrice adds d to the "product_price" field.
func (spvuo *SellerProductVariationUpdateOne) AddProductPrice(d decimal.Decimal) *SellerProductVariationUpdateOne {
	spvuo.mutation.AddProductPrice(d)
	return spvuo
}

// SetSellingPrice sets the "selling_price" field.
func (spvuo *SellerProductVariationUpdateOne) SetSellingPrice(d decimal.Decimal) *SellerProductVariationUpdateOne {
	spvuo.mutation.ResetSellingPrice()
	spvuo.mutation.SetSellingPrice(d)
	return spvuo
}

// AddSellingPrice adds d to the "selling_price" field.
func (spvuo *SellerProductVariationUpdateOne) AddSellingPrice(d decimal.Decimal) *SellerProductVariationUpdateOne {
	spvuo.mutation.AddSellingPrice(d)
	return spvuo
}

// SetQuantity sets the "quantity" field.
func (spvuo *SellerProductVariationUpdateOne) SetQuantity(i int) *SellerProductVariationUpdateOne {
	spvuo.mutation.ResetQuantity()
	spvuo.mutation.SetQuantity(i)
	return spvuo
}

// AddQuantity adds i to the "quantity" field.
func (spvuo *SellerProductVariationUpdateOne) AddQuantity(i int) *SellerProductVariationUpdateOne {
	spvuo.mutation.AddQuantity(i)
	return spvuo
}

// SetImage sets the "image" field.
func (spvuo *SellerProductVariationUpdateOne) SetImage(s string) *SellerProductVariationUpdateOne {
	spvuo.mutation.SetImage(s)
	return spvuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spvuo *SellerProductVariationUpdateOne) SetUpdatedAt(t time.Time) *SellerProductVariationUpdateOne {
	spvuo.mutation.SetUpdatedAt(t)
	return spvuo
}

// SetDeletedAt sets the "deleted_at" field.
func (spvuo *SellerProductVariationUpdateOne) SetDeletedAt(t time.Time) *SellerProductVariationUpdateOne {
	spvuo.mutation.SetDeletedAt(t)
	return spvuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spvuo *SellerProductVariationUpdateOne) SetNillableDeletedAt(t *time.Time) *SellerProductVariationUpdateOne {
	if t != nil {
		spvuo.SetDeletedAt(*t)
	}
	return spvuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spvuo *SellerProductVariationUpdateOne) ClearDeletedAt() *SellerProductVariationUpdateOne {
	spvuo.mutation.ClearDeletedAt()
	return spvuo
}

// SetSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID.
func (spvuo *SellerProductVariationUpdateOne) SetSellerProductID(id int) *SellerProductVariationUpdateOne {
	spvuo.mutation.SetSellerProductID(id)
	return spvuo
}

// SetNillableSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID if the given value is not nil.
func (spvuo *SellerProductVariationUpdateOne) SetNillableSellerProductID(id *int) *SellerProductVariationUpdateOne {
	if id != nil {
		spvuo = spvuo.SetSellerProductID(*id)
	}
	return spvuo
}

// SetSellerProduct sets the "seller_product" edge to the SellerProduct entity.
func (spvuo *SellerProductVariationUpdateOne) SetSellerProduct(s *SellerProduct) *SellerProductVariationUpdateOne {
	return spvuo.SetSellerProductID(s.ID)
}

// AddSellerProductVariationValueIDs adds the "seller_product_variation_values" edge to the SellerProductVariationValues entity by IDs.
func (spvuo *SellerProductVariationUpdateOne) AddSellerProductVariationValueIDs(ids ...int) *SellerProductVariationUpdateOne {
	spvuo.mutation.AddSellerProductVariationValueIDs(ids...)
	return spvuo
}

// AddSellerProductVariationValues adds the "seller_product_variation_values" edges to the SellerProductVariationValues entity.
func (spvuo *SellerProductVariationUpdateOne) AddSellerProductVariationValues(s ...*SellerProductVariationValues) *SellerProductVariationUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spvuo.AddSellerProductVariationValueIDs(ids...)
}

// AddCartProductIDs adds the "cart_products" edge to the CartProduct entity by IDs.
func (spvuo *SellerProductVariationUpdateOne) AddCartProductIDs(ids ...int) *SellerProductVariationUpdateOne {
	spvuo.mutation.AddCartProductIDs(ids...)
	return spvuo
}

// AddCartProducts adds the "cart_products" edges to the CartProduct entity.
func (spvuo *SellerProductVariationUpdateOne) AddCartProducts(c ...*CartProduct) *SellerProductVariationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spvuo.AddCartProductIDs(ids...)
}

// AddCheckoutProductIDs adds the "checkout_products" edge to the CheckoutProduct entity by IDs.
func (spvuo *SellerProductVariationUpdateOne) AddCheckoutProductIDs(ids ...int) *SellerProductVariationUpdateOne {
	spvuo.mutation.AddCheckoutProductIDs(ids...)
	return spvuo
}

// AddCheckoutProducts adds the "checkout_products" edges to the CheckoutProduct entity.
func (spvuo *SellerProductVariationUpdateOne) AddCheckoutProducts(c ...*CheckoutProduct) *SellerProductVariationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spvuo.AddCheckoutProductIDs(ids...)
}

// Mutation returns the SellerProductVariationMutation object of the builder.
func (spvuo *SellerProductVariationUpdateOne) Mutation() *SellerProductVariationMutation {
	return spvuo.mutation
}

// ClearSellerProduct clears the "seller_product" edge to the SellerProduct entity.
func (spvuo *SellerProductVariationUpdateOne) ClearSellerProduct() *SellerProductVariationUpdateOne {
	spvuo.mutation.ClearSellerProduct()
	return spvuo
}

// ClearSellerProductVariationValues clears all "seller_product_variation_values" edges to the SellerProductVariationValues entity.
func (spvuo *SellerProductVariationUpdateOne) ClearSellerProductVariationValues() *SellerProductVariationUpdateOne {
	spvuo.mutation.ClearSellerProductVariationValues()
	return spvuo
}

// RemoveSellerProductVariationValueIDs removes the "seller_product_variation_values" edge to SellerProductVariationValues entities by IDs.
func (spvuo *SellerProductVariationUpdateOne) RemoveSellerProductVariationValueIDs(ids ...int) *SellerProductVariationUpdateOne {
	spvuo.mutation.RemoveSellerProductVariationValueIDs(ids...)
	return spvuo
}

// RemoveSellerProductVariationValues removes "seller_product_variation_values" edges to SellerProductVariationValues entities.
func (spvuo *SellerProductVariationUpdateOne) RemoveSellerProductVariationValues(s ...*SellerProductVariationValues) *SellerProductVariationUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spvuo.RemoveSellerProductVariationValueIDs(ids...)
}

// ClearCartProducts clears all "cart_products" edges to the CartProduct entity.
func (spvuo *SellerProductVariationUpdateOne) ClearCartProducts() *SellerProductVariationUpdateOne {
	spvuo.mutation.ClearCartProducts()
	return spvuo
}

// RemoveCartProductIDs removes the "cart_products" edge to CartProduct entities by IDs.
func (spvuo *SellerProductVariationUpdateOne) RemoveCartProductIDs(ids ...int) *SellerProductVariationUpdateOne {
	spvuo.mutation.RemoveCartProductIDs(ids...)
	return spvuo
}

// RemoveCartProducts removes "cart_products" edges to CartProduct entities.
func (spvuo *SellerProductVariationUpdateOne) RemoveCartProducts(c ...*CartProduct) *SellerProductVariationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spvuo.RemoveCartProductIDs(ids...)
}

// ClearCheckoutProducts clears all "checkout_products" edges to the CheckoutProduct entity.
func (spvuo *SellerProductVariationUpdateOne) ClearCheckoutProducts() *SellerProductVariationUpdateOne {
	spvuo.mutation.ClearCheckoutProducts()
	return spvuo
}

// RemoveCheckoutProductIDs removes the "checkout_products" edge to CheckoutProduct entities by IDs.
func (spvuo *SellerProductVariationUpdateOne) RemoveCheckoutProductIDs(ids ...int) *SellerProductVariationUpdateOne {
	spvuo.mutation.RemoveCheckoutProductIDs(ids...)
	return spvuo
}

// RemoveCheckoutProducts removes "checkout_products" edges to CheckoutProduct entities.
func (spvuo *SellerProductVariationUpdateOne) RemoveCheckoutProducts(c ...*CheckoutProduct) *SellerProductVariationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spvuo.RemoveCheckoutProductIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spvuo *SellerProductVariationUpdateOne) Select(field string, fields ...string) *SellerProductVariationUpdateOne {
	spvuo.fields = append([]string{field}, fields...)
	return spvuo
}

// Save executes the query and returns the updated SellerProductVariation entity.
func (spvuo *SellerProductVariationUpdateOne) Save(ctx context.Context) (*SellerProductVariation, error) {
	var (
		err  error
		node *SellerProductVariation
	)
	spvuo.defaults()
	if len(spvuo.hooks) == 0 {
		node, err = spvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerProductVariationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spvuo.mutation = mutation
			node, err = spvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spvuo.hooks) - 1; i >= 0; i-- {
			if spvuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spvuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spvuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spvuo *SellerProductVariationUpdateOne) SaveX(ctx context.Context) *SellerProductVariation {
	node, err := spvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spvuo *SellerProductVariationUpdateOne) Exec(ctx context.Context) error {
	_, err := spvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spvuo *SellerProductVariationUpdateOne) ExecX(ctx context.Context) {
	if err := spvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spvuo *SellerProductVariationUpdateOne) defaults() {
	if _, ok := spvuo.mutation.UpdatedAt(); !ok {
		v := sellerproductvariation.UpdateDefaultUpdatedAt()
		spvuo.mutation.SetUpdatedAt(v)
	}
}

func (spvuo *SellerProductVariationUpdateOne) sqlSave(ctx context.Context) (_node *SellerProductVariation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellerproductvariation.Table,
			Columns: sellerproductvariation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproductvariation.FieldID,
			},
		},
	}
	id, ok := spvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SellerProductVariation.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := spvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sellerproductvariation.FieldID)
		for _, f := range fields {
			if !sellerproductvariation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sellerproductvariation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spvuo.mutation.ProductPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproductvariation.FieldProductPrice,
		})
	}
	if value, ok := spvuo.mutation.AddedProductPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproductvariation.FieldProductPrice,
		})
	}
	if value, ok := spvuo.mutation.SellingPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproductvariation.FieldSellingPrice,
		})
	}
	if value, ok := spvuo.mutation.AddedSellingPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproductvariation.FieldSellingPrice,
		})
	}
	if value, ok := spvuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproductvariation.FieldQuantity,
		})
	}
	if value, ok := spvuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproductvariation.FieldQuantity,
		})
	}
	if value, ok := spvuo.mutation.Image(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproductvariation.FieldImage,
		})
	}
	if value, ok := spvuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductvariation.FieldUpdatedAt,
		})
	}
	if value, ok := spvuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductvariation.FieldDeletedAt,
		})
	}
	if spvuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproductvariation.FieldDeletedAt,
		})
	}
	if spvuo.mutation.SellerProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproductvariation.SellerProductTable,
			Columns: []string{sellerproductvariation.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvuo.mutation.SellerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproductvariation.SellerProductTable,
			Columns: []string{sellerproductvariation.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spvuo.mutation.SellerProductVariationValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.SellerProductVariationValuesTable,
			Columns: []string{sellerproductvariation.SellerProductVariationValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariationvalues.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvuo.mutation.RemovedSellerProductVariationValuesIDs(); len(nodes) > 0 && !spvuo.mutation.SellerProductVariationValuesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.SellerProductVariationValuesTable,
			Columns: []string{sellerproductvariation.SellerProductVariationValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariationvalues.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvuo.mutation.SellerProductVariationValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.SellerProductVariationValuesTable,
			Columns: []string{sellerproductvariation.SellerProductVariationValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariationvalues.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spvuo.mutation.CartProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CartProductsTable,
			Columns: []string{sellerproductvariation.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvuo.mutation.RemovedCartProductsIDs(); len(nodes) > 0 && !spvuo.mutation.CartProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CartProductsTable,
			Columns: []string{sellerproductvariation.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvuo.mutation.CartProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CartProductsTable,
			Columns: []string{sellerproductvariation.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spvuo.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CheckoutProductsTable,
			Columns: []string{sellerproductvariation.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvuo.mutation.RemovedCheckoutProductsIDs(); len(nodes) > 0 && !spvuo.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CheckoutProductsTable,
			Columns: []string{sellerproductvariation.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spvuo.mutation.CheckoutProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproductvariation.CheckoutProductsTable,
			Columns: []string{sellerproductvariation.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SellerProductVariation{config: spvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellerproductvariation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
