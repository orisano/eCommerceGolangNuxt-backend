// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/cart"
	"bongo/ent/checkout"
	"bongo/ent/user"
	"bongo/ent/userlocation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// Checkout is the model entity for the Checkout schema.
type Checkout struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TotalPrice holds the value of the "total_price" field.
	TotalPrice decimal.Decimal `json:"total_price,omitempty"`
	// Completed holds the value of the "completed" field.
	Completed bool `json:"completed,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CheckoutQuery when eager-loading is set.
	Edges                        CheckoutEdges `json:"edges"`
	cart_checkout                *int
	user_checkouts               *int
	user_location_user_locations *int
}

// CheckoutEdges holds the relations/edges for other nodes in the graph.
type CheckoutEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Location holds the value of the location edge.
	Location *UserLocation `json:"location,omitempty"`
	// Cart holds the value of the cart edge.
	Cart *Cart `json:"cart,omitempty"`
	// CheckoutProducts holds the value of the checkout_products edge.
	CheckoutProducts []*CheckoutProduct `json:"checkout_products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// LocationOrErr returns the Location value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutEdges) LocationOrErr() (*UserLocation, error) {
	if e.loadedTypes[1] {
		if e.Location == nil {
			// The edge location was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: userlocation.Label}
		}
		return e.Location, nil
	}
	return nil, &NotLoadedError{edge: "location"}
}

// CartOrErr returns the Cart value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CheckoutEdges) CartOrErr() (*Cart, error) {
	if e.loadedTypes[2] {
		if e.Cart == nil {
			// The edge cart was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: cart.Label}
		}
		return e.Cart, nil
	}
	return nil, &NotLoadedError{edge: "cart"}
}

// CheckoutProductsOrErr returns the CheckoutProducts value or an error if the edge
// was not loaded in eager-loading.
func (e CheckoutEdges) CheckoutProductsOrErr() ([]*CheckoutProduct, error) {
	if e.loadedTypes[3] {
		return e.CheckoutProducts, nil
	}
	return nil, &NotLoadedError{edge: "checkout_products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Checkout) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case checkout.FieldTotalPrice:
			values[i] = new(decimal.Decimal)
		case checkout.FieldCompleted:
			values[i] = new(sql.NullBool)
		case checkout.FieldID:
			values[i] = new(sql.NullInt64)
		case checkout.FieldCreatedAt, checkout.FieldUpdatedAt, checkout.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case checkout.ForeignKeys[0]: // cart_checkout
			values[i] = new(sql.NullInt64)
		case checkout.ForeignKeys[1]: // user_checkouts
			values[i] = new(sql.NullInt64)
		case checkout.ForeignKeys[2]: // user_location_user_locations
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Checkout", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Checkout fields.
func (c *Checkout) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case checkout.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case checkout.FieldTotalPrice:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_price", values[i])
			} else if value != nil {
				c.TotalPrice = *value
			}
		case checkout.FieldCompleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field completed", values[i])
			} else if value.Valid {
				c.Completed = value.Bool
			}
		case checkout.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case checkout.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case checkout.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = new(time.Time)
				*c.DeletedAt = value.Time
			}
		case checkout.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field cart_checkout", value)
			} else if value.Valid {
				c.cart_checkout = new(int)
				*c.cart_checkout = int(value.Int64)
			}
		case checkout.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_checkouts", value)
			} else if value.Valid {
				c.user_checkouts = new(int)
				*c.user_checkouts = int(value.Int64)
			}
		case checkout.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_location_user_locations", value)
			} else if value.Valid {
				c.user_location_user_locations = new(int)
				*c.user_location_user_locations = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Checkout entity.
func (c *Checkout) QueryUser() *UserQuery {
	return (&CheckoutClient{config: c.config}).QueryUser(c)
}

// QueryLocation queries the "location" edge of the Checkout entity.
func (c *Checkout) QueryLocation() *UserLocationQuery {
	return (&CheckoutClient{config: c.config}).QueryLocation(c)
}

// QueryCart queries the "cart" edge of the Checkout entity.
func (c *Checkout) QueryCart() *CartQuery {
	return (&CheckoutClient{config: c.config}).QueryCart(c)
}

// QueryCheckoutProducts queries the "checkout_products" edge of the Checkout entity.
func (c *Checkout) QueryCheckoutProducts() *CheckoutProductQuery {
	return (&CheckoutClient{config: c.config}).QueryCheckoutProducts(c)
}

// Update returns a builder for updating this Checkout.
// Note that you need to call Checkout.Unwrap() before calling this method if this Checkout
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Checkout) Update() *CheckoutUpdateOne {
	return (&CheckoutClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Checkout entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Checkout) Unwrap() *Checkout {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Checkout is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Checkout) String() string {
	var builder strings.Builder
	builder.WriteString("Checkout(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", total_price=")
	builder.WriteString(fmt.Sprintf("%v", c.TotalPrice))
	builder.WriteString(", completed=")
	builder.WriteString(fmt.Sprintf("%v", c.Completed))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	if v := c.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Checkouts is a parsable slice of Checkout.
type Checkouts []*Checkout

func (c Checkouts) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
