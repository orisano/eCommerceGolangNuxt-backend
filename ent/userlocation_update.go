// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/checkout"
	"bongo/ent/predicate"
	"bongo/ent/user"
	"bongo/ent/userlocation"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserLocationUpdate is the builder for updating UserLocation entities.
type UserLocationUpdate struct {
	config
	hooks    []Hook
	mutation *UserLocationMutation
}

// Where appends a list predicates to the UserLocationUpdate builder.
func (ulu *UserLocationUpdate) Where(ps ...predicate.UserLocation) *UserLocationUpdate {
	ulu.mutation.Where(ps...)
	return ulu
}

// SetArea sets the "area" field.
func (ulu *UserLocationUpdate) SetArea(s string) *UserLocationUpdate {
	ulu.mutation.SetArea(s)
	return ulu
}

// SetStreet sets the "street" field.
func (ulu *UserLocationUpdate) SetStreet(s string) *UserLocationUpdate {
	ulu.mutation.SetStreet(s)
	return ulu
}

// SetHouse sets the "house" field.
func (ulu *UserLocationUpdate) SetHouse(s string) *UserLocationUpdate {
	ulu.mutation.SetHouse(s)
	return ulu
}

// SetPostOffice sets the "post_office" field.
func (ulu *UserLocationUpdate) SetPostOffice(s string) *UserLocationUpdate {
	ulu.mutation.SetPostOffice(s)
	return ulu
}

// SetPostCode sets the "post_code" field.
func (ulu *UserLocationUpdate) SetPostCode(i int) *UserLocationUpdate {
	ulu.mutation.ResetPostCode()
	ulu.mutation.SetPostCode(i)
	return ulu
}

// AddPostCode adds i to the "post_code" field.
func (ulu *UserLocationUpdate) AddPostCode(i int) *UserLocationUpdate {
	ulu.mutation.AddPostCode(i)
	return ulu
}

// SetPoliceStation sets the "police_station" field.
func (ulu *UserLocationUpdate) SetPoliceStation(s string) *UserLocationUpdate {
	ulu.mutation.SetPoliceStation(s)
	return ulu
}

// SetCity sets the "city" field.
func (ulu *UserLocationUpdate) SetCity(s string) *UserLocationUpdate {
	ulu.mutation.SetCity(s)
	return ulu
}

// SetUpdatedAt sets the "updated_at" field.
func (ulu *UserLocationUpdate) SetUpdatedAt(t time.Time) *UserLocationUpdate {
	ulu.mutation.SetUpdatedAt(t)
	return ulu
}

// SetDeletedAt sets the "deleted_at" field.
func (ulu *UserLocationUpdate) SetDeletedAt(t time.Time) *UserLocationUpdate {
	ulu.mutation.SetDeletedAt(t)
	return ulu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ulu *UserLocationUpdate) SetNillableDeletedAt(t *time.Time) *UserLocationUpdate {
	if t != nil {
		ulu.SetDeletedAt(*t)
	}
	return ulu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ulu *UserLocationUpdate) ClearDeletedAt() *UserLocationUpdate {
	ulu.mutation.ClearDeletedAt()
	return ulu
}

// SetGetUserID sets the "get_user" edge to the User entity by ID.
func (ulu *UserLocationUpdate) SetGetUserID(id int) *UserLocationUpdate {
	ulu.mutation.SetGetUserID(id)
	return ulu
}

// SetNillableGetUserID sets the "get_user" edge to the User entity by ID if the given value is not nil.
func (ulu *UserLocationUpdate) SetNillableGetUserID(id *int) *UserLocationUpdate {
	if id != nil {
		ulu = ulu.SetGetUserID(*id)
	}
	return ulu
}

// SetGetUser sets the "get_user" edge to the User entity.
func (ulu *UserLocationUpdate) SetGetUser(u *User) *UserLocationUpdate {
	return ulu.SetGetUserID(u.ID)
}

// AddUserLocationIDs adds the "user_locations" edge to the Checkout entity by IDs.
func (ulu *UserLocationUpdate) AddUserLocationIDs(ids ...int) *UserLocationUpdate {
	ulu.mutation.AddUserLocationIDs(ids...)
	return ulu
}

// AddUserLocations adds the "user_locations" edges to the Checkout entity.
func (ulu *UserLocationUpdate) AddUserLocations(c ...*Checkout) *UserLocationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ulu.AddUserLocationIDs(ids...)
}

// Mutation returns the UserLocationMutation object of the builder.
func (ulu *UserLocationUpdate) Mutation() *UserLocationMutation {
	return ulu.mutation
}

// ClearGetUser clears the "get_user" edge to the User entity.
func (ulu *UserLocationUpdate) ClearGetUser() *UserLocationUpdate {
	ulu.mutation.ClearGetUser()
	return ulu
}

// ClearUserLocations clears all "user_locations" edges to the Checkout entity.
func (ulu *UserLocationUpdate) ClearUserLocations() *UserLocationUpdate {
	ulu.mutation.ClearUserLocations()
	return ulu
}

// RemoveUserLocationIDs removes the "user_locations" edge to Checkout entities by IDs.
func (ulu *UserLocationUpdate) RemoveUserLocationIDs(ids ...int) *UserLocationUpdate {
	ulu.mutation.RemoveUserLocationIDs(ids...)
	return ulu
}

// RemoveUserLocations removes "user_locations" edges to Checkout entities.
func (ulu *UserLocationUpdate) RemoveUserLocations(c ...*Checkout) *UserLocationUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ulu.RemoveUserLocationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ulu *UserLocationUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ulu.defaults()
	if len(ulu.hooks) == 0 {
		affected, err = ulu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLocationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ulu.mutation = mutation
			affected, err = ulu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ulu.hooks) - 1; i >= 0; i-- {
			if ulu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ulu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ulu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ulu *UserLocationUpdate) SaveX(ctx context.Context) int {
	affected, err := ulu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ulu *UserLocationUpdate) Exec(ctx context.Context) error {
	_, err := ulu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ulu *UserLocationUpdate) ExecX(ctx context.Context) {
	if err := ulu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ulu *UserLocationUpdate) defaults() {
	if _, ok := ulu.mutation.UpdatedAt(); !ok {
		v := userlocation.UpdateDefaultUpdatedAt()
		ulu.mutation.SetUpdatedAt(v)
	}
}

func (ulu *UserLocationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlocation.Table,
			Columns: userlocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlocation.FieldID,
			},
		},
	}
	if ps := ulu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ulu.mutation.Area(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldArea,
		})
	}
	if value, ok := ulu.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldStreet,
		})
	}
	if value, ok := ulu.mutation.House(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldHouse,
		})
	}
	if value, ok := ulu.mutation.PostOffice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldPostOffice,
		})
	}
	if value, ok := ulu.mutation.PostCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlocation.FieldPostCode,
		})
	}
	if value, ok := ulu.mutation.AddedPostCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlocation.FieldPostCode,
		})
	}
	if value, ok := ulu.mutation.PoliceStation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldPoliceStation,
		})
	}
	if value, ok := ulu.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldCity,
		})
	}
	if value, ok := ulu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlocation.FieldUpdatedAt,
		})
	}
	if value, ok := ulu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlocation.FieldDeletedAt,
		})
	}
	if ulu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userlocation.FieldDeletedAt,
		})
	}
	if ulu.mutation.GetUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlocation.GetUserTable,
			Columns: []string{userlocation.GetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.GetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlocation.GetUserTable,
			Columns: []string{userlocation.GetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ulu.mutation.UserLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlocation.UserLocationsTable,
			Columns: []string{userlocation.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.RemovedUserLocationsIDs(); len(nodes) > 0 && !ulu.mutation.UserLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlocation.UserLocationsTable,
			Columns: []string{userlocation.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ulu.mutation.UserLocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlocation.UserLocationsTable,
			Columns: []string{userlocation.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ulu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserLocationUpdateOne is the builder for updating a single UserLocation entity.
type UserLocationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserLocationMutation
}

// SetArea sets the "area" field.
func (uluo *UserLocationUpdateOne) SetArea(s string) *UserLocationUpdateOne {
	uluo.mutation.SetArea(s)
	return uluo
}

// SetStreet sets the "street" field.
func (uluo *UserLocationUpdateOne) SetStreet(s string) *UserLocationUpdateOne {
	uluo.mutation.SetStreet(s)
	return uluo
}

// SetHouse sets the "house" field.
func (uluo *UserLocationUpdateOne) SetHouse(s string) *UserLocationUpdateOne {
	uluo.mutation.SetHouse(s)
	return uluo
}

// SetPostOffice sets the "post_office" field.
func (uluo *UserLocationUpdateOne) SetPostOffice(s string) *UserLocationUpdateOne {
	uluo.mutation.SetPostOffice(s)
	return uluo
}

// SetPostCode sets the "post_code" field.
func (uluo *UserLocationUpdateOne) SetPostCode(i int) *UserLocationUpdateOne {
	uluo.mutation.ResetPostCode()
	uluo.mutation.SetPostCode(i)
	return uluo
}

// AddPostCode adds i to the "post_code" field.
func (uluo *UserLocationUpdateOne) AddPostCode(i int) *UserLocationUpdateOne {
	uluo.mutation.AddPostCode(i)
	return uluo
}

// SetPoliceStation sets the "police_station" field.
func (uluo *UserLocationUpdateOne) SetPoliceStation(s string) *UserLocationUpdateOne {
	uluo.mutation.SetPoliceStation(s)
	return uluo
}

// SetCity sets the "city" field.
func (uluo *UserLocationUpdateOne) SetCity(s string) *UserLocationUpdateOne {
	uluo.mutation.SetCity(s)
	return uluo
}

// SetUpdatedAt sets the "updated_at" field.
func (uluo *UserLocationUpdateOne) SetUpdatedAt(t time.Time) *UserLocationUpdateOne {
	uluo.mutation.SetUpdatedAt(t)
	return uluo
}

// SetDeletedAt sets the "deleted_at" field.
func (uluo *UserLocationUpdateOne) SetDeletedAt(t time.Time) *UserLocationUpdateOne {
	uluo.mutation.SetDeletedAt(t)
	return uluo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uluo *UserLocationUpdateOne) SetNillableDeletedAt(t *time.Time) *UserLocationUpdateOne {
	if t != nil {
		uluo.SetDeletedAt(*t)
	}
	return uluo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uluo *UserLocationUpdateOne) ClearDeletedAt() *UserLocationUpdateOne {
	uluo.mutation.ClearDeletedAt()
	return uluo
}

// SetGetUserID sets the "get_user" edge to the User entity by ID.
func (uluo *UserLocationUpdateOne) SetGetUserID(id int) *UserLocationUpdateOne {
	uluo.mutation.SetGetUserID(id)
	return uluo
}

// SetNillableGetUserID sets the "get_user" edge to the User entity by ID if the given value is not nil.
func (uluo *UserLocationUpdateOne) SetNillableGetUserID(id *int) *UserLocationUpdateOne {
	if id != nil {
		uluo = uluo.SetGetUserID(*id)
	}
	return uluo
}

// SetGetUser sets the "get_user" edge to the User entity.
func (uluo *UserLocationUpdateOne) SetGetUser(u *User) *UserLocationUpdateOne {
	return uluo.SetGetUserID(u.ID)
}

// AddUserLocationIDs adds the "user_locations" edge to the Checkout entity by IDs.
func (uluo *UserLocationUpdateOne) AddUserLocationIDs(ids ...int) *UserLocationUpdateOne {
	uluo.mutation.AddUserLocationIDs(ids...)
	return uluo
}

// AddUserLocations adds the "user_locations" edges to the Checkout entity.
func (uluo *UserLocationUpdateOne) AddUserLocations(c ...*Checkout) *UserLocationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uluo.AddUserLocationIDs(ids...)
}

// Mutation returns the UserLocationMutation object of the builder.
func (uluo *UserLocationUpdateOne) Mutation() *UserLocationMutation {
	return uluo.mutation
}

// ClearGetUser clears the "get_user" edge to the User entity.
func (uluo *UserLocationUpdateOne) ClearGetUser() *UserLocationUpdateOne {
	uluo.mutation.ClearGetUser()
	return uluo
}

// ClearUserLocations clears all "user_locations" edges to the Checkout entity.
func (uluo *UserLocationUpdateOne) ClearUserLocations() *UserLocationUpdateOne {
	uluo.mutation.ClearUserLocations()
	return uluo
}

// RemoveUserLocationIDs removes the "user_locations" edge to Checkout entities by IDs.
func (uluo *UserLocationUpdateOne) RemoveUserLocationIDs(ids ...int) *UserLocationUpdateOne {
	uluo.mutation.RemoveUserLocationIDs(ids...)
	return uluo
}

// RemoveUserLocations removes "user_locations" edges to Checkout entities.
func (uluo *UserLocationUpdateOne) RemoveUserLocations(c ...*Checkout) *UserLocationUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uluo.RemoveUserLocationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uluo *UserLocationUpdateOne) Select(field string, fields ...string) *UserLocationUpdateOne {
	uluo.fields = append([]string{field}, fields...)
	return uluo
}

// Save executes the query and returns the updated UserLocation entity.
func (uluo *UserLocationUpdateOne) Save(ctx context.Context) (*UserLocation, error) {
	var (
		err  error
		node *UserLocation
	)
	uluo.defaults()
	if len(uluo.hooks) == 0 {
		node, err = uluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserLocationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uluo.mutation = mutation
			node, err = uluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uluo.hooks) - 1; i >= 0; i-- {
			if uluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uluo *UserLocationUpdateOne) SaveX(ctx context.Context) *UserLocation {
	node, err := uluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uluo *UserLocationUpdateOne) Exec(ctx context.Context) error {
	_, err := uluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uluo *UserLocationUpdateOne) ExecX(ctx context.Context) {
	if err := uluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uluo *UserLocationUpdateOne) defaults() {
	if _, ok := uluo.mutation.UpdatedAt(); !ok {
		v := userlocation.UpdateDefaultUpdatedAt()
		uluo.mutation.SetUpdatedAt(v)
	}
}

func (uluo *UserLocationUpdateOne) sqlSave(ctx context.Context) (_node *UserLocation, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   userlocation.Table,
			Columns: userlocation.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: userlocation.FieldID,
			},
		},
	}
	id, ok := uluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserLocation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userlocation.FieldID)
		for _, f := range fields {
			if !userlocation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userlocation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uluo.mutation.Area(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldArea,
		})
	}
	if value, ok := uluo.mutation.Street(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldStreet,
		})
	}
	if value, ok := uluo.mutation.House(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldHouse,
		})
	}
	if value, ok := uluo.mutation.PostOffice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldPostOffice,
		})
	}
	if value, ok := uluo.mutation.PostCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlocation.FieldPostCode,
		})
	}
	if value, ok := uluo.mutation.AddedPostCode(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: userlocation.FieldPostCode,
		})
	}
	if value, ok := uluo.mutation.PoliceStation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldPoliceStation,
		})
	}
	if value, ok := uluo.mutation.City(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: userlocation.FieldCity,
		})
	}
	if value, ok := uluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlocation.FieldUpdatedAt,
		})
	}
	if value, ok := uluo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: userlocation.FieldDeletedAt,
		})
	}
	if uluo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: userlocation.FieldDeletedAt,
		})
	}
	if uluo.mutation.GetUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlocation.GetUserTable,
			Columns: []string{userlocation.GetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.GetUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   userlocation.GetUserTable,
			Columns: []string{userlocation.GetUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uluo.mutation.UserLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlocation.UserLocationsTable,
			Columns: []string{userlocation.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.RemovedUserLocationsIDs(); len(nodes) > 0 && !uluo.mutation.UserLocationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlocation.UserLocationsTable,
			Columns: []string{userlocation.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uluo.mutation.UserLocationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   userlocation.UserLocationsTable,
			Columns: []string{userlocation.UserLocationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkout.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserLocation{config: uluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userlocation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
