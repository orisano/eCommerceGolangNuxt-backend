// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/attribute"
	"bongo/ent/sellerproductvariation"
	"bongo/ent/sellerproductvariationvalues"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// SellerProductVariationValues is the model entity for the SellerProductVariationValues schema.
type SellerProductVariationValues struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SellerProductVariationValuesQuery when eager-loading is set.
	Edges                                                    SellerProductVariationValuesEdges `json:"edges"`
	attribute_attribute                                      *int
	seller_product_variation_seller_product_variation_values *int
}

// SellerProductVariationValuesEdges holds the relations/edges for other nodes in the graph.
type SellerProductVariationValuesEdges struct {
	// Attribute holds the value of the attribute edge.
	Attribute *Attribute `json:"attribute,omitempty"`
	// SellerProductVariation holds the value of the seller_product_variation edge.
	SellerProductVariation *SellerProductVariation `json:"seller_product_variation,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttributeOrErr returns the Attribute value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SellerProductVariationValuesEdges) AttributeOrErr() (*Attribute, error) {
	if e.loadedTypes[0] {
		if e.Attribute == nil {
			// The edge attribute was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: attribute.Label}
		}
		return e.Attribute, nil
	}
	return nil, &NotLoadedError{edge: "attribute"}
}

// SellerProductVariationOrErr returns the SellerProductVariation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SellerProductVariationValuesEdges) SellerProductVariationOrErr() (*SellerProductVariation, error) {
	if e.loadedTypes[1] {
		if e.SellerProductVariation == nil {
			// The edge seller_product_variation was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: sellerproductvariation.Label}
		}
		return e.SellerProductVariation, nil
	}
	return nil, &NotLoadedError{edge: "seller_product_variation"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SellerProductVariationValues) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case sellerproductvariationvalues.FieldID:
			values[i] = new(sql.NullInt64)
		case sellerproductvariationvalues.FieldName, sellerproductvariationvalues.FieldDescription:
			values[i] = new(sql.NullString)
		case sellerproductvariationvalues.FieldCreatedAt, sellerproductvariationvalues.FieldUpdatedAt, sellerproductvariationvalues.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case sellerproductvariationvalues.ForeignKeys[0]: // attribute_attribute
			values[i] = new(sql.NullInt64)
		case sellerproductvariationvalues.ForeignKeys[1]: // seller_product_variation_seller_product_variation_values
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SellerProductVariationValues", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SellerProductVariationValues fields.
func (spvv *SellerProductVariationValues) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sellerproductvariationvalues.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			spvv.ID = int(value.Int64)
		case sellerproductvariationvalues.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				spvv.Name = value.String
			}
		case sellerproductvariationvalues.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				spvv.Description = value.String
			}
		case sellerproductvariationvalues.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				spvv.CreatedAt = value.Time
			}
		case sellerproductvariationvalues.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				spvv.UpdatedAt = value.Time
			}
		case sellerproductvariationvalues.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				spvv.DeletedAt = new(time.Time)
				*spvv.DeletedAt = value.Time
			}
		case sellerproductvariationvalues.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field attribute_attribute", value)
			} else if value.Valid {
				spvv.attribute_attribute = new(int)
				*spvv.attribute_attribute = int(value.Int64)
			}
		case sellerproductvariationvalues.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field seller_product_variation_seller_product_variation_values", value)
			} else if value.Valid {
				spvv.seller_product_variation_seller_product_variation_values = new(int)
				*spvv.seller_product_variation_seller_product_variation_values = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAttribute queries the "attribute" edge of the SellerProductVariationValues entity.
func (spvv *SellerProductVariationValues) QueryAttribute() *AttributeQuery {
	return (&SellerProductVariationValuesClient{config: spvv.config}).QueryAttribute(spvv)
}

// QuerySellerProductVariation queries the "seller_product_variation" edge of the SellerProductVariationValues entity.
func (spvv *SellerProductVariationValues) QuerySellerProductVariation() *SellerProductVariationQuery {
	return (&SellerProductVariationValuesClient{config: spvv.config}).QuerySellerProductVariation(spvv)
}

// Update returns a builder for updating this SellerProductVariationValues.
// Note that you need to call SellerProductVariationValues.Unwrap() before calling this method if this SellerProductVariationValues
// was returned from a transaction, and the transaction was committed or rolled back.
func (spvv *SellerProductVariationValues) Update() *SellerProductVariationValuesUpdateOne {
	return (&SellerProductVariationValuesClient{config: spvv.config}).UpdateOne(spvv)
}

// Unwrap unwraps the SellerProductVariationValues entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (spvv *SellerProductVariationValues) Unwrap() *SellerProductVariationValues {
	tx, ok := spvv.config.driver.(*txDriver)
	if !ok {
		panic("ent: SellerProductVariationValues is not a transactional entity")
	}
	spvv.config.driver = tx.drv
	return spvv
}

// String implements the fmt.Stringer.
func (spvv *SellerProductVariationValues) String() string {
	var builder strings.Builder
	builder.WriteString("SellerProductVariationValues(")
	builder.WriteString(fmt.Sprintf("id=%v", spvv.ID))
	builder.WriteString(", name=")
	builder.WriteString(spvv.Name)
	builder.WriteString(", description=")
	builder.WriteString(spvv.Description)
	builder.WriteString(", created_at=")
	builder.WriteString(spvv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(spvv.UpdatedAt.Format(time.ANSIC))
	if v := spvv.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SellerProductVariationValuesSlice is a parsable slice of SellerProductVariationValues.
type SellerProductVariationValuesSlice []*SellerProductVariationValues

func (spvv SellerProductVariationValuesSlice) config(cfg config) {
	for _i := range spvv {
		spvv[_i].config = cfg
	}
}
