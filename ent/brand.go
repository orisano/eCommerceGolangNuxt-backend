// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/brand"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Brand is the model entity for the Brand schema.
type Brand struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BrandQuery when eager-loading is set.
	Edges BrandEdges `json:"edges"`
}

// BrandEdges holds the relations/edges for other nodes in the graph.
type BrandEdges struct {
	// Brand holds the value of the brand edge.
	Brand []*SellerProduct `json:"brand,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BrandOrErr returns the Brand value or an error if the edge
// was not loaded in eager-loading.
func (e BrandEdges) BrandOrErr() ([]*SellerProduct, error) {
	if e.loadedTypes[0] {
		return e.Brand, nil
	}
	return nil, &NotLoadedError{edge: "brand"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Brand) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case brand.FieldID:
			values[i] = new(sql.NullInt64)
		case brand.FieldName:
			values[i] = new(sql.NullString)
		case brand.FieldCreatedAt, brand.FieldUpdatedAt, brand.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Brand", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Brand fields.
func (b *Brand) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case brand.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case brand.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case brand.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case brand.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case brand.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				b.DeletedAt = new(time.Time)
				*b.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// QueryBrand queries the "brand" edge of the Brand entity.
func (b *Brand) QueryBrand() *SellerProductQuery {
	return (&BrandClient{config: b.config}).QueryBrand(b)
}

// Update returns a builder for updating this Brand.
// Note that you need to call Brand.Unwrap() before calling this method if this Brand
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Brand) Update() *BrandUpdateOne {
	return (&BrandClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Brand entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Brand) Unwrap() *Brand {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Brand is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Brand) String() string {
	var builder strings.Builder
	builder.WriteString("Brand(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", name=")
	builder.WriteString(b.Name)
	builder.WriteString(", created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	if v := b.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Brands is a parsable slice of Brand.
type Brands []*Brand

func (b Brands) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
