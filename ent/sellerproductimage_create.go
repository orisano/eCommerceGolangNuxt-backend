// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductimage"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SellerProductImageCreate is the builder for creating a SellerProductImage entity.
type SellerProductImageCreate struct {
	config
	mutation *SellerProductImageMutation
	hooks    []Hook
}

// SetDisplay sets the "display" field.
func (spic *SellerProductImageCreate) SetDisplay(b bool) *SellerProductImageCreate {
	spic.mutation.SetDisplay(b)
	return spic
}

// SetNillableDisplay sets the "display" field if the given value is not nil.
func (spic *SellerProductImageCreate) SetNillableDisplay(b *bool) *SellerProductImageCreate {
	if b != nil {
		spic.SetDisplay(*b)
	}
	return spic
}

// SetImage sets the "image" field.
func (spic *SellerProductImageCreate) SetImage(s string) *SellerProductImageCreate {
	spic.mutation.SetImage(s)
	return spic
}

// SetCreatedAt sets the "created_at" field.
func (spic *SellerProductImageCreate) SetCreatedAt(t time.Time) *SellerProductImageCreate {
	spic.mutation.SetCreatedAt(t)
	return spic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spic *SellerProductImageCreate) SetNillableCreatedAt(t *time.Time) *SellerProductImageCreate {
	if t != nil {
		spic.SetCreatedAt(*t)
	}
	return spic
}

// SetUpdatedAt sets the "updated_at" field.
func (spic *SellerProductImageCreate) SetUpdatedAt(t time.Time) *SellerProductImageCreate {
	spic.mutation.SetUpdatedAt(t)
	return spic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spic *SellerProductImageCreate) SetNillableUpdatedAt(t *time.Time) *SellerProductImageCreate {
	if t != nil {
		spic.SetUpdatedAt(*t)
	}
	return spic
}

// SetDeletedAt sets the "deleted_at" field.
func (spic *SellerProductImageCreate) SetDeletedAt(t time.Time) *SellerProductImageCreate {
	spic.mutation.SetDeletedAt(t)
	return spic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spic *SellerProductImageCreate) SetNillableDeletedAt(t *time.Time) *SellerProductImageCreate {
	if t != nil {
		spic.SetDeletedAt(*t)
	}
	return spic
}

// SetSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID.
func (spic *SellerProductImageCreate) SetSellerProductID(id int) *SellerProductImageCreate {
	spic.mutation.SetSellerProductID(id)
	return spic
}

// SetNillableSellerProductID sets the "seller_product" edge to the SellerProduct entity by ID if the given value is not nil.
func (spic *SellerProductImageCreate) SetNillableSellerProductID(id *int) *SellerProductImageCreate {
	if id != nil {
		spic = spic.SetSellerProductID(*id)
	}
	return spic
}

// SetSellerProduct sets the "seller_product" edge to the SellerProduct entity.
func (spic *SellerProductImageCreate) SetSellerProduct(s *SellerProduct) *SellerProductImageCreate {
	return spic.SetSellerProductID(s.ID)
}

// Mutation returns the SellerProductImageMutation object of the builder.
func (spic *SellerProductImageCreate) Mutation() *SellerProductImageMutation {
	return spic.mutation
}

// Save creates the SellerProductImage in the database.
func (spic *SellerProductImageCreate) Save(ctx context.Context) (*SellerProductImage, error) {
	var (
		err  error
		node *SellerProductImage
	)
	spic.defaults()
	if len(spic.hooks) == 0 {
		if err = spic.check(); err != nil {
			return nil, err
		}
		node, err = spic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerProductImageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = spic.check(); err != nil {
				return nil, err
			}
			spic.mutation = mutation
			if node, err = spic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(spic.hooks) - 1; i >= 0; i-- {
			if spic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (spic *SellerProductImageCreate) SaveX(ctx context.Context) *SellerProductImage {
	v, err := spic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spic *SellerProductImageCreate) Exec(ctx context.Context) error {
	_, err := spic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spic *SellerProductImageCreate) ExecX(ctx context.Context) {
	if err := spic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spic *SellerProductImageCreate) defaults() {
	if _, ok := spic.mutation.Display(); !ok {
		v := sellerproductimage.DefaultDisplay
		spic.mutation.SetDisplay(v)
	}
	if _, ok := spic.mutation.CreatedAt(); !ok {
		v := sellerproductimage.DefaultCreatedAt()
		spic.mutation.SetCreatedAt(v)
	}
	if _, ok := spic.mutation.UpdatedAt(); !ok {
		v := sellerproductimage.DefaultUpdatedAt()
		spic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spic *SellerProductImageCreate) check() error {
	if _, ok := spic.mutation.Display(); !ok {
		return &ValidationError{Name: "display", err: errors.New(`ent: missing required field "SellerProductImage.display"`)}
	}
	if _, ok := spic.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "SellerProductImage.image"`)}
	}
	if _, ok := spic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SellerProductImage.created_at"`)}
	}
	if _, ok := spic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SellerProductImage.updated_at"`)}
	}
	return nil
}

func (spic *SellerProductImageCreate) sqlSave(ctx context.Context) (*SellerProductImage, error) {
	_node, _spec := spic.createSpec()
	if err := sqlgraph.CreateNode(ctx, spic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (spic *SellerProductImageCreate) createSpec() (*SellerProductImage, *sqlgraph.CreateSpec) {
	var (
		_node = &SellerProductImage{config: spic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: sellerproductimage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproductimage.FieldID,
			},
		}
	)
	if value, ok := spic.mutation.Display(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sellerproductimage.FieldDisplay,
		})
		_node.Display = value
	}
	if value, ok := spic.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproductimage.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := spic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductimage.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := spic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductimage.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := spic.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproductimage.FieldDeletedAt,
		})
		_node.DeletedAt = &value
	}
	if nodes := spic.mutation.SellerProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproductimage.SellerProductTable,
			Columns: []string{sellerproductimage.SellerProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.seller_product_seller_product_images = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SellerProductImageCreateBulk is the builder for creating many SellerProductImage entities in bulk.
type SellerProductImageCreateBulk struct {
	config
	builders []*SellerProductImageCreate
}

// Save creates the SellerProductImage entities in the database.
func (spicb *SellerProductImageCreateBulk) Save(ctx context.Context) ([]*SellerProductImage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spicb.builders))
	nodes := make([]*SellerProductImage, len(spicb.builders))
	mutators := make([]Mutator, len(spicb.builders))
	for i := range spicb.builders {
		func(i int, root context.Context) {
			builder := spicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SellerProductImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spicb *SellerProductImageCreateBulk) SaveX(ctx context.Context) []*SellerProductImage {
	v, err := spicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spicb *SellerProductImageCreateBulk) Exec(ctx context.Context) error {
	_, err := spicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spicb *SellerProductImageCreateBulk) ExecX(ctx context.Context) {
	if err := spicb.Exec(ctx); err != nil {
		panic(err)
	}
}
