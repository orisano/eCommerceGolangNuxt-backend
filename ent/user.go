// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Admin holds the value of the "admin" field.
	Admin bool `json:"admin,omitempty"`
	// Staff holds the value of the "staff" field.
	Staff bool `json:"staff,omitempty"`
	// Seller holds the value of the "seller" field.
	Seller bool `json:"seller,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// AdminUserName holds the value of the "admin_user_name" field.
	AdminUserName *string `json:"-"`
	// AdminUserToken holds the value of the "admin_user_token" field.
	AdminUserToken *string `json:"-"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// SellerRequests holds the value of the seller_requests edge.
	SellerRequests []*SellerRequest `json:"seller_requests,omitempty"`
	// SellerShops holds the value of the seller_shops edge.
	SellerShops []*SellerShop `json:"seller_shops,omitempty"`
	// SellerProducts holds the value of the seller_products edge.
	SellerProducts []*SellerProduct `json:"seller_products,omitempty"`
	// Carts holds the value of the carts edge.
	Carts []*Cart `json:"carts,omitempty"`
	// UserLocations holds the value of the user_locations edge.
	UserLocations []*UserLocation `json:"user_locations,omitempty"`
	// Checkouts holds the value of the checkouts edge.
	Checkouts []*Checkout `json:"checkouts,omitempty"`
	// CheckoutProducts holds the value of the checkout_products edge.
	CheckoutProducts []*CheckoutProduct `json:"checkout_products,omitempty"`
	// SellerCheckoutProducts holds the value of the seller_checkout_products edge.
	SellerCheckoutProducts []*CheckoutProduct `json:"seller_checkout_products,omitempty"`
	// ApprovedShops holds the value of the approved_shops edge.
	ApprovedShops []*SellerShop `json:"approved_shops,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// SellerRequestsOrErr returns the SellerRequests value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SellerRequestsOrErr() ([]*SellerRequest, error) {
	if e.loadedTypes[0] {
		return e.SellerRequests, nil
	}
	return nil, &NotLoadedError{edge: "seller_requests"}
}

// SellerShopsOrErr returns the SellerShops value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SellerShopsOrErr() ([]*SellerShop, error) {
	if e.loadedTypes[1] {
		return e.SellerShops, nil
	}
	return nil, &NotLoadedError{edge: "seller_shops"}
}

// SellerProductsOrErr returns the SellerProducts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SellerProductsOrErr() ([]*SellerProduct, error) {
	if e.loadedTypes[2] {
		return e.SellerProducts, nil
	}
	return nil, &NotLoadedError{edge: "seller_products"}
}

// CartsOrErr returns the Carts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CartsOrErr() ([]*Cart, error) {
	if e.loadedTypes[3] {
		return e.Carts, nil
	}
	return nil, &NotLoadedError{edge: "carts"}
}

// UserLocationsOrErr returns the UserLocations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserLocationsOrErr() ([]*UserLocation, error) {
	if e.loadedTypes[4] {
		return e.UserLocations, nil
	}
	return nil, &NotLoadedError{edge: "user_locations"}
}

// CheckoutsOrErr returns the Checkouts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CheckoutsOrErr() ([]*Checkout, error) {
	if e.loadedTypes[5] {
		return e.Checkouts, nil
	}
	return nil, &NotLoadedError{edge: "checkouts"}
}

// CheckoutProductsOrErr returns the CheckoutProducts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CheckoutProductsOrErr() ([]*CheckoutProduct, error) {
	if e.loadedTypes[6] {
		return e.CheckoutProducts, nil
	}
	return nil, &NotLoadedError{edge: "checkout_products"}
}

// SellerCheckoutProductsOrErr returns the SellerCheckoutProducts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SellerCheckoutProductsOrErr() ([]*CheckoutProduct, error) {
	if e.loadedTypes[7] {
		return e.SellerCheckoutProducts, nil
	}
	return nil, &NotLoadedError{edge: "seller_checkout_products"}
}

// ApprovedShopsOrErr returns the ApprovedShops value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ApprovedShopsOrErr() ([]*SellerShop, error) {
	if e.loadedTypes[8] {
		return e.ApprovedShops, nil
	}
	return nil, &NotLoadedError{edge: "approved_shops"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldAdmin, user.FieldStaff, user.FieldSeller, user.FieldActive:
			values[i] = new(sql.NullBool)
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldPhoneNumber, user.FieldPassword, user.FieldAdminUserName, user.FieldAdminUserToken:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				u.PhoneNumber = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldAdmin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field admin", values[i])
			} else if value.Valid {
				u.Admin = value.Bool
			}
		case user.FieldStaff:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field staff", values[i])
			} else if value.Valid {
				u.Staff = value.Bool
			}
		case user.FieldSeller:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field seller", values[i])
			} else if value.Valid {
				u.Seller = value.Bool
			}
		case user.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				u.Active = value.Bool
			}
		case user.FieldAdminUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field admin_user_name", values[i])
			} else if value.Valid {
				u.AdminUserName = new(string)
				*u.AdminUserName = value.String
			}
		case user.FieldAdminUserToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field admin_user_token", values[i])
			} else if value.Valid {
				u.AdminUserToken = new(string)
				*u.AdminUserToken = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = new(time.Time)
				*u.DeletedAt = value.Time
			}
		}
	}
	return nil
}

// QuerySellerRequests queries the "seller_requests" edge of the User entity.
func (u *User) QuerySellerRequests() *SellerRequestQuery {
	return (&UserClient{config: u.config}).QuerySellerRequests(u)
}

// QuerySellerShops queries the "seller_shops" edge of the User entity.
func (u *User) QuerySellerShops() *SellerShopQuery {
	return (&UserClient{config: u.config}).QuerySellerShops(u)
}

// QuerySellerProducts queries the "seller_products" edge of the User entity.
func (u *User) QuerySellerProducts() *SellerProductQuery {
	return (&UserClient{config: u.config}).QuerySellerProducts(u)
}

// QueryCarts queries the "carts" edge of the User entity.
func (u *User) QueryCarts() *CartQuery {
	return (&UserClient{config: u.config}).QueryCarts(u)
}

// QueryUserLocations queries the "user_locations" edge of the User entity.
func (u *User) QueryUserLocations() *UserLocationQuery {
	return (&UserClient{config: u.config}).QueryUserLocations(u)
}

// QueryCheckouts queries the "checkouts" edge of the User entity.
func (u *User) QueryCheckouts() *CheckoutQuery {
	return (&UserClient{config: u.config}).QueryCheckouts(u)
}

// QueryCheckoutProducts queries the "checkout_products" edge of the User entity.
func (u *User) QueryCheckoutProducts() *CheckoutProductQuery {
	return (&UserClient{config: u.config}).QueryCheckoutProducts(u)
}

// QuerySellerCheckoutProducts queries the "seller_checkout_products" edge of the User entity.
func (u *User) QuerySellerCheckoutProducts() *CheckoutProductQuery {
	return (&UserClient{config: u.config}).QuerySellerCheckoutProducts(u)
}

// QueryApprovedShops queries the "approved_shops" edge of the User entity.
func (u *User) QueryApprovedShops() *SellerShopQuery {
	return (&UserClient{config: u.config}).QueryApprovedShops(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", phone_number=")
	builder.WriteString(u.PhoneNumber)
	builder.WriteString(", password=<sensitive>")
	builder.WriteString(", admin=")
	builder.WriteString(fmt.Sprintf("%v", u.Admin))
	builder.WriteString(", staff=")
	builder.WriteString(fmt.Sprintf("%v", u.Staff))
	builder.WriteString(", seller=")
	builder.WriteString(fmt.Sprintf("%v", u.Seller))
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", u.Active))
	builder.WriteString(", admin_user_name=<sensitive>")
	builder.WriteString(", admin_user_token=<sensitive>")
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	if v := u.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
