// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/brand"
	"bongo/ent/cartproduct"
	"bongo/ent/category"
	"bongo/ent/checkoutproduct"
	"bongo/ent/predicate"
	"bongo/ent/sellerproduct"
	"bongo/ent/sellerproductimage"
	"bongo/ent/sellerproductvariation"
	"bongo/ent/sellershop"
	"bongo/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// SellerProductUpdate is the builder for updating SellerProduct entities.
type SellerProductUpdate struct {
	config
	hooks    []Hook
	mutation *SellerProductMutation
}

// Where appends a list predicates to the SellerProductUpdate builder.
func (spu *SellerProductUpdate) Where(ps ...predicate.SellerProduct) *SellerProductUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetName sets the "name" field.
func (spu *SellerProductUpdate) SetName(s string) *SellerProductUpdate {
	spu.mutation.SetName(s)
	return spu
}

// SetSlug sets the "slug" field.
func (spu *SellerProductUpdate) SetSlug(s string) *SellerProductUpdate {
	spu.mutation.SetSlug(s)
	return spu
}

// SetSellingPrice sets the "selling_price" field.
func (spu *SellerProductUpdate) SetSellingPrice(d decimal.Decimal) *SellerProductUpdate {
	spu.mutation.ResetSellingPrice()
	spu.mutation.SetSellingPrice(d)
	return spu
}

// AddSellingPrice adds d to the "selling_price" field.
func (spu *SellerProductUpdate) AddSellingPrice(d decimal.Decimal) *SellerProductUpdate {
	spu.mutation.AddSellingPrice(d)
	return spu
}

// SetProductPrice sets the "product_price" field.
func (spu *SellerProductUpdate) SetProductPrice(d decimal.Decimal) *SellerProductUpdate {
	spu.mutation.ResetProductPrice()
	spu.mutation.SetProductPrice(d)
	return spu
}

// AddProductPrice adds d to the "product_price" field.
func (spu *SellerProductUpdate) AddProductPrice(d decimal.Decimal) *SellerProductUpdate {
	spu.mutation.AddProductPrice(d)
	return spu
}

// SetQuantity sets the "quantity" field.
func (spu *SellerProductUpdate) SetQuantity(i int) *SellerProductUpdate {
	spu.mutation.ResetQuantity()
	spu.mutation.SetQuantity(i)
	return spu
}

// AddQuantity adds i to the "quantity" field.
func (spu *SellerProductUpdate) AddQuantity(i int) *SellerProductUpdate {
	spu.mutation.AddQuantity(i)
	return spu
}

// SetActive sets the "active" field.
func (spu *SellerProductUpdate) SetActive(b bool) *SellerProductUpdate {
	spu.mutation.SetActive(b)
	return spu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (spu *SellerProductUpdate) SetNillableActive(b *bool) *SellerProductUpdate {
	if b != nil {
		spu.SetActive(*b)
	}
	return spu
}

// SetDescription sets the "description" field.
func (spu *SellerProductUpdate) SetDescription(s string) *SellerProductUpdate {
	spu.mutation.SetDescription(s)
	return spu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (spu *SellerProductUpdate) SetNillableDescription(s *string) *SellerProductUpdate {
	if s != nil {
		spu.SetDescription(*s)
	}
	return spu
}

// ClearDescription clears the value of the "description" field.
func (spu *SellerProductUpdate) ClearDescription() *SellerProductUpdate {
	spu.mutation.ClearDescription()
	return spu
}

// SetOfferPrice sets the "offer_price" field.
func (spu *SellerProductUpdate) SetOfferPrice(i int) *SellerProductUpdate {
	spu.mutation.ResetOfferPrice()
	spu.mutation.SetOfferPrice(i)
	return spu
}

// SetNillableOfferPrice sets the "offer_price" field if the given value is not nil.
func (spu *SellerProductUpdate) SetNillableOfferPrice(i *int) *SellerProductUpdate {
	if i != nil {
		spu.SetOfferPrice(*i)
	}
	return spu
}

// AddOfferPrice adds i to the "offer_price" field.
func (spu *SellerProductUpdate) AddOfferPrice(i int) *SellerProductUpdate {
	spu.mutation.AddOfferPrice(i)
	return spu
}

// SetOfferPriceStart sets the "offer_price_start" field.
func (spu *SellerProductUpdate) SetOfferPriceStart(t time.Time) *SellerProductUpdate {
	spu.mutation.SetOfferPriceStart(t)
	return spu
}

// SetNillableOfferPriceStart sets the "offer_price_start" field if the given value is not nil.
func (spu *SellerProductUpdate) SetNillableOfferPriceStart(t *time.Time) *SellerProductUpdate {
	if t != nil {
		spu.SetOfferPriceStart(*t)
	}
	return spu
}

// ClearOfferPriceStart clears the value of the "offer_price_start" field.
func (spu *SellerProductUpdate) ClearOfferPriceStart() *SellerProductUpdate {
	spu.mutation.ClearOfferPriceStart()
	return spu
}

// SetOfferPriceEnd sets the "offer_price_end" field.
func (spu *SellerProductUpdate) SetOfferPriceEnd(t time.Time) *SellerProductUpdate {
	spu.mutation.SetOfferPriceEnd(t)
	return spu
}

// SetNillableOfferPriceEnd sets the "offer_price_end" field if the given value is not nil.
func (spu *SellerProductUpdate) SetNillableOfferPriceEnd(t *time.Time) *SellerProductUpdate {
	if t != nil {
		spu.SetOfferPriceEnd(*t)
	}
	return spu
}

// ClearOfferPriceEnd clears the value of the "offer_price_end" field.
func (spu *SellerProductUpdate) ClearOfferPriceEnd() *SellerProductUpdate {
	spu.mutation.ClearOfferPriceEnd()
	return spu
}

// SetNextStock sets the "next_stock" field.
func (spu *SellerProductUpdate) SetNextStock(t time.Time) *SellerProductUpdate {
	spu.mutation.SetNextStock(t)
	return spu
}

// SetNillableNextStock sets the "next_stock" field if the given value is not nil.
func (spu *SellerProductUpdate) SetNillableNextStock(t *time.Time) *SellerProductUpdate {
	if t != nil {
		spu.SetNextStock(*t)
	}
	return spu
}

// ClearNextStock clears the value of the "next_stock" field.
func (spu *SellerProductUpdate) ClearNextStock() *SellerProductUpdate {
	spu.mutation.ClearNextStock()
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *SellerProductUpdate) SetUpdatedAt(t time.Time) *SellerProductUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetDeletedAt sets the "deleted_at" field.
func (spu *SellerProductUpdate) SetDeletedAt(t time.Time) *SellerProductUpdate {
	spu.mutation.SetDeletedAt(t)
	return spu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spu *SellerProductUpdate) SetNillableDeletedAt(t *time.Time) *SellerProductUpdate {
	if t != nil {
		spu.SetDeletedAt(*t)
	}
	return spu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spu *SellerProductUpdate) ClearDeletedAt() *SellerProductUpdate {
	spu.mutation.ClearDeletedAt()
	return spu
}

// SetBrandID sets the "brand" edge to the Brand entity by ID.
func (spu *SellerProductUpdate) SetBrandID(id int) *SellerProductUpdate {
	spu.mutation.SetBrandID(id)
	return spu
}

// SetNillableBrandID sets the "brand" edge to the Brand entity by ID if the given value is not nil.
func (spu *SellerProductUpdate) SetNillableBrandID(id *int) *SellerProductUpdate {
	if id != nil {
		spu = spu.SetBrandID(*id)
	}
	return spu
}

// SetBrand sets the "brand" edge to the Brand entity.
func (spu *SellerProductUpdate) SetBrand(b *Brand) *SellerProductUpdate {
	return spu.SetBrandID(b.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spu *SellerProductUpdate) SetUserID(id int) *SellerProductUpdate {
	spu.mutation.SetUserID(id)
	return spu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (spu *SellerProductUpdate) SetNillableUserID(id *int) *SellerProductUpdate {
	if id != nil {
		spu = spu.SetUserID(*id)
	}
	return spu
}

// SetUser sets the "user" edge to the User entity.
func (spu *SellerProductUpdate) SetUser(u *User) *SellerProductUpdate {
	return spu.SetUserID(u.ID)
}

// AddSellerProductImageIDs adds the "seller_product_images" edge to the SellerProductImage entity by IDs.
func (spu *SellerProductUpdate) AddSellerProductImageIDs(ids ...int) *SellerProductUpdate {
	spu.mutation.AddSellerProductImageIDs(ids...)
	return spu
}

// AddSellerProductImages adds the "seller_product_images" edges to the SellerProductImage entity.
func (spu *SellerProductUpdate) AddSellerProductImages(s ...*SellerProductImage) *SellerProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.AddSellerProductImageIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (spu *SellerProductUpdate) AddCategoryIDs(ids ...int) *SellerProductUpdate {
	spu.mutation.AddCategoryIDs(ids...)
	return spu
}

// AddCategories adds the "categories" edges to the Category entity.
func (spu *SellerProductUpdate) AddCategories(c ...*Category) *SellerProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spu.AddCategoryIDs(ids...)
}

// SetShopID sets the "shop" edge to the SellerShop entity by ID.
func (spu *SellerProductUpdate) SetShopID(id int) *SellerProductUpdate {
	spu.mutation.SetShopID(id)
	return spu
}

// SetNillableShopID sets the "shop" edge to the SellerShop entity by ID if the given value is not nil.
func (spu *SellerProductUpdate) SetNillableShopID(id *int) *SellerProductUpdate {
	if id != nil {
		spu = spu.SetShopID(*id)
	}
	return spu
}

// SetShop sets the "shop" edge to the SellerShop entity.
func (spu *SellerProductUpdate) SetShop(s *SellerShop) *SellerProductUpdate {
	return spu.SetShopID(s.ID)
}

// AddCartProductIDs adds the "cart_products" edge to the CartProduct entity by IDs.
func (spu *SellerProductUpdate) AddCartProductIDs(ids ...int) *SellerProductUpdate {
	spu.mutation.AddCartProductIDs(ids...)
	return spu
}

// AddCartProducts adds the "cart_products" edges to the CartProduct entity.
func (spu *SellerProductUpdate) AddCartProducts(c ...*CartProduct) *SellerProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spu.AddCartProductIDs(ids...)
}

// AddCheckoutProductIDs adds the "checkout_products" edge to the CheckoutProduct entity by IDs.
func (spu *SellerProductUpdate) AddCheckoutProductIDs(ids ...int) *SellerProductUpdate {
	spu.mutation.AddCheckoutProductIDs(ids...)
	return spu
}

// AddCheckoutProducts adds the "checkout_products" edges to the CheckoutProduct entity.
func (spu *SellerProductUpdate) AddCheckoutProducts(c ...*CheckoutProduct) *SellerProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spu.AddCheckoutProductIDs(ids...)
}

// AddSellerProductVariationIDs adds the "seller_product_variations" edge to the SellerProductVariation entity by IDs.
func (spu *SellerProductUpdate) AddSellerProductVariationIDs(ids ...int) *SellerProductUpdate {
	spu.mutation.AddSellerProductVariationIDs(ids...)
	return spu
}

// AddSellerProductVariations adds the "seller_product_variations" edges to the SellerProductVariation entity.
func (spu *SellerProductUpdate) AddSellerProductVariations(s ...*SellerProductVariation) *SellerProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.AddSellerProductVariationIDs(ids...)
}

// Mutation returns the SellerProductMutation object of the builder.
func (spu *SellerProductUpdate) Mutation() *SellerProductMutation {
	return spu.mutation
}

// ClearBrand clears the "brand" edge to the Brand entity.
func (spu *SellerProductUpdate) ClearBrand() *SellerProductUpdate {
	spu.mutation.ClearBrand()
	return spu
}

// ClearUser clears the "user" edge to the User entity.
func (spu *SellerProductUpdate) ClearUser() *SellerProductUpdate {
	spu.mutation.ClearUser()
	return spu
}

// ClearSellerProductImages clears all "seller_product_images" edges to the SellerProductImage entity.
func (spu *SellerProductUpdate) ClearSellerProductImages() *SellerProductUpdate {
	spu.mutation.ClearSellerProductImages()
	return spu
}

// RemoveSellerProductImageIDs removes the "seller_product_images" edge to SellerProductImage entities by IDs.
func (spu *SellerProductUpdate) RemoveSellerProductImageIDs(ids ...int) *SellerProductUpdate {
	spu.mutation.RemoveSellerProductImageIDs(ids...)
	return spu
}

// RemoveSellerProductImages removes "seller_product_images" edges to SellerProductImage entities.
func (spu *SellerProductUpdate) RemoveSellerProductImages(s ...*SellerProductImage) *SellerProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.RemoveSellerProductImageIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (spu *SellerProductUpdate) ClearCategories() *SellerProductUpdate {
	spu.mutation.ClearCategories()
	return spu
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (spu *SellerProductUpdate) RemoveCategoryIDs(ids ...int) *SellerProductUpdate {
	spu.mutation.RemoveCategoryIDs(ids...)
	return spu
}

// RemoveCategories removes "categories" edges to Category entities.
func (spu *SellerProductUpdate) RemoveCategories(c ...*Category) *SellerProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spu.RemoveCategoryIDs(ids...)
}

// ClearShop clears the "shop" edge to the SellerShop entity.
func (spu *SellerProductUpdate) ClearShop() *SellerProductUpdate {
	spu.mutation.ClearShop()
	return spu
}

// ClearCartProducts clears all "cart_products" edges to the CartProduct entity.
func (spu *SellerProductUpdate) ClearCartProducts() *SellerProductUpdate {
	spu.mutation.ClearCartProducts()
	return spu
}

// RemoveCartProductIDs removes the "cart_products" edge to CartProduct entities by IDs.
func (spu *SellerProductUpdate) RemoveCartProductIDs(ids ...int) *SellerProductUpdate {
	spu.mutation.RemoveCartProductIDs(ids...)
	return spu
}

// RemoveCartProducts removes "cart_products" edges to CartProduct entities.
func (spu *SellerProductUpdate) RemoveCartProducts(c ...*CartProduct) *SellerProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spu.RemoveCartProductIDs(ids...)
}

// ClearCheckoutProducts clears all "checkout_products" edges to the CheckoutProduct entity.
func (spu *SellerProductUpdate) ClearCheckoutProducts() *SellerProductUpdate {
	spu.mutation.ClearCheckoutProducts()
	return spu
}

// RemoveCheckoutProductIDs removes the "checkout_products" edge to CheckoutProduct entities by IDs.
func (spu *SellerProductUpdate) RemoveCheckoutProductIDs(ids ...int) *SellerProductUpdate {
	spu.mutation.RemoveCheckoutProductIDs(ids...)
	return spu
}

// RemoveCheckoutProducts removes "checkout_products" edges to CheckoutProduct entities.
func (spu *SellerProductUpdate) RemoveCheckoutProducts(c ...*CheckoutProduct) *SellerProductUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spu.RemoveCheckoutProductIDs(ids...)
}

// ClearSellerProductVariations clears all "seller_product_variations" edges to the SellerProductVariation entity.
func (spu *SellerProductUpdate) ClearSellerProductVariations() *SellerProductUpdate {
	spu.mutation.ClearSellerProductVariations()
	return spu
}

// RemoveSellerProductVariationIDs removes the "seller_product_variations" edge to SellerProductVariation entities by IDs.
func (spu *SellerProductUpdate) RemoveSellerProductVariationIDs(ids ...int) *SellerProductUpdate {
	spu.mutation.RemoveSellerProductVariationIDs(ids...)
	return spu
}

// RemoveSellerProductVariations removes "seller_product_variations" edges to SellerProductVariation entities.
func (spu *SellerProductUpdate) RemoveSellerProductVariations(s ...*SellerProductVariation) *SellerProductUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.RemoveSellerProductVariationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SellerProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	spu.defaults()
	if len(spu.hooks) == 0 {
		affected, err = spu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spu.mutation = mutation
			affected, err = spu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(spu.hooks) - 1; i >= 0; i-- {
			if spu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SellerProductUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SellerProductUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SellerProductUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *SellerProductUpdate) defaults() {
	if _, ok := spu.mutation.UpdatedAt(); !ok {
		v := sellerproduct.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
}

func (spu *SellerProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellerproduct.Table,
			Columns: sellerproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproduct.FieldID,
			},
		},
	}
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproduct.FieldName,
		})
	}
	if value, ok := spu.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproduct.FieldSlug,
		})
	}
	if value, ok := spu.mutation.SellingPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproduct.FieldSellingPrice,
		})
	}
	if value, ok := spu.mutation.AddedSellingPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproduct.FieldSellingPrice,
		})
	}
	if value, ok := spu.mutation.ProductPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproduct.FieldProductPrice,
		})
	}
	if value, ok := spu.mutation.AddedProductPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproduct.FieldProductPrice,
		})
	}
	if value, ok := spu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproduct.FieldQuantity,
		})
	}
	if value, ok := spu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproduct.FieldQuantity,
		})
	}
	if value, ok := spu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sellerproduct.FieldActive,
		})
	}
	if value, ok := spu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproduct.FieldDescription,
		})
	}
	if spu.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sellerproduct.FieldDescription,
		})
	}
	if value, ok := spu.mutation.OfferPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproduct.FieldOfferPrice,
		})
	}
	if value, ok := spu.mutation.AddedOfferPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproduct.FieldOfferPrice,
		})
	}
	if value, ok := spu.mutation.OfferPriceStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldOfferPriceStart,
		})
	}
	if spu.mutation.OfferPriceStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproduct.FieldOfferPriceStart,
		})
	}
	if value, ok := spu.mutation.OfferPriceEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldOfferPriceEnd,
		})
	}
	if spu.mutation.OfferPriceEndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproduct.FieldOfferPriceEnd,
		})
	}
	if value, ok := spu.mutation.NextStock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldNextStock,
		})
	}
	if spu.mutation.NextStockCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproduct.FieldNextStock,
		})
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldUpdatedAt,
		})
	}
	if value, ok := spu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldDeletedAt,
		})
	}
	if spu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproduct.FieldDeletedAt,
		})
	}
	if spu.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.BrandTable,
			Columns: []string{sellerproduct.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: brand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.BrandTable,
			Columns: []string{sellerproduct.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: brand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.UserTable,
			Columns: []string{sellerproduct.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.UserTable,
			Columns: []string{sellerproduct.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.SellerProductImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductImagesTable,
			Columns: []string{sellerproduct.SellerProductImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductimage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedSellerProductImagesIDs(); len(nodes) > 0 && !spu.mutation.SellerProductImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductImagesTable,
			Columns: []string{sellerproduct.SellerProductImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.SellerProductImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductImagesTable,
			Columns: []string{sellerproduct.SellerProductImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sellerproduct.CategoriesTable,
			Columns: sellerproduct.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !spu.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sellerproduct.CategoriesTable,
			Columns: sellerproduct.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sellerproduct.CategoriesTable,
			Columns: sellerproduct.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.ShopTable,
			Columns: []string{sellerproduct.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.ShopTable,
			Columns: []string{sellerproduct.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.CartProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CartProductsTable,
			Columns: []string{sellerproduct.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedCartProductsIDs(); len(nodes) > 0 && !spu.mutation.CartProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CartProductsTable,
			Columns: []string{sellerproduct.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.CartProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CartProductsTable,
			Columns: []string{sellerproduct.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CheckoutProductsTable,
			Columns: []string{sellerproduct.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedCheckoutProductsIDs(); len(nodes) > 0 && !spu.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CheckoutProductsTable,
			Columns: []string{sellerproduct.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.CheckoutProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CheckoutProductsTable,
			Columns: []string{sellerproduct.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.SellerProductVariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductVariationsTable,
			Columns: []string{sellerproduct.SellerProductVariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedSellerProductVariationsIDs(); len(nodes) > 0 && !spu.mutation.SellerProductVariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductVariationsTable,
			Columns: []string{sellerproduct.SellerProductVariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.SellerProductVariationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductVariationsTable,
			Columns: []string{sellerproduct.SellerProductVariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellerproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// SellerProductUpdateOne is the builder for updating a single SellerProduct entity.
type SellerProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SellerProductMutation
}

// SetName sets the "name" field.
func (spuo *SellerProductUpdateOne) SetName(s string) *SellerProductUpdateOne {
	spuo.mutation.SetName(s)
	return spuo
}

// SetSlug sets the "slug" field.
func (spuo *SellerProductUpdateOne) SetSlug(s string) *SellerProductUpdateOne {
	spuo.mutation.SetSlug(s)
	return spuo
}

// SetSellingPrice sets the "selling_price" field.
func (spuo *SellerProductUpdateOne) SetSellingPrice(d decimal.Decimal) *SellerProductUpdateOne {
	spuo.mutation.ResetSellingPrice()
	spuo.mutation.SetSellingPrice(d)
	return spuo
}

// AddSellingPrice adds d to the "selling_price" field.
func (spuo *SellerProductUpdateOne) AddSellingPrice(d decimal.Decimal) *SellerProductUpdateOne {
	spuo.mutation.AddSellingPrice(d)
	return spuo
}

// SetProductPrice sets the "product_price" field.
func (spuo *SellerProductUpdateOne) SetProductPrice(d decimal.Decimal) *SellerProductUpdateOne {
	spuo.mutation.ResetProductPrice()
	spuo.mutation.SetProductPrice(d)
	return spuo
}

// AddProductPrice adds d to the "product_price" field.
func (spuo *SellerProductUpdateOne) AddProductPrice(d decimal.Decimal) *SellerProductUpdateOne {
	spuo.mutation.AddProductPrice(d)
	return spuo
}

// SetQuantity sets the "quantity" field.
func (spuo *SellerProductUpdateOne) SetQuantity(i int) *SellerProductUpdateOne {
	spuo.mutation.ResetQuantity()
	spuo.mutation.SetQuantity(i)
	return spuo
}

// AddQuantity adds i to the "quantity" field.
func (spuo *SellerProductUpdateOne) AddQuantity(i int) *SellerProductUpdateOne {
	spuo.mutation.AddQuantity(i)
	return spuo
}

// SetActive sets the "active" field.
func (spuo *SellerProductUpdateOne) SetActive(b bool) *SellerProductUpdateOne {
	spuo.mutation.SetActive(b)
	return spuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (spuo *SellerProductUpdateOne) SetNillableActive(b *bool) *SellerProductUpdateOne {
	if b != nil {
		spuo.SetActive(*b)
	}
	return spuo
}

// SetDescription sets the "description" field.
func (spuo *SellerProductUpdateOne) SetDescription(s string) *SellerProductUpdateOne {
	spuo.mutation.SetDescription(s)
	return spuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (spuo *SellerProductUpdateOne) SetNillableDescription(s *string) *SellerProductUpdateOne {
	if s != nil {
		spuo.SetDescription(*s)
	}
	return spuo
}

// ClearDescription clears the value of the "description" field.
func (spuo *SellerProductUpdateOne) ClearDescription() *SellerProductUpdateOne {
	spuo.mutation.ClearDescription()
	return spuo
}

// SetOfferPrice sets the "offer_price" field.
func (spuo *SellerProductUpdateOne) SetOfferPrice(i int) *SellerProductUpdateOne {
	spuo.mutation.ResetOfferPrice()
	spuo.mutation.SetOfferPrice(i)
	return spuo
}

// SetNillableOfferPrice sets the "offer_price" field if the given value is not nil.
func (spuo *SellerProductUpdateOne) SetNillableOfferPrice(i *int) *SellerProductUpdateOne {
	if i != nil {
		spuo.SetOfferPrice(*i)
	}
	return spuo
}

// AddOfferPrice adds i to the "offer_price" field.
func (spuo *SellerProductUpdateOne) AddOfferPrice(i int) *SellerProductUpdateOne {
	spuo.mutation.AddOfferPrice(i)
	return spuo
}

// SetOfferPriceStart sets the "offer_price_start" field.
func (spuo *SellerProductUpdateOne) SetOfferPriceStart(t time.Time) *SellerProductUpdateOne {
	spuo.mutation.SetOfferPriceStart(t)
	return spuo
}

// SetNillableOfferPriceStart sets the "offer_price_start" field if the given value is not nil.
func (spuo *SellerProductUpdateOne) SetNillableOfferPriceStart(t *time.Time) *SellerProductUpdateOne {
	if t != nil {
		spuo.SetOfferPriceStart(*t)
	}
	return spuo
}

// ClearOfferPriceStart clears the value of the "offer_price_start" field.
func (spuo *SellerProductUpdateOne) ClearOfferPriceStart() *SellerProductUpdateOne {
	spuo.mutation.ClearOfferPriceStart()
	return spuo
}

// SetOfferPriceEnd sets the "offer_price_end" field.
func (spuo *SellerProductUpdateOne) SetOfferPriceEnd(t time.Time) *SellerProductUpdateOne {
	spuo.mutation.SetOfferPriceEnd(t)
	return spuo
}

// SetNillableOfferPriceEnd sets the "offer_price_end" field if the given value is not nil.
func (spuo *SellerProductUpdateOne) SetNillableOfferPriceEnd(t *time.Time) *SellerProductUpdateOne {
	if t != nil {
		spuo.SetOfferPriceEnd(*t)
	}
	return spuo
}

// ClearOfferPriceEnd clears the value of the "offer_price_end" field.
func (spuo *SellerProductUpdateOne) ClearOfferPriceEnd() *SellerProductUpdateOne {
	spuo.mutation.ClearOfferPriceEnd()
	return spuo
}

// SetNextStock sets the "next_stock" field.
func (spuo *SellerProductUpdateOne) SetNextStock(t time.Time) *SellerProductUpdateOne {
	spuo.mutation.SetNextStock(t)
	return spuo
}

// SetNillableNextStock sets the "next_stock" field if the given value is not nil.
func (spuo *SellerProductUpdateOne) SetNillableNextStock(t *time.Time) *SellerProductUpdateOne {
	if t != nil {
		spuo.SetNextStock(*t)
	}
	return spuo
}

// ClearNextStock clears the value of the "next_stock" field.
func (spuo *SellerProductUpdateOne) ClearNextStock() *SellerProductUpdateOne {
	spuo.mutation.ClearNextStock()
	return spuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *SellerProductUpdateOne) SetUpdatedAt(t time.Time) *SellerProductUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetDeletedAt sets the "deleted_at" field.
func (spuo *SellerProductUpdateOne) SetDeletedAt(t time.Time) *SellerProductUpdateOne {
	spuo.mutation.SetDeletedAt(t)
	return spuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spuo *SellerProductUpdateOne) SetNillableDeletedAt(t *time.Time) *SellerProductUpdateOne {
	if t != nil {
		spuo.SetDeletedAt(*t)
	}
	return spuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spuo *SellerProductUpdateOne) ClearDeletedAt() *SellerProductUpdateOne {
	spuo.mutation.ClearDeletedAt()
	return spuo
}

// SetBrandID sets the "brand" edge to the Brand entity by ID.
func (spuo *SellerProductUpdateOne) SetBrandID(id int) *SellerProductUpdateOne {
	spuo.mutation.SetBrandID(id)
	return spuo
}

// SetNillableBrandID sets the "brand" edge to the Brand entity by ID if the given value is not nil.
func (spuo *SellerProductUpdateOne) SetNillableBrandID(id *int) *SellerProductUpdateOne {
	if id != nil {
		spuo = spuo.SetBrandID(*id)
	}
	return spuo
}

// SetBrand sets the "brand" edge to the Brand entity.
func (spuo *SellerProductUpdateOne) SetBrand(b *Brand) *SellerProductUpdateOne {
	return spuo.SetBrandID(b.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (spuo *SellerProductUpdateOne) SetUserID(id int) *SellerProductUpdateOne {
	spuo.mutation.SetUserID(id)
	return spuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (spuo *SellerProductUpdateOne) SetNillableUserID(id *int) *SellerProductUpdateOne {
	if id != nil {
		spuo = spuo.SetUserID(*id)
	}
	return spuo
}

// SetUser sets the "user" edge to the User entity.
func (spuo *SellerProductUpdateOne) SetUser(u *User) *SellerProductUpdateOne {
	return spuo.SetUserID(u.ID)
}

// AddSellerProductImageIDs adds the "seller_product_images" edge to the SellerProductImage entity by IDs.
func (spuo *SellerProductUpdateOne) AddSellerProductImageIDs(ids ...int) *SellerProductUpdateOne {
	spuo.mutation.AddSellerProductImageIDs(ids...)
	return spuo
}

// AddSellerProductImages adds the "seller_product_images" edges to the SellerProductImage entity.
func (spuo *SellerProductUpdateOne) AddSellerProductImages(s ...*SellerProductImage) *SellerProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.AddSellerProductImageIDs(ids...)
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (spuo *SellerProductUpdateOne) AddCategoryIDs(ids ...int) *SellerProductUpdateOne {
	spuo.mutation.AddCategoryIDs(ids...)
	return spuo
}

// AddCategories adds the "categories" edges to the Category entity.
func (spuo *SellerProductUpdateOne) AddCategories(c ...*Category) *SellerProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spuo.AddCategoryIDs(ids...)
}

// SetShopID sets the "shop" edge to the SellerShop entity by ID.
func (spuo *SellerProductUpdateOne) SetShopID(id int) *SellerProductUpdateOne {
	spuo.mutation.SetShopID(id)
	return spuo
}

// SetNillableShopID sets the "shop" edge to the SellerShop entity by ID if the given value is not nil.
func (spuo *SellerProductUpdateOne) SetNillableShopID(id *int) *SellerProductUpdateOne {
	if id != nil {
		spuo = spuo.SetShopID(*id)
	}
	return spuo
}

// SetShop sets the "shop" edge to the SellerShop entity.
func (spuo *SellerProductUpdateOne) SetShop(s *SellerShop) *SellerProductUpdateOne {
	return spuo.SetShopID(s.ID)
}

// AddCartProductIDs adds the "cart_products" edge to the CartProduct entity by IDs.
func (spuo *SellerProductUpdateOne) AddCartProductIDs(ids ...int) *SellerProductUpdateOne {
	spuo.mutation.AddCartProductIDs(ids...)
	return spuo
}

// AddCartProducts adds the "cart_products" edges to the CartProduct entity.
func (spuo *SellerProductUpdateOne) AddCartProducts(c ...*CartProduct) *SellerProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spuo.AddCartProductIDs(ids...)
}

// AddCheckoutProductIDs adds the "checkout_products" edge to the CheckoutProduct entity by IDs.
func (spuo *SellerProductUpdateOne) AddCheckoutProductIDs(ids ...int) *SellerProductUpdateOne {
	spuo.mutation.AddCheckoutProductIDs(ids...)
	return spuo
}

// AddCheckoutProducts adds the "checkout_products" edges to the CheckoutProduct entity.
func (spuo *SellerProductUpdateOne) AddCheckoutProducts(c ...*CheckoutProduct) *SellerProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spuo.AddCheckoutProductIDs(ids...)
}

// AddSellerProductVariationIDs adds the "seller_product_variations" edge to the SellerProductVariation entity by IDs.
func (spuo *SellerProductUpdateOne) AddSellerProductVariationIDs(ids ...int) *SellerProductUpdateOne {
	spuo.mutation.AddSellerProductVariationIDs(ids...)
	return spuo
}

// AddSellerProductVariations adds the "seller_product_variations" edges to the SellerProductVariation entity.
func (spuo *SellerProductUpdateOne) AddSellerProductVariations(s ...*SellerProductVariation) *SellerProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.AddSellerProductVariationIDs(ids...)
}

// Mutation returns the SellerProductMutation object of the builder.
func (spuo *SellerProductUpdateOne) Mutation() *SellerProductMutation {
	return spuo.mutation
}

// ClearBrand clears the "brand" edge to the Brand entity.
func (spuo *SellerProductUpdateOne) ClearBrand() *SellerProductUpdateOne {
	spuo.mutation.ClearBrand()
	return spuo
}

// ClearUser clears the "user" edge to the User entity.
func (spuo *SellerProductUpdateOne) ClearUser() *SellerProductUpdateOne {
	spuo.mutation.ClearUser()
	return spuo
}

// ClearSellerProductImages clears all "seller_product_images" edges to the SellerProductImage entity.
func (spuo *SellerProductUpdateOne) ClearSellerProductImages() *SellerProductUpdateOne {
	spuo.mutation.ClearSellerProductImages()
	return spuo
}

// RemoveSellerProductImageIDs removes the "seller_product_images" edge to SellerProductImage entities by IDs.
func (spuo *SellerProductUpdateOne) RemoveSellerProductImageIDs(ids ...int) *SellerProductUpdateOne {
	spuo.mutation.RemoveSellerProductImageIDs(ids...)
	return spuo
}

// RemoveSellerProductImages removes "seller_product_images" edges to SellerProductImage entities.
func (spuo *SellerProductUpdateOne) RemoveSellerProductImages(s ...*SellerProductImage) *SellerProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.RemoveSellerProductImageIDs(ids...)
}

// ClearCategories clears all "categories" edges to the Category entity.
func (spuo *SellerProductUpdateOne) ClearCategories() *SellerProductUpdateOne {
	spuo.mutation.ClearCategories()
	return spuo
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (spuo *SellerProductUpdateOne) RemoveCategoryIDs(ids ...int) *SellerProductUpdateOne {
	spuo.mutation.RemoveCategoryIDs(ids...)
	return spuo
}

// RemoveCategories removes "categories" edges to Category entities.
func (spuo *SellerProductUpdateOne) RemoveCategories(c ...*Category) *SellerProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spuo.RemoveCategoryIDs(ids...)
}

// ClearShop clears the "shop" edge to the SellerShop entity.
func (spuo *SellerProductUpdateOne) ClearShop() *SellerProductUpdateOne {
	spuo.mutation.ClearShop()
	return spuo
}

// ClearCartProducts clears all "cart_products" edges to the CartProduct entity.
func (spuo *SellerProductUpdateOne) ClearCartProducts() *SellerProductUpdateOne {
	spuo.mutation.ClearCartProducts()
	return spuo
}

// RemoveCartProductIDs removes the "cart_products" edge to CartProduct entities by IDs.
func (spuo *SellerProductUpdateOne) RemoveCartProductIDs(ids ...int) *SellerProductUpdateOne {
	spuo.mutation.RemoveCartProductIDs(ids...)
	return spuo
}

// RemoveCartProducts removes "cart_products" edges to CartProduct entities.
func (spuo *SellerProductUpdateOne) RemoveCartProducts(c ...*CartProduct) *SellerProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spuo.RemoveCartProductIDs(ids...)
}

// ClearCheckoutProducts clears all "checkout_products" edges to the CheckoutProduct entity.
func (spuo *SellerProductUpdateOne) ClearCheckoutProducts() *SellerProductUpdateOne {
	spuo.mutation.ClearCheckoutProducts()
	return spuo
}

// RemoveCheckoutProductIDs removes the "checkout_products" edge to CheckoutProduct entities by IDs.
func (spuo *SellerProductUpdateOne) RemoveCheckoutProductIDs(ids ...int) *SellerProductUpdateOne {
	spuo.mutation.RemoveCheckoutProductIDs(ids...)
	return spuo
}

// RemoveCheckoutProducts removes "checkout_products" edges to CheckoutProduct entities.
func (spuo *SellerProductUpdateOne) RemoveCheckoutProducts(c ...*CheckoutProduct) *SellerProductUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return spuo.RemoveCheckoutProductIDs(ids...)
}

// ClearSellerProductVariations clears all "seller_product_variations" edges to the SellerProductVariation entity.
func (spuo *SellerProductUpdateOne) ClearSellerProductVariations() *SellerProductUpdateOne {
	spuo.mutation.ClearSellerProductVariations()
	return spuo
}

// RemoveSellerProductVariationIDs removes the "seller_product_variations" edge to SellerProductVariation entities by IDs.
func (spuo *SellerProductUpdateOne) RemoveSellerProductVariationIDs(ids ...int) *SellerProductUpdateOne {
	spuo.mutation.RemoveSellerProductVariationIDs(ids...)
	return spuo
}

// RemoveSellerProductVariations removes "seller_product_variations" edges to SellerProductVariation entities.
func (spuo *SellerProductUpdateOne) RemoveSellerProductVariations(s ...*SellerProductVariation) *SellerProductUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.RemoveSellerProductVariationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SellerProductUpdateOne) Select(field string, fields ...string) *SellerProductUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SellerProduct entity.
func (spuo *SellerProductUpdateOne) Save(ctx context.Context) (*SellerProduct, error) {
	var (
		err  error
		node *SellerProduct
	)
	spuo.defaults()
	if len(spuo.hooks) == 0 {
		node, err = spuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SellerProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			spuo.mutation = mutation
			node, err = spuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(spuo.hooks) - 1; i >= 0; i-- {
			if spuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = spuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, spuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SellerProductUpdateOne) SaveX(ctx context.Context) *SellerProduct {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SellerProductUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SellerProductUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *SellerProductUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdatedAt(); !ok {
		v := sellerproduct.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
}

func (spuo *SellerProductUpdateOne) sqlSave(ctx context.Context) (_node *SellerProduct, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   sellerproduct.Table,
			Columns: sellerproduct.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: sellerproduct.FieldID,
			},
		},
	}
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SellerProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sellerproduct.FieldID)
		for _, f := range fields {
			if !sellerproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != sellerproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproduct.FieldName,
		})
	}
	if value, ok := spuo.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproduct.FieldSlug,
		})
	}
	if value, ok := spuo.mutation.SellingPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproduct.FieldSellingPrice,
		})
	}
	if value, ok := spuo.mutation.AddedSellingPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproduct.FieldSellingPrice,
		})
	}
	if value, ok := spuo.mutation.ProductPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproduct.FieldProductPrice,
		})
	}
	if value, ok := spuo.mutation.AddedProductPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: sellerproduct.FieldProductPrice,
		})
	}
	if value, ok := spuo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproduct.FieldQuantity,
		})
	}
	if value, ok := spuo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproduct.FieldQuantity,
		})
	}
	if value, ok := spuo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: sellerproduct.FieldActive,
		})
	}
	if value, ok := spuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: sellerproduct.FieldDescription,
		})
	}
	if spuo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: sellerproduct.FieldDescription,
		})
	}
	if value, ok := spuo.mutation.OfferPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproduct.FieldOfferPrice,
		})
	}
	if value, ok := spuo.mutation.AddedOfferPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: sellerproduct.FieldOfferPrice,
		})
	}
	if value, ok := spuo.mutation.OfferPriceStart(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldOfferPriceStart,
		})
	}
	if spuo.mutation.OfferPriceStartCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproduct.FieldOfferPriceStart,
		})
	}
	if value, ok := spuo.mutation.OfferPriceEnd(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldOfferPriceEnd,
		})
	}
	if spuo.mutation.OfferPriceEndCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproduct.FieldOfferPriceEnd,
		})
	}
	if value, ok := spuo.mutation.NextStock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldNextStock,
		})
	}
	if spuo.mutation.NextStockCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproduct.FieldNextStock,
		})
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldUpdatedAt,
		})
	}
	if value, ok := spuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: sellerproduct.FieldDeletedAt,
		})
	}
	if spuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: sellerproduct.FieldDeletedAt,
		})
	}
	if spuo.mutation.BrandCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.BrandTable,
			Columns: []string{sellerproduct.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: brand.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.BrandIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.BrandTable,
			Columns: []string{sellerproduct.BrandColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: brand.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.UserTable,
			Columns: []string{sellerproduct.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.UserTable,
			Columns: []string{sellerproduct.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.SellerProductImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductImagesTable,
			Columns: []string{sellerproduct.SellerProductImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductimage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedSellerProductImagesIDs(); len(nodes) > 0 && !spuo.mutation.SellerProductImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductImagesTable,
			Columns: []string{sellerproduct.SellerProductImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.SellerProductImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductImagesTable,
			Columns: []string{sellerproduct.SellerProductImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductimage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sellerproduct.CategoriesTable,
			Columns: sellerproduct.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !spuo.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sellerproduct.CategoriesTable,
			Columns: sellerproduct.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   sellerproduct.CategoriesTable,
			Columns: sellerproduct.CategoriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.ShopCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.ShopTable,
			Columns: []string{sellerproduct.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.ShopIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   sellerproduct.ShopTable,
			Columns: []string{sellerproduct.ShopColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellershop.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.CartProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CartProductsTable,
			Columns: []string{sellerproduct.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedCartProductsIDs(); len(nodes) > 0 && !spuo.mutation.CartProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CartProductsTable,
			Columns: []string{sellerproduct.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.CartProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CartProductsTable,
			Columns: []string{sellerproduct.CartProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: cartproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CheckoutProductsTable,
			Columns: []string{sellerproduct.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedCheckoutProductsIDs(); len(nodes) > 0 && !spuo.mutation.CheckoutProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CheckoutProductsTable,
			Columns: []string{sellerproduct.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.CheckoutProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.CheckoutProductsTable,
			Columns: []string{sellerproduct.CheckoutProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: checkoutproduct.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.SellerProductVariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductVariationsTable,
			Columns: []string{sellerproduct.SellerProductVariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedSellerProductVariationsIDs(); len(nodes) > 0 && !spuo.mutation.SellerProductVariationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductVariationsTable,
			Columns: []string{sellerproduct.SellerProductVariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.SellerProductVariationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   sellerproduct.SellerProductVariationsTable,
			Columns: []string{sellerproduct.SellerProductVariationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: sellerproductvariation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SellerProduct{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sellerproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
