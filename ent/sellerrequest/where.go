// Code generated by entc, DO NOT EDIT.

package sellerrequest

import (
	"bongo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// SellerName applies equality check predicate on the "seller_name" field. It's identical to SellerNameEQ.
func SellerName(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSellerName), v))
	})
}

// ShopName applies equality check predicate on the "shop_name" field. It's identical to ShopNameEQ.
func ShopName(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopName), v))
	})
}

// ContactNumber applies equality check predicate on the "contact_number" field. It's identical to ContactNumberEQ.
func ContactNumber(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactNumber), v))
	})
}

// ShopLocation applies equality check predicate on the "shop_location" field. It's identical to ShopLocationEQ.
func ShopLocation(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopLocation), v))
	})
}

// TaxID applies equality check predicate on the "tax_id" field. It's identical to TaxIDEQ.
func TaxID(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxID), v))
	})
}

// Accepted applies equality check predicate on the "accepted" field. It's identical to AcceptedEQ.
func Accepted(v bool) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccepted), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// SellerNameEQ applies the EQ predicate on the "seller_name" field.
func SellerNameEQ(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSellerName), v))
	})
}

// SellerNameNEQ applies the NEQ predicate on the "seller_name" field.
func SellerNameNEQ(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSellerName), v))
	})
}

// SellerNameIn applies the In predicate on the "seller_name" field.
func SellerNameIn(vs ...string) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSellerName), v...))
	})
}

// SellerNameNotIn applies the NotIn predicate on the "seller_name" field.
func SellerNameNotIn(vs ...string) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSellerName), v...))
	})
}

// SellerNameGT applies the GT predicate on the "seller_name" field.
func SellerNameGT(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSellerName), v))
	})
}

// SellerNameGTE applies the GTE predicate on the "seller_name" field.
func SellerNameGTE(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSellerName), v))
	})
}

// SellerNameLT applies the LT predicate on the "seller_name" field.
func SellerNameLT(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSellerName), v))
	})
}

// SellerNameLTE applies the LTE predicate on the "seller_name" field.
func SellerNameLTE(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSellerName), v))
	})
}

// SellerNameContains applies the Contains predicate on the "seller_name" field.
func SellerNameContains(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSellerName), v))
	})
}

// SellerNameHasPrefix applies the HasPrefix predicate on the "seller_name" field.
func SellerNameHasPrefix(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSellerName), v))
	})
}

// SellerNameHasSuffix applies the HasSuffix predicate on the "seller_name" field.
func SellerNameHasSuffix(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSellerName), v))
	})
}

// SellerNameEqualFold applies the EqualFold predicate on the "seller_name" field.
func SellerNameEqualFold(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSellerName), v))
	})
}

// SellerNameContainsFold applies the ContainsFold predicate on the "seller_name" field.
func SellerNameContainsFold(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSellerName), v))
	})
}

// ShopNameEQ applies the EQ predicate on the "shop_name" field.
func ShopNameEQ(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopName), v))
	})
}

// ShopNameNEQ applies the NEQ predicate on the "shop_name" field.
func ShopNameNEQ(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShopName), v))
	})
}

// ShopNameIn applies the In predicate on the "shop_name" field.
func ShopNameIn(vs ...string) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShopName), v...))
	})
}

// ShopNameNotIn applies the NotIn predicate on the "shop_name" field.
func ShopNameNotIn(vs ...string) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShopName), v...))
	})
}

// ShopNameGT applies the GT predicate on the "shop_name" field.
func ShopNameGT(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShopName), v))
	})
}

// ShopNameGTE applies the GTE predicate on the "shop_name" field.
func ShopNameGTE(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShopName), v))
	})
}

// ShopNameLT applies the LT predicate on the "shop_name" field.
func ShopNameLT(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShopName), v))
	})
}

// ShopNameLTE applies the LTE predicate on the "shop_name" field.
func ShopNameLTE(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShopName), v))
	})
}

// ShopNameContains applies the Contains predicate on the "shop_name" field.
func ShopNameContains(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShopName), v))
	})
}

// ShopNameHasPrefix applies the HasPrefix predicate on the "shop_name" field.
func ShopNameHasPrefix(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShopName), v))
	})
}

// ShopNameHasSuffix applies the HasSuffix predicate on the "shop_name" field.
func ShopNameHasSuffix(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShopName), v))
	})
}

// ShopNameEqualFold applies the EqualFold predicate on the "shop_name" field.
func ShopNameEqualFold(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShopName), v))
	})
}

// ShopNameContainsFold applies the ContainsFold predicate on the "shop_name" field.
func ShopNameContainsFold(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShopName), v))
	})
}

// ContactNumberEQ applies the EQ predicate on the "contact_number" field.
func ContactNumberEQ(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContactNumber), v))
	})
}

// ContactNumberNEQ applies the NEQ predicate on the "contact_number" field.
func ContactNumberNEQ(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContactNumber), v))
	})
}

// ContactNumberIn applies the In predicate on the "contact_number" field.
func ContactNumberIn(vs ...string) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContactNumber), v...))
	})
}

// ContactNumberNotIn applies the NotIn predicate on the "contact_number" field.
func ContactNumberNotIn(vs ...string) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContactNumber), v...))
	})
}

// ContactNumberGT applies the GT predicate on the "contact_number" field.
func ContactNumberGT(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContactNumber), v))
	})
}

// ContactNumberGTE applies the GTE predicate on the "contact_number" field.
func ContactNumberGTE(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContactNumber), v))
	})
}

// ContactNumberLT applies the LT predicate on the "contact_number" field.
func ContactNumberLT(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContactNumber), v))
	})
}

// ContactNumberLTE applies the LTE predicate on the "contact_number" field.
func ContactNumberLTE(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContactNumber), v))
	})
}

// ContactNumberContains applies the Contains predicate on the "contact_number" field.
func ContactNumberContains(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContactNumber), v))
	})
}

// ContactNumberHasPrefix applies the HasPrefix predicate on the "contact_number" field.
func ContactNumberHasPrefix(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContactNumber), v))
	})
}

// ContactNumberHasSuffix applies the HasSuffix predicate on the "contact_number" field.
func ContactNumberHasSuffix(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContactNumber), v))
	})
}

// ContactNumberEqualFold applies the EqualFold predicate on the "contact_number" field.
func ContactNumberEqualFold(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContactNumber), v))
	})
}

// ContactNumberContainsFold applies the ContainsFold predicate on the "contact_number" field.
func ContactNumberContainsFold(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContactNumber), v))
	})
}

// ShopLocationEQ applies the EQ predicate on the "shop_location" field.
func ShopLocationEQ(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldShopLocation), v))
	})
}

// ShopLocationNEQ applies the NEQ predicate on the "shop_location" field.
func ShopLocationNEQ(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldShopLocation), v))
	})
}

// ShopLocationIn applies the In predicate on the "shop_location" field.
func ShopLocationIn(vs ...string) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldShopLocation), v...))
	})
}

// ShopLocationNotIn applies the NotIn predicate on the "shop_location" field.
func ShopLocationNotIn(vs ...string) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldShopLocation), v...))
	})
}

// ShopLocationGT applies the GT predicate on the "shop_location" field.
func ShopLocationGT(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldShopLocation), v))
	})
}

// ShopLocationGTE applies the GTE predicate on the "shop_location" field.
func ShopLocationGTE(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldShopLocation), v))
	})
}

// ShopLocationLT applies the LT predicate on the "shop_location" field.
func ShopLocationLT(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldShopLocation), v))
	})
}

// ShopLocationLTE applies the LTE predicate on the "shop_location" field.
func ShopLocationLTE(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldShopLocation), v))
	})
}

// ShopLocationContains applies the Contains predicate on the "shop_location" field.
func ShopLocationContains(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldShopLocation), v))
	})
}

// ShopLocationHasPrefix applies the HasPrefix predicate on the "shop_location" field.
func ShopLocationHasPrefix(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldShopLocation), v))
	})
}

// ShopLocationHasSuffix applies the HasSuffix predicate on the "shop_location" field.
func ShopLocationHasSuffix(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldShopLocation), v))
	})
}

// ShopLocationEqualFold applies the EqualFold predicate on the "shop_location" field.
func ShopLocationEqualFold(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldShopLocation), v))
	})
}

// ShopLocationContainsFold applies the ContainsFold predicate on the "shop_location" field.
func ShopLocationContainsFold(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldShopLocation), v))
	})
}

// TaxIDEQ applies the EQ predicate on the "tax_id" field.
func TaxIDEQ(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaxID), v))
	})
}

// TaxIDNEQ applies the NEQ predicate on the "tax_id" field.
func TaxIDNEQ(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaxID), v))
	})
}

// TaxIDIn applies the In predicate on the "tax_id" field.
func TaxIDIn(vs ...string) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaxID), v...))
	})
}

// TaxIDNotIn applies the NotIn predicate on the "tax_id" field.
func TaxIDNotIn(vs ...string) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaxID), v...))
	})
}

// TaxIDGT applies the GT predicate on the "tax_id" field.
func TaxIDGT(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaxID), v))
	})
}

// TaxIDGTE applies the GTE predicate on the "tax_id" field.
func TaxIDGTE(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaxID), v))
	})
}

// TaxIDLT applies the LT predicate on the "tax_id" field.
func TaxIDLT(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaxID), v))
	})
}

// TaxIDLTE applies the LTE predicate on the "tax_id" field.
func TaxIDLTE(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaxID), v))
	})
}

// TaxIDContains applies the Contains predicate on the "tax_id" field.
func TaxIDContains(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTaxID), v))
	})
}

// TaxIDHasPrefix applies the HasPrefix predicate on the "tax_id" field.
func TaxIDHasPrefix(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTaxID), v))
	})
}

// TaxIDHasSuffix applies the HasSuffix predicate on the "tax_id" field.
func TaxIDHasSuffix(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTaxID), v))
	})
}

// TaxIDEqualFold applies the EqualFold predicate on the "tax_id" field.
func TaxIDEqualFold(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTaxID), v))
	})
}

// TaxIDContainsFold applies the ContainsFold predicate on the "tax_id" field.
func TaxIDContainsFold(v string) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTaxID), v))
	})
}

// AcceptedEQ applies the EQ predicate on the "accepted" field.
func AcceptedEQ(v bool) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAccepted), v))
	})
}

// AcceptedNEQ applies the NEQ predicate on the "accepted" field.
func AcceptedNEQ(v bool) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAccepted), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SellerRequest {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerRequest(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// HasShopCategory applies the HasEdge predicate on the "shop_category" edge.
func HasShopCategory() predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShopCategoryTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShopCategoryTable, ShopCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasShopCategoryWith applies the HasEdge predicate on the "shop_category" edge with a given conditions (other predicates).
func HasShopCategoryWith(preds ...predicate.ShopCategory) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ShopCategoryInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ShopCategoryTable, ShopCategoryColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SellerRequest) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SellerRequest) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SellerRequest) predicate.SellerRequest {
	return predicate.SellerRequest(func(s *sql.Selector) {
		p(s.Not())
	})
}
