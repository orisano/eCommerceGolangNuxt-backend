// Code generated by entc, DO NOT EDIT.

package sellerproductvariation

import (
	"time"
)

const (
	// Label holds the string label denoting the sellerproductvariation type in the database.
	Label = "seller_product_variation"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProductPrice holds the string denoting the product_price field in the database.
	FieldProductPrice = "product_price"
	// FieldSellingPrice holds the string denoting the selling_price field in the database.
	FieldSellingPrice = "selling_price"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgeSellerProduct holds the string denoting the seller_product edge name in mutations.
	EdgeSellerProduct = "seller_product"
	// EdgeSellerProductVariationValues holds the string denoting the seller_product_variation_values edge name in mutations.
	EdgeSellerProductVariationValues = "seller_product_variation_values"
	// EdgeCartProducts holds the string denoting the cart_products edge name in mutations.
	EdgeCartProducts = "cart_products"
	// EdgeCheckoutProducts holds the string denoting the checkout_products edge name in mutations.
	EdgeCheckoutProducts = "checkout_products"
	// Table holds the table name of the sellerproductvariation in the database.
	Table = "seller_product_variations"
	// SellerProductTable is the table that holds the seller_product relation/edge.
	SellerProductTable = "seller_product_variations"
	// SellerProductInverseTable is the table name for the SellerProduct entity.
	// It exists in this package in order to avoid circular dependency with the "sellerproduct" package.
	SellerProductInverseTable = "seller_products"
	// SellerProductColumn is the table column denoting the seller_product relation/edge.
	SellerProductColumn = "seller_product_seller_product_variations"
	// SellerProductVariationValuesTable is the table that holds the seller_product_variation_values relation/edge.
	SellerProductVariationValuesTable = "seller_product_variation_values"
	// SellerProductVariationValuesInverseTable is the table name for the SellerProductVariationValues entity.
	// It exists in this package in order to avoid circular dependency with the "sellerproductvariationvalues" package.
	SellerProductVariationValuesInverseTable = "seller_product_variation_values"
	// SellerProductVariationValuesColumn is the table column denoting the seller_product_variation_values relation/edge.
	SellerProductVariationValuesColumn = "seller_product_variation_seller_product_variation_values"
	// CartProductsTable is the table that holds the cart_products relation/edge.
	CartProductsTable = "cart_products"
	// CartProductsInverseTable is the table name for the CartProduct entity.
	// It exists in this package in order to avoid circular dependency with the "cartproduct" package.
	CartProductsInverseTable = "cart_products"
	// CartProductsColumn is the table column denoting the cart_products relation/edge.
	CartProductsColumn = "seller_product_variation_cart_products"
	// CheckoutProductsTable is the table that holds the checkout_products relation/edge.
	CheckoutProductsTable = "checkout_products"
	// CheckoutProductsInverseTable is the table name for the CheckoutProduct entity.
	// It exists in this package in order to avoid circular dependency with the "checkoutproduct" package.
	CheckoutProductsInverseTable = "checkout_products"
	// CheckoutProductsColumn is the table column denoting the checkout_products relation/edge.
	CheckoutProductsColumn = "seller_product_variation_checkout_products"
)

// Columns holds all SQL columns for sellerproductvariation fields.
var Columns = []string{
	FieldID,
	FieldProductPrice,
	FieldSellingPrice,
	FieldQuantity,
	FieldImage,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "seller_product_variations"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"seller_product_seller_product_variations",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
