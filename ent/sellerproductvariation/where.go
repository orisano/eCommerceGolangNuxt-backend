// Code generated by entc, DO NOT EDIT.

package sellerproductvariation

import (
	"bongo/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ProductPrice applies equality check predicate on the "product_price" field. It's identical to ProductPriceEQ.
func ProductPrice(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPrice), v))
	})
}

// SellingPrice applies equality check predicate on the "selling_price" field. It's identical to SellingPriceEQ.
func SellingPrice(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSellingPrice), v))
	})
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImage), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// ProductPriceEQ applies the EQ predicate on the "product_price" field.
func ProductPriceEQ(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductPrice), v))
	})
}

// ProductPriceNEQ applies the NEQ predicate on the "product_price" field.
func ProductPriceNEQ(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductPrice), v))
	})
}

// ProductPriceIn applies the In predicate on the "product_price" field.
func ProductPriceIn(vs ...decimal.Decimal) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProductPrice), v...))
	})
}

// ProductPriceNotIn applies the NotIn predicate on the "product_price" field.
func ProductPriceNotIn(vs ...decimal.Decimal) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProductPrice), v...))
	})
}

// ProductPriceGT applies the GT predicate on the "product_price" field.
func ProductPriceGT(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductPrice), v))
	})
}

// ProductPriceGTE applies the GTE predicate on the "product_price" field.
func ProductPriceGTE(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductPrice), v))
	})
}

// ProductPriceLT applies the LT predicate on the "product_price" field.
func ProductPriceLT(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductPrice), v))
	})
}

// ProductPriceLTE applies the LTE predicate on the "product_price" field.
func ProductPriceLTE(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductPrice), v))
	})
}

// SellingPriceEQ applies the EQ predicate on the "selling_price" field.
func SellingPriceEQ(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceNEQ applies the NEQ predicate on the "selling_price" field.
func SellingPriceNEQ(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceIn applies the In predicate on the "selling_price" field.
func SellingPriceIn(vs ...decimal.Decimal) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSellingPrice), v...))
	})
}

// SellingPriceNotIn applies the NotIn predicate on the "selling_price" field.
func SellingPriceNotIn(vs ...decimal.Decimal) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSellingPrice), v...))
	})
}

// SellingPriceGT applies the GT predicate on the "selling_price" field.
func SellingPriceGT(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceGTE applies the GTE predicate on the "selling_price" field.
func SellingPriceGTE(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceLT applies the LT predicate on the "selling_price" field.
func SellingPriceLT(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSellingPrice), v))
	})
}

// SellingPriceLTE applies the LTE predicate on the "selling_price" field.
func SellingPriceLTE(v decimal.Decimal) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSellingPrice), v))
	})
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantity), v))
	})
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldQuantity), v...))
	})
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldQuantity), v...))
	})
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantity), v))
	})
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantity), v))
	})
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantity), v))
	})
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantity), v))
	})
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImage), v))
	})
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImage), v))
	})
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...int) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImage), v...))
	})
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...int) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImage), v...))
	})
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImage), v))
	})
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImage), v))
	})
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImage), v))
	})
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v int) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImage), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SellerProductVariation {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeletedAt)))
	})
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeletedAt)))
	})
}

// HasSellerProduct applies the HasEdge predicate on the "seller_product" edge.
func HasSellerProduct() predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SellerProductTable, SellerProductColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSellerProductWith applies the HasEdge predicate on the "seller_product" edge with a given conditions (other predicates).
func HasSellerProductWith(preds ...predicate.SellerProduct) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SellerProductTable, SellerProductColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSellerProductVariationValues applies the HasEdge predicate on the "seller_product_variation_values" edge.
func HasSellerProductVariationValues() predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductVariationValuesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerProductVariationValuesTable, SellerProductVariationValuesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSellerProductVariationValuesWith applies the HasEdge predicate on the "seller_product_variation_values" edge with a given conditions (other predicates).
func HasSellerProductVariationValuesWith(preds ...predicate.SellerProductVariationValues) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SellerProductVariationValuesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SellerProductVariationValuesTable, SellerProductVariationValuesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCartProducts applies the HasEdge predicate on the "cart_products" edge.
func HasCartProducts() predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CartProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CartProductsTable, CartProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCartProductsWith applies the HasEdge predicate on the "cart_products" edge with a given conditions (other predicates).
func HasCartProductsWith(preds ...predicate.CartProduct) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CartProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CartProductsTable, CartProductsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCheckoutProducts applies the HasEdge predicate on the "checkout_products" edge.
func HasCheckoutProducts() predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CheckoutProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CheckoutProductsTable, CheckoutProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCheckoutProductsWith applies the HasEdge predicate on the "checkout_products" edge with a given conditions (other predicates).
func HasCheckoutProductsWith(preds ...predicate.CheckoutProduct) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CheckoutProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CheckoutProductsTable, CheckoutProductsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SellerProductVariation) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SellerProductVariation) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SellerProductVariation) predicate.SellerProductVariation {
	return predicate.SellerProductVariation(func(s *sql.Selector) {
		p(s.Not())
	})
}
