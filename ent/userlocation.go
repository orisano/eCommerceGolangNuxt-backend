// Code generated by entc, DO NOT EDIT.

package ent

import (
	"bongo/ent/user"
	"bongo/ent/userlocation"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// UserLocation is the model entity for the UserLocation schema.
type UserLocation struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Area holds the value of the "area" field.
	Area string `json:"area,omitempty"`
	// Street holds the value of the "street" field.
	Street string `json:"street,omitempty"`
	// House holds the value of the "house" field.
	House string `json:"house,omitempty"`
	// PostOffice holds the value of the "post_office" field.
	PostOffice string `json:"post_office,omitempty"`
	// PostCode holds the value of the "post_code" field.
	PostCode int `json:"post_code,omitempty"`
	// PoliceStation holds the value of the "police_station" field.
	PoliceStation string `json:"police_station,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserLocationQuery when eager-loading is set.
	Edges               UserLocationEdges `json:"edges"`
	user_user_locations *int
}

// UserLocationEdges holds the relations/edges for other nodes in the graph.
type UserLocationEdges struct {
	// GetUser holds the value of the get_user edge.
	GetUser *User `json:"get_user,omitempty"`
	// UserLocations holds the value of the user_locations edge.
	UserLocations []*Checkout `json:"user_locations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GetUserOrErr returns the GetUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserLocationEdges) GetUserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.GetUser == nil {
			// The edge get_user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.GetUser, nil
	}
	return nil, &NotLoadedError{edge: "get_user"}
}

// UserLocationsOrErr returns the UserLocations value or an error if the edge
// was not loaded in eager-loading.
func (e UserLocationEdges) UserLocationsOrErr() ([]*Checkout, error) {
	if e.loadedTypes[1] {
		return e.UserLocations, nil
	}
	return nil, &NotLoadedError{edge: "user_locations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserLocation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userlocation.FieldID, userlocation.FieldPostCode:
			values[i] = new(sql.NullInt64)
		case userlocation.FieldArea, userlocation.FieldStreet, userlocation.FieldHouse, userlocation.FieldPostOffice, userlocation.FieldPoliceStation, userlocation.FieldCity:
			values[i] = new(sql.NullString)
		case userlocation.FieldCreatedAt, userlocation.FieldUpdatedAt, userlocation.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case userlocation.ForeignKeys[0]: // user_user_locations
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserLocation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserLocation fields.
func (ul *UserLocation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userlocation.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ul.ID = int(value.Int64)
		case userlocation.FieldArea:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				ul.Area = value.String
			}
		case userlocation.FieldStreet:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field street", values[i])
			} else if value.Valid {
				ul.Street = value.String
			}
		case userlocation.FieldHouse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field house", values[i])
			} else if value.Valid {
				ul.House = value.String
			}
		case userlocation.FieldPostOffice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_office", values[i])
			} else if value.Valid {
				ul.PostOffice = value.String
			}
		case userlocation.FieldPostCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field post_code", values[i])
			} else if value.Valid {
				ul.PostCode = int(value.Int64)
			}
		case userlocation.FieldPoliceStation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field police_station", values[i])
			} else if value.Valid {
				ul.PoliceStation = value.String
			}
		case userlocation.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				ul.City = value.String
			}
		case userlocation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ul.CreatedAt = value.Time
			}
		case userlocation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ul.UpdatedAt = value.Time
			}
		case userlocation.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ul.DeletedAt = new(time.Time)
				*ul.DeletedAt = value.Time
			}
		case userlocation.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_locations", value)
			} else if value.Valid {
				ul.user_user_locations = new(int)
				*ul.user_user_locations = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGetUser queries the "get_user" edge of the UserLocation entity.
func (ul *UserLocation) QueryGetUser() *UserQuery {
	return (&UserLocationClient{config: ul.config}).QueryGetUser(ul)
}

// QueryUserLocations queries the "user_locations" edge of the UserLocation entity.
func (ul *UserLocation) QueryUserLocations() *CheckoutQuery {
	return (&UserLocationClient{config: ul.config}).QueryUserLocations(ul)
}

// Update returns a builder for updating this UserLocation.
// Note that you need to call UserLocation.Unwrap() before calling this method if this UserLocation
// was returned from a transaction, and the transaction was committed or rolled back.
func (ul *UserLocation) Update() *UserLocationUpdateOne {
	return (&UserLocationClient{config: ul.config}).UpdateOne(ul)
}

// Unwrap unwraps the UserLocation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ul *UserLocation) Unwrap() *UserLocation {
	tx, ok := ul.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserLocation is not a transactional entity")
	}
	ul.config.driver = tx.drv
	return ul
}

// String implements the fmt.Stringer.
func (ul *UserLocation) String() string {
	var builder strings.Builder
	builder.WriteString("UserLocation(")
	builder.WriteString(fmt.Sprintf("id=%v", ul.ID))
	builder.WriteString(", area=")
	builder.WriteString(ul.Area)
	builder.WriteString(", street=")
	builder.WriteString(ul.Street)
	builder.WriteString(", house=")
	builder.WriteString(ul.House)
	builder.WriteString(", post_office=")
	builder.WriteString(ul.PostOffice)
	builder.WriteString(", post_code=")
	builder.WriteString(fmt.Sprintf("%v", ul.PostCode))
	builder.WriteString(", police_station=")
	builder.WriteString(ul.PoliceStation)
	builder.WriteString(", city=")
	builder.WriteString(ul.City)
	builder.WriteString(", created_at=")
	builder.WriteString(ul.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(ul.UpdatedAt.Format(time.ANSIC))
	if v := ul.DeletedAt; v != nil {
		builder.WriteString(", deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// UserLocations is a parsable slice of UserLocation.
type UserLocations []*UserLocation

func (ul UserLocations) config(cfg config) {
	for _i := range ul {
		ul[_i].config = cfg
	}
}
